<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-05-22T08:33:06.793Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hello-world</title>
    <link href="http://example.com/2024/05/22/hello-world/"/>
    <id>http://example.com/2024/05/22/hello-world/</id>
    <published>2024-05-22T08:33:06.000Z</published>
    <updated>2024-05-22T08:33:06.793Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="title-Hello-World"><a href="#title-Hello-World" class="headerlink" title="title: Hello World"></a>title: Hello World</h2><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h2 id=&quot;title-Hello-World&quot;&gt;&lt;a href=&quot;#title-Hello-World&quot; class=&quot;headerlink&quot; title=&quot;title: Hello World&quot;&gt;&lt;/a&gt;title: Hello World&lt;/h2&gt;&lt;p&gt;Wel</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JDBC</title>
    <link href="http://example.com/2024/05/22/JDBC/"/>
    <id>http://example.com/2024/05/22/JDBC/</id>
    <published>2024-05-22T08:33:06.000Z</published>
    <updated>2024-05-22T08:33:06.795Z</updated>
    
    <content type="html"><![CDATA[<p>JDBC编程六部</p><p>第一步：注册驱动</p><p>第二步：获取连接</p><p>第三步：获取数据库操作对象</p><p>第四步：执行SQL语句</p><p>第五步：处理查询结果集</p><p>第六步：释放资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from emp where ename=?&quot;</span>;</span><br><span class="line">           ps = connection.prepareStatement(sql);</span><br><span class="line">           <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">           <span class="type">String</span> <span class="variable">param</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">           ps.setString(<span class="number">1</span>,param);</span><br></pre></td></tr></table></figure><p>preparestatement使用方法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;JDBC编程六部&lt;/p&gt;
&lt;p&gt;第一步：注册驱动&lt;/p&gt;
&lt;p&gt;第二步：获取连接&lt;/p&gt;
&lt;p&gt;第三步：获取数据库操作对象&lt;/p&gt;
&lt;p&gt;第四步：执行SQL语句&lt;/p&gt;
&lt;p&gt;第五步：处理查询结果集&lt;/p&gt;
&lt;p&gt;第六步：释放资源&lt;/p&gt;
&lt;figure class=&quot;hi</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JVM</title>
    <link href="http://example.com/2024/05/22/JVM./"/>
    <id>http://example.com/2024/05/22/JVM./</id>
    <published>2024-05-22T08:33:06.000Z</published>
    <updated>2024-05-22T08:33:06.796Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h1><ul><li>定义<ul><li>java virtual machine -java 程序的运行环境（java二进制字节码的运行环境）</li></ul></li><li>好处<ul><li>一次编写，到处运行</li><li>自动内存管理，垃圾回收机制</li><li>数组下标越界检查</li><li>多态</li></ul></li><li>比较：<ul><li>jvm jre jdk</li><li><img src="https://img1.imgtp.com/2022/09/17/3zE8WLEb.png" alt="1663423163798.png"></li><li>.java文件被javac之后会变成class的二进制文件</li><li>放入到类的加载器中</li><li>放到jvm中：方法区 堆 虚拟机构 程序计数器 本地方法栈 本地方法接口</li><li>执行引擎： 解释器 即时编译器 垃圾回收 本地方法接口</li></ul></li></ul><h2 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h2><h3 id="程序计数器-program-counter-regist"><a href="#程序计数器-program-counter-regist" class="headerlink" title="程序计数器 program counter regist"></a>程序计数器 program counter regist</h3><ul><li>二进制文件的许多指令需要通过解释器 解释成机器码才能有CPU来处理</li><li>二进制字节码—&gt;解释器—–&gt;机器码—–&gt;CPU</li><li>程序计数器的作用就是记录下一条jvm指令的执行地址</li><li><a href="https://imgloc.com/i/o5zx0"><img src="https://s1.328888.xyz/2022/09/17/o5zx0.png" alt="o5zx0.png"></a></li><li>需要主义的是 每个线程都有自己的程序计数器 所以 他是线程私有的 不会存在内存溢出</li></ul><h3 id="虚拟机栈-jvm-stacks"><a href="#虚拟机栈-jvm-stacks" class="headerlink" title="虚拟机栈 jvm stacks"></a>虚拟机栈 jvm stacks</h3><ul><li>stacks 先进后出</li><li>就是线程运行时需要的内存空间 多个线程就会需要多个栈</li><li>一个栈内可以看成是由多个栈帧组成的<ul><li>栈帧 每个方法运行需要的内存</li></ul></li><li>每个线程只能有一个活动栈帧，对应当前的正在执行的那个方法<ul><li><p>垃圾回收是否涉及栈内存？</p><ul><li>垃圾回收只是涉及堆内存</li></ul></li><li><p>栈内存是否越大越好？</p><ul><li>内存是有限的 栈内存太大可能会导致并发的线程变少</li></ul></li><li><p>方法内的局部变量是否线程安全？</p><ul><li>安全的 方法栈对于线程是私有的</li><li>如果是static的变量呢？<ul><li>情况会发生变化 会导致线程不安全</li></ul></li></ul></li><li><p>方法内的局部变量是否线程安全？</p><ul><li>如果是方法内的局部变量没有逃离方法的作用访问，他是线程安全的</li></ul></li><li><p>栈内存溢出</p><ul><li>栈帧过多会导致栈内存溢出</li><li>栈帧过大也会导致stack内存溢出（出现的可能性比较小）</li><li>递归调用 没有程序出口的情况下</li></ul></li><li><p>案例一：</p><ul><li>cpu占用过多</li><li>在linux操作系统中，ps可以查看每一个线程对cpu的占用<ul><li>ps H -eo pid，tid，%cpu | grep 进程id Linux命令</li><li>jstack进程id</li></ul></li></ul></li><li><p>案例二：</p><ul><li>程序运行时间很长没有结果<ul><li>还是可以使用jstack 查看其中的信息可以是我们得到一些信息</li><li>死锁</li></ul></li></ul></li></ul></li></ul><h3 id="本地方法栈-stack"><a href="#本地方法栈-stack" class="headerlink" title="本地方法栈 stack"></a>本地方法栈 stack</h3><ul><li>实际上就是在我们java虚拟机在调用本地方法的时候需要使用的stack空间<ul><li>本地方法：不是使用java的编写的 往往是在jvm底层实现的方法 使用的是一些C++的语法</li></ul></li></ul><h3 id="堆-heap"><a href="#堆-heap" class="headerlink" title="堆 heap"></a>堆 heap</h3><ul><li>堆是线程共享的空间<ul><li>通过new创建的对象就是使用堆内存</li></ul></li><li>特点<ul><li>他是线程共享的，队中的对象都需要思考线程安全的问题</li><li>有垃圾回收机制</li><li>队中不再被引用的对象就会成为一个被垃圾回收的对象</li></ul></li><li>堆内存的溢出</li><li>堆内存诊断<ul><li>jps工具<ul><li>查看当前系统中有哪些java进程</li></ul></li><li>jmap工具<ul><li>查看堆内存占用情况</li></ul></li><li>jconsole工具<ul><li>图形化界面，多功能的检测工具，可以连续监测</li></ul></li><li>jmap -heap 进程id</li><li>新创建的对象会使用eden的区</li><li>被创建一段时间的线程实在used区</li></ul></li></ul><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><ul><li><p>jvm规范中对方法区的定义：</p><ul><li>method Area 一个方法区是所有java线程共享的，存储了跟类的结构有关的数据。例如：运行时的变量池，变量和方法数据和方法的代码和构造器包括在类中被使用的特殊方法和实例初始化和对象初始化。</li><li>方法区逻辑上是堆的一个组成部分，并不强制他的位置（永久代就是使用堆的一个空间，但是更新之后使用的就是原空间不是堆的，而是操作系统的空间）。有些JVM中是没有方法区的。 hotpats 1.8之前的才有</li><li>方法区的内存溢出的定义：<ul><li>方法区如果申请内存的时候出现空间不足也会出现内存溢出</li><li><img src="https://img1.imgtp.com/2022/09/22/4FGSpN9G.png" alt="1663845006269.png"></li><li>方法区的内存溢出问题(原空间内存溢出)<ul><li>Classloader 可以用来加载类的二进制字节码</li><li>classwriter 用代码的方法生成字节码的一个类 他的visit(版本号，public（访问修饰符），类名，包名，类的父类，实现的接口名称)。</li><li>类的加载类编译，连接，装入</li></ul></li><li>1.8之前的方法区溢出<ul><li>permGen space(permanent space 永久代)溢出</li></ul></li><li>场景：<ul><li>spring 使用了有些字节码技术 使用他生成了一些代理类 是AOP的关键</li><li>mybatis 用到了CGlab 使用了什么呢？ 都是在运行期间实现类的加载实现生成代理 经常会在运行中生成大量的类 </li><li>1.8 以后会使用操作系统的空间内存更大 不会产生内存溢出</li></ul></li></ul></li></ul></li><li><p>运行时常量池</p><ul><li>什么是常量池：<ul><li>helloworld要运行首先要实现二进制字节码文件（类的基本信息，类的常量池，类的方法定义包含虚拟机指令） 常量池里面会有一些类的地址和一些符号 还有一些方法的定义 构造方法也会生成<ul><li>javap 可以反编译helloworld的字节码文件 让人类可以看懂其中的过程</li><li>类的基本信息</li></ul></li><li>getstatic 就是获取一个静态变量 system.out</li><li>ldc 加载一个参数</li><li>invokevirtual就是调用一个方法</li><li>return表示返回一个结果</li></ul></li></ul></li><li><p>一些面试题</p><ul><li>string s1 &#x3D; “a”</li><li>string s2 &#x3D; “b”</li><li>string s3 &#x3D; “a” + “b”</li><li>string s4 &#x3D; s1 + s2 &#x2F;&#x2F;需要注意的是这里做的一个是对象的加法 会成为一个builde创建一个新的对象 在堆中 而不是在常量池中</li><li>string s5 &#x3D; “ab”</li><li>string s6 &#x3D; s4.intern() &#x2F;&#x2F;intern()函数会检查常量池中是否有该字符串 没有的话创建新的 有的话引用已有的</li></ul></li><li><p>s3 &#x3D;&#x3D; s4 false</p></li><li><p>s3 &#x3D;&#x3D; s5 true</p></li><li><p>s3 &#x3D;&#x3D; s6 true</p></li></ul><h3 id="如何优化呢？"><a href="#如何优化呢？" class="headerlink" title="如何优化呢？"></a>如何优化呢？</h3><ul><li>永久代的回收效率太低 所以更新了垃圾回收的机制</li><li>小扩展<ul><li>UseGCoverheadLimit 垃圾回收机制相关内容<ul><li>如果有98%时间用在垃圾回收上但是只有2%的回收成功 jvm就会放弃内存回收 就会爆出一个错误</li></ul></li></ul></li><li>heap堆</li><li>stack 栈</li><li>1.6使用的是永久代 1.8使用的是堆空间</li><li>StringTable 垃圾回收<ul><li>垃圾回收现象<ul><li>StringTable是一个hashTable的结构 通过调整hash key的个数实现对效率的提高<ul><li>考虑是否将字符串对象入池？</li><li>加入List集合的对象 不会被垃圾回收（在List没有销毁的情况下）</li><li>通过intern函数实现对常量池的利用 减少对堆内存的使用</li></ul></li></ul></li></ul></li></ul><h2 id="直接内存-direct-buffer-（快，有对应的java-API）"><a href="#直接内存-direct-buffer-（快，有对应的java-API）" class="headerlink" title="直接内存 direct buffer （快，有对应的java_API）"></a>直接内存 direct buffer （快，有对应的java_API）</h2><ul><li>直接内存是什么呢？<ul><li>不属于jvm的内存管理<ul><li>它实际上是操作系统的内存</li><li>常见于NIO操作时，用于数据缓冲区</li><li>分配回收成本高，但是读写性能高</li><li>不受JVM内存回收管理</li></ul></li><li>直接内存实现了 操作系统和jvm共享一片内存空间 适合文件的IO操作</li></ul></li><li>直接内存的溢出问题</li><li>直接内存 分配和释放的原理<ul><li>direct buffer的使用情况java没有办法管理要使用windows的cmd实现对直接内存的监视</li><li>是不是垃圾回收导致了 直接内存被释放了呢？</li><li>垃圾回收导致了直接内存的释放的原理是什么呢？<ul><li>java非常底层的一个类 Unsafe</li><li>Unsafe不能直接获取 要通过反射才能获取<ul><li>DirectByteBuffer内部有freeMemory的方法</li></ul></li></ul></li></ul></li></ul><h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><ul><li>如何判断对象可以回收<ul><li>引用计数法<ul><li>只有变量被引用就会在计数器中加一 如果一次没有被引用就会被减一 当计数变成0的时候就是被回收的时候</li><li>出现一种循环引用的问题 A &lt;&#x3D;&#x3D;&gt; B 就会无法判断对象是否存活</li></ul></li><li>可达性分析算法<ul><li>首先要确定根对象 就是那些一定不会被回收的对象就是根对象<ul><li>看看对象是否被根对象直接或者间接的使用 以此为依据判断对象的活跃程度<ul><li>扫描队中的对象，看是否能够沿着GCRoot对象为起点的引用链条找到该对象，找不到，表示可以回收</li></ul></li><li>哪些对象可以作为GCRoot呢？<ul><li>使用eclipse的memory Analysis（MAT）看那些对象会成为根对象<ul><li>需要使用jmap生成的一个二进制文件</li><li>内部有参看GCRoot的选项</li><li>根对象主要可以分为四类<ul><li>system CLass<ul><li>主要是java运行时必须的一些类</li></ul></li><li>Native CLass<ul><li>操作系统引用的一些java对象</li></ul></li><li>Thread<ul><li>就是一些活动的线程 当前的线程是一定不能回收的<ul><li>有一个个的线程 每次方法的调用都会生成一个栈帧</li><li>主线程也是一个线程</li><li>局部变量都可以成为一个GCRoot对象</li><li>List在栈帧中 但是List中的对象实在堆中的</li><li>ArrayList就是一个根对象</li><li>方法参数也是一个根对象</li></ul></li></ul></li><li>Busy Monitor<ul><li>同步锁机制中的加锁的对象就是busy Class</li></ul></li></ul></li></ul></li><li>jmap 可以查看堆内存的使用情况</li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="java虚拟机中的四种引用"><a href="#java虚拟机中的四种引用" class="headerlink" title="java虚拟机中的四种引用"></a>java虚拟机中的四种引用</h2><ul><li>严格的来讲不止四种引用<ul><li>强引用： new对象就是一个强引用 &#x3D;&#x3D; 就会强引用一个对象 只要有强引用就不会被垃圾回收 只有所有的强引用对象都被断开时才会被回收</li><li>软引用： 和强引用的区别在于 没有被直接的强引用所引用就有可能会被垃圾回收掉 当垃圾回收时并且内存不够时 就会释放掉软引用引用的空间 总而言之就是 当没有内存的时候 会被回收掉</li><li>弱引用： 不管内存够不够 引用的对象都会回收空间<ul><li>如果有引用队列配合使用的话 垃圾回收的软弱引用会被放到引用队列中</li></ul></li><li>虚引用： 虚引用必须配合引用队列来使用，directBuffer中就会有虚引用（clean记录直接内存的地址） jvm无法管理直接对象也是必须依靠引用队列的原因</li><li>终结器引用： 虚引用必须配合引用队列来使用，所有的对象都会有一个共同的父类Object，同时都会有finalize()方法 当没有强引用的时候 就会生成一个终结器引用 当回收的时候就会将终结器引用对象放到引用队列 一个优先级很低的线程处理引用队列中的终结器引用 回收垃圾 工作效率低 被使用的可能很小<ul><li>不推荐使用finalize释放空间的理由</li></ul></li></ul></li><li>垃圾回收算法</li><li>分代垃圾回收</li><li>垃圾回收器</li><li>垃圾回收调优</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JVM&quot;&gt;&lt;a href=&quot;#JVM&quot; class=&quot;headerlink&quot; title=&quot;JVM&quot;&gt;&lt;/a&gt;JVM&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;定义&lt;ul&gt;
&lt;li&gt;java virtual machine -java 程序的运行环境（java二进制字节码的运行环</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MQ</title>
    <link href="http://example.com/2024/05/22/MQ/"/>
    <id>http://example.com/2024/05/22/MQ/</id>
    <published>2024-05-22T08:33:06.000Z</published>
    <updated>2024-05-22T08:33:06.800Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MQ-message-queue-kafka"><a href="#MQ-message-queue-kafka" class="headerlink" title="MQ message queue kafka"></a>MQ message queue kafka</h1><h2 id="消息队列的异步处理"><a href="#消息队列的异步处理" class="headerlink" title="消息队列的异步处理"></a>消息队列的异步处理</h2><ul><li>将不重要的步骤经行异步的处理 可以加快响应的速度</li></ul><h2 id="解耦合"><a href="#解耦合" class="headerlink" title="解耦合"></a>解耦合</h2><ul><li>系统之间通常使用api进行</li><li>消息队列可以作为一个中间的代理 可以在生产者消费者之间解耦合</li><li>例如将订单系统和库存系统中添加一个消息队列</li></ul><h2 id="流量削峰"><a href="#流量削峰" class="headerlink" title="流量削峰"></a>流量削峰</h2><ul><li>有大量的用户使用app 达到一个请求峰值的时候 服务器就会崩溃</li><li>如何高并发</li><li>当请求高的时候会有一个排队的处理</li><li>例如 12306之前的使用情况</li><li>服务器的集群也是有瓶颈的 数据库也会成为服务的瓶颈</li><li>mysql的单机处理量是8000左右 redis也是不能满足的</li><li>放到消息队列中 形成一个缓冲的时间 </li><li>并且消息队列的单机存储量可以达到10w数量级</li></ul><h2 id="日志处理"><a href="#日志处理" class="headerlink" title="日志处理"></a>日志处理</h2><ul><li>大型电商网络 app等需要分析用户的行为，要根据用户的访问情况来发现用户的喜好以及活跃状态，需要在页面上收集大量的用户访问信息</li><li>经典的实时处理的一个架构<br><a href="https://imgloc.com/i/5Khtp"><img src="https://s1.328888.xyz/2022/09/06/5Khtp.png" alt="5Khtp.png"></a><ul><li>nginx可以处理很多的并发</li></ul></li></ul><h2 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h2><ul><li>kafka是由apache软件基金会开发的一个开源软件，是由scala和java编写的。kafka的apache官网是这样介绍kafka的<ul><li>一个分布式的流平台<ol><li>发布和订阅流数据流，类似于消息队列或者是企业消息传递系统</li><li>以容错的持久化方式存储数据流</li><li>处理数据流  kafka stream 用的人比较少</li></ol></li></ul></li><li>public and subscribe</li><li>store</li><li>process</li></ul><h3 id="kafka的应用场景"><a href="#kafka的应用场景" class="headerlink" title="kafka的应用场景"></a>kafka的应用场景</h3><ol><li>建立一个实时的数据管道，一可靠地在系统或者应用程序之间获取数据</li><li>建立实时流应用程序，以转化或者相应数据流</li></ol><h3 id="kafka的诞生背景"><a href="#kafka的诞生背景" class="headerlink" title="kafka的诞生背景"></a>kafka的诞生背景</h3><ul><li>kafka的诞生使用于解决linkin的数据管道问题，起初linked采取了activieMQ来进行数据的交换，大约在2010年前后，那时的activieMQ还远远无法满足linkin对数据传递系统的要求，经常由于种种缺陷导致消息阻塞或者无法服务正常的访问，为了能够解决这个问题，linkin决定研发自己的消息传递系统，当时的linkin的首席架构师便开始了组织团队进行消息队列系统的研发</li><li>kafka比activities牛</li><li>kafka是有自己的生态圈的</li></ul><h2 id="转战rabbitMQ"><a href="#转战rabbitMQ" class="headerlink" title="转战rabbitMQ"></a>转战rabbitMQ</h2><ul><li>在Linux操作系统的docker中启动rabbitMQ<blockquote><p>[root@localhost ~]# docker run <br>-e RABBITMQ_DEFAULT_USER&#x3D;itcast <br>-e RABBITMQ_DEFAULT_PASS&#x3D;465124 <br>–name mq <br>–hostname mq1 <br>-p 15672:15672 <br>-p 5672:5672 <br>-d <br>rabbitmq:3-management</p></blockquote></li><li>可以通过使用ip加上端口号实现对rabbitMQ管理系统的访问</li><li>可以在里面设置自己的虚拟主机 虚拟主机往往需要相互隔离</li></ul><h3 id="rabbitMQ的逻辑结构"><a href="#rabbitMQ的逻辑结构" class="headerlink" title="rabbitMQ的逻辑结构"></a>rabbitMQ的逻辑结构</h3><p> <img src="https://img1.imgtp.com/2022/09/12/OeWGHs2C.png" alt="1662944408407.png"></p><ul><li>总结<ul><li>channel：操作MQ的工具</li><li>exchange：路由消息到队列中</li><li>queue：缓存消息</li><li>virtual host：虚拟主机，是对queue、exchange等资源的逻辑分组</li></ul></li></ul><h2 id="RabbitMQ入门"><a href="#RabbitMQ入门" class="headerlink" title="RabbitMQ入门"></a>RabbitMQ入门</h2><ul><li>常见的消息模型</li><li><img src="https://img1.imgtp.com/2022/09/12/vOCA1WPG.png" alt="1662944869205.png"></li><li><img src="https://img1.imgtp.com/2022/09/12/2BP1AEBv.png" alt="1662944920238.png"><ul><li><p>12 为基本消息队列和工作消息队列</p></li><li><p>p是production c是consumer </p></li><li><p>发布订阅，有根据交换机的类型不同分为三种</p><ul><li>广播 fanout exchange</li><li>路由 direct exchange</li><li>主题 topic exchange</li></ul></li><li><p>publisher —-&gt; queue ——&gt; consumer</p></li></ul></li></ul><h2 id="完成官方demo中的hello-world-案例"><a href="#完成官方demo中的hello-world-案例" class="headerlink" title="完成官方demo中的hello world 案例"></a>完成官方demo中的hello world 案例</h2><ul><li><p>实现步骤</p><ul><li>导入课前资料中的demo工程</li><li>运行publisher服务中的测试类publisherTest中的测试方法testSendMessage()</li><li>查看RabbitMQ控制台的消息</li><li>启动consumer服务，查看是否能接收消息</li></ul></li><li><p>消息队列的消息发送流程</p><ol><li>建立connection</li><li>创建channel</li><li>利用channel声明队列</li><li>利用channel像队列发送消息</li></ol></li><li><p>基本消息队列的消息接收流程</p><ol><li>建立connection</li><li>创建channel</li><li>利用channel声明队列</li><li>定义consumer的消费行为 handleDelivery()</li><li>利用channel将消费者与队列绑定</li></ol></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MQ-message-queue-kafka&quot;&gt;&lt;a href=&quot;#MQ-message-queue-kafka&quot; class=&quot;headerlink&quot; title=&quot;MQ message queue kafka&quot;&gt;&lt;/a&gt;MQ message queue kaf</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux_Learn</title>
    <link href="http://example.com/2024/05/22/Linux_Learn/"/>
    <id>http://example.com/2024/05/22/Linux_Learn/</id>
    <published>2024-05-22T08:33:06.000Z</published>
    <updated>2024-05-22T08:33:06.798Z</updated>
    
    <content type="html"><![CDATA[<p>Linux简介：一种操作系统用于管理计算机资源的系统软件Linux注重安全性和稳定性，高并发处理能力，没有优异的可视化界面<br>Linux主要发行版本：Ubuntu(乌班图),Redhat(红帽),CentOS</p><h2 id="安装Linux操作系统"><a href="#安装Linux操作系统" class="headerlink" title="安装Linux操作系统"></a>安装Linux操作系统</h2><ol><li>虚拟机：可以用软件的方法模拟出一套具有完整的硬件系统功能的，运行在一个完全隔离的系统环境的完整计算机系统。</li></ol><ul><li>Linux的文件目录结果<ul><li>Bin： 存放的是命令的文件 用户的可执行文件可放在 bin-&gt;usr&#x2F;bin</li><li>user&#x2F;local&#x2F;bin：存放用户自己的可执行文件 和 上面的大差不差</li><li>etc：放的是配置文件 最重要的是环境变量。etc&#x2F;profile</li><li>opt：这是给Linux文件额外安装的软件的目录 比如：JDK Tomcat Mysql 相当于Windows中的program</li><li>快照的使用：使用快照可以实现对系统的回滚 类似于sql的事务管理</li></ul></li></ul><h2 id="Linux远程操作？"><a href="#Linux远程操作？" class="headerlink" title="Linux远程操作？"></a>Linux远程操作？</h2><ul><li>Xshell 远程控制台</li><li>Xftp 传输文件 ftp可能会有中文乱码 可以再文件中修改编码模式为UTF-8</li><li>虚拟机的迁移和删除：</li></ul><h2 id="使用vim开发一个简单的java程序"><a href="#使用vim开发一个简单的java程序" class="headerlink" title="使用vim开发一个简单的java程序"></a>使用vim开发一个简单的java程序</h2><ul><li>正常模式：可以编辑 删除之类的</li><li>插入模式：按i进入，可以添加自己的内容<br> 命令行模式：先输入esc表示退出vim 再输入： 进入命令行模式</li><li>退出：:wq 表示写入并退出(write Quite) :q 退出 :q! 强制退出不保存</li></ul><h2 id="快捷键的使用练习："><a href="#快捷键的使用练习：" class="headerlink" title="快捷键的使用练习："></a>快捷键的使用练习：</h2><ol><li>拷贝当前行 yy，当前行向下5行 5dd 黏贴p</li><li>删除当前行 dd，删除当前行向下的5行 5dd</li><li>在文件中查找字符串 按“&#x2F;”进入命令行输入自己要找的字符串 输入n可以到下一个匹配支付串处</li><li>设置文件的行号(:set nu)，取消文件的行号(set nonu)</li><li>编辑&#x2F;etc&#x2F;profile文件，使用快捷键到该文件的最末尾G和最首行gg</li><li>在文件中输入“hello”，回到一般模式（按esc）然后撤销这个动作 u </li><li>编辑 &#x2F;etc&#x2F;profile文件，并将光标移动到 20行 shift+g 需要注意的是 不要使用小键盘 因为回到是进入编辑模式</li></ol><ul><li>关机 重启命令<ul><li>shutdown -h now 立即关机 -h中的h表示halt表示停止</li><li>shutdown -h 1 一分钟后关机</li><li>shutdown -r now  现在重启计算机</li><li>halt</li><li>reboot</li><li>sync  把内存的数据同步到磁盘</li></ul></li><li>注意细节：<ol><li>不管是重启还是关闭系统，首先要运行sync命令 把内存中的数据写到磁盘中</li><li>目前的shutdown&#x2F;reboot&#x2F;halt 等命令均已经在关机前进行sync，老韩提醒：小心驶得万年船</li></ol></li><li>用户的登录和注销：<ul><li>基本介绍<ul><li>登陆时尽量不使用root账号登录，因为他的权限比较高，避免失误操作。可以利用普通用户登录，登陆后再用“ su - 用户名命令“ 来切换成管理员身份</li><li>在提示符下输入logout即可注销用户</li></ul></li></ul></li></ul><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><ul><li>Linux是一个多用户的操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统</li></ul><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><ul><li>useradd</li><li>应用案例<ul><li>添加一个用户sea<ul><li>细节说明：<ol><li>当前用户创建成功后，会自动创建用户名同名的home文件</li><li>也可以通过useradd -d 指定文件目录 新的用户名，给新创建的用户指定home目录</li><li>需要注意的是 root下才能有这样高的权限哦</li></ol></li></ul></li><li>指定&#x2F;修改密码：<ul><li>基本语法<ul><li>passwd 用户名 xxxx</li></ul></li><li>给Ocean用户指定密码<ul><li>pwd 显示当前用户所在的用户 print working directory</li><li></li></ul></li></ul></li></ul></li></ul><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><ul><li>userdel 用户名</li><li>应用案例：<ol><li>删除用户Ocean，但是要保留home目录 userdel Ocean  保留目录</li><li>删除用户以及用户主目录 userdel -r admin 删除了目录</li></ol></li><li>细节说明：<ul><li>是否能够保留home目录的讨论？</li></ul></li></ul><h3 id="用户的统一管理"><a href="#用户的统一管理" class="headerlink" title="用户的统一管理"></a>用户的统一管理</h3><ul><li><p>根据权限的不同划分不同的组</p><ul><li><p>用户组</p><ul><li><p>介绍：</p><ul><li>类似于角色，系统可以有共性&#x2F;权限的多个用户进行统一的管理</li></ul></li><li><p>新增组</p><ul><li>指令groupadd xxxx  —–创建xxxx组</li></ul></li><li><p>删除组</p><ul><li>指令：groupdel xxxx ——–删除xxxx组</li></ul></li><li><p>增加用户时直接加上组</p><ul><li><p>指令：useradd -g 用户组 用户名</p><p>注意：Linux中没有消息就是好消息！ 细节：如果吗，没有指定用户的组会创建一个和用户同名的组 并将其放入</p></li><li><p>如何修改用户的组呢？</p><ul><li>usermod -g spring ocean </li><li>组里面有什么样的权限不用着急 后面会讲</li></ul></li><li><p>用户和组相关文件</p><ul><li>&#x2F;etc&#x2F;passwd<ul><li>用户的配置文件，记录了用户的各种信息</li><li>每行的含义：用户名：口令：用户标识号（UID):组标识号（GID）：解释性描述：主目录：登录Shell、</li></ul></li><li>&#x2F;etc&#x2F;shadow文件<ul><li>口令的配置文件</li><li>每行的含义：登录名：加密口令：最后一次修改时间：最小时间间隔：最大时间间隔：警告时间：不活动时间：失效时间：标志</li></ul></li><li>&#x2F;etc&#x2F;group文件<ul><li>组（group）的配置文件，记录Linux包含的组的文件的信息每行含义：组名：口令：组标识号：组内用户列表</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="常用的使用指令"><a href="#常用的使用指令" class="headerlink" title="常用的使用指令"></a>常用的使用指令</h2><ul><li><p>基本介绍:</p><ol start="0"><li>关机</li><li>单用户（找回丢失密码）</li><li>多用户状态没有网络服务</li><li>多用户状态有网络服务</li><li>系统未使用保留给用户</li><li>图形界面</li><li>系统重启</li></ol><ul><li>常用的运行级别是3和5 也可以指定默认的运行级别，后面演示</li></ul></li><li><p>应用实例</p><p>命令：init[0123456]应用案例：通过init来切换不同的运行级别，比如动5-&gt;3，然后关机</p></li><li><p>如何指定一个默认的init 级别呢？</p><ul><li><p>&#x2F;tec&#x2F;inittab文件中</p><p>在CentOS7之前，&#x2F;etc&#x2F;inittab文件中。</p><p>进行了简化，如下：</p><p>​multi-user.target:analogous to runlevel 3</p><p>​graphical.target:analogous to runlevel 5</p><p>#To view current default target,run:<br>systemctl get-default<br>#To set a default target,run:<br>systemctl set-default TARGET.target</p></li><li><p>如何找回用户密码？</p><ol><li>在开机快速按e 进入edit界面</li><li>在UTF-8后面加入以下的字符</li><li><img src="https://s1.328888.xyz/2022/06/14/pWxuB.png" alt="pWxuB.png"></li><li>使用快捷键Ctrl+X进入单用户模式</li><li>接着，在光标闪烁的位置中输入：mount -o remount, rw &#x2F; ,完成后按键盘的回车键。</li><li>在新的一行最后面输入：passwd，完成后按回车键。输入密码，然后再次确认密码即可，密码修改成功以后，会显示password。。。。的样式，说明修改成功</li><li>输入touch &#x2F;.autorelabel            Enter</li><li>输入exec &#x2F;sbin&#x2F;init          Enter 时间较长 上来还会不过一个enable 不管他</li></ol></li></ul><h2 id="手册"><a href="#手册" class="headerlink" title="手册"></a>手册</h2><ul><li><p>man 获取帮助文件</p><ul><li>基本语法：man[命令或者配置文件] 功能获取帮助信息</li><li>案例：查看ls命令的帮助信息 man xx （xx表示目标命令）<ul><li>需要特别指出的是在Linux中，选项是可以组合使用的 比如ls -a 和ls -l 组合变为ls-al</li></ul></li><li>在Linux下</li></ul></li><li><p>help指令：</p><ul><li><p>基本语法：help 命令 </p></li><li><p>功能描述：获取shell内部的命令的帮助信息</p></li></ul></li></ul><h3 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h3><ul><li><p>pwd 显示当前文件目录的绝对路径</p></li><li><p>ls 显示当前目录下的所有子目录和文件</p><ul><li>-a 显示所有 包含隐藏的</li><li>-l 显示一些信息</li></ul></li><li><p>mkdir是默认创建单极目录</p><ul><li>如果需要使用多级目录使用选项 mkdir -p &#x2F;home&#x2F;dog</li></ul></li><li><p>目录的删除 rmdir remove directory</p><ul><li>默认是删除空目录，如果不是空目录则无法删除</li><li>提示：如果删除非空目录，需要使用 rm -rf xxxx（要删除的目录）</li></ul></li><li><p>touch指令</p><ul><li>touch指令创建空文件<ul><li>基本语法<ul><li>touch的文件名称</li></ul></li><li>应用实例<ul><li>在&#x2F;home目录下，创建一个空文件</li></ul></li></ul></li></ul></li><li><p>cp指令</p><ul><li>cp fuckname.txt &#x2F;home&#x2F; 复制fuckname.txt 到 home文件夹下</li><li>递归拷贝：cp -r &#x2F;home&#x2F;bbb &#x2F;opt&#x2F;</li><li>使用细节：强制覆盖： \cp  —-&gt;   \cp -r &#x2F;home&#x2F;bbb &#x2F;opt&#x2F;</li></ul></li><li><p>mv</p><ul><li>mv cat.txt pig.txt 等价于重命名</li><li>mv pig.txt &#x2F;root 移动 剪切</li><li>mv pig.txt &#x2F;root&#x2F;donkey.txt 移动并且重命名</li><li>mv移动整个目录 将opt移动到home下</li></ul></li><li><p>cat指令</p><ul><li><p>查看文件内容</p></li><li><p>cat查看文件更安全 只能查看 不能修改</p></li><li><p>cat -n Hello.java          -n显示行号</p><ul><li>管道命令 为了方便，一般会带上管道命令  | more</li><li>example: cat -n &#x2F;etc&#x2F;profile | more</li><li>使用more查看文件 more &#x2F;opt&#x2F;profile</li></ul></li><li><p>less指令</p><ul><li>less指令用来分屏查看文件内容，他的功能与more指令类似，但是比more指令更加强大，支持各种显示终端less指令在显示文件内容时，并不是一次将整个文件全部加载之后才显示，而是根据显示需要加载内容，对于显示具有较高的效率</li><li>实时的</li></ul></li><li><p>基本语法</p><ul><li><p>less 要查看的文件</p><p>​操作： </p><pre><code> 1. 空格键     向下翻页2. pagedown 向下翻页3. pageup 向上翻页4. /字符串 匹配5. ？支付串 匹配6. q 离开less程序</code></pre></li><li><p>echo指令</p><ul><li>echo输出内容到控制台</li><li>基本语法<ul><li>echo -(?) databaseLearn.md<ul><li>实例：</li><li>使用echo指令输出环境变量 比如$PATH</li><li>使用echo指令输出Hello，world</li></ul></li></ul></li></ul></li><li><p>Head指令</p><ul><li>head用于显示文件的开头内容，默认情况下head指令显示文件的前十行</li><li>基本语法</li><li>head 文件</li><li>head -n 文件<ul><li>案例<ul><li>查看&#x2F;etc&#x2F;profile 的前面5行代码</li><li>[root@192 ~]# head -n 5 databaseLearn.md</li></ul></li></ul></li></ul></li><li><p>tail指令</p><ul><li>tail database.md 查看最后的10行（默认）</li><li>tail -n 15 database.md 指定行数查看尾部</li><li>tail -f database.md 功能描述：实现追踪文档的所有更新</li></ul></li><li><p>&#x2F;&gt;指令和&gt;&gt;指令</p><ul><li>&#x2F;&gt;输出重定向和&gt;&gt;追加</li><li>基本语法<ul><li>ls -l &gt; Helllo.java 列表的内容写到Hello.java （覆盖写）</li><li>ls -al &gt;&gt;Hello.java 列表的内容追加到文件Hello.java中</li><li>cat database.md &gt; Hello.java   将文件1的内容覆盖到文件2中</li><li>echo “Hello” &gt;&gt;Hello.java 将内容追加到文件中 <ul><li>注意退出监控是Ctrl+C</li></ul></li></ul></li></ul></li><li><p>ln指令</p><ul><li>软连接也称为符号链接，类似于windows里面的快捷方式，主要存放了链接其他文件的路径</li><li>基本语法<ul><li>ln -s 源文件目录 软连接名 （给源文件创建一个软连接）</li><li>当我们使用pwd是显示的是软连接所在的路径</li><li>需要注意的是不用形成回路</li></ul></li></ul></li><li><p>history指令</p><ul><li>查看已执行过的历史命令，也可以执行历史命令</li><li>基本语法<ul><li>history 功能描述:查看已执行的历史命令</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="日期指令"><a href="#日期指令" class="headerlink" title="日期指令"></a>日期指令</h2><ul><li>date指令显示日期<ol><li>date</li><li>date +%Y</li><li>date +%m</li><li>date +%d</li><li>date “+%Y-%m-%d %H:%M:%S” </li><li>date -s “2022-11-03 20:02:10” 设置时间</li></ol></li></ul><h2 id="搜索查找类"><a href="#搜索查找类" class="headerlink" title="搜索查找类"></a>搜索查找类</h2><ul><li><p>find指令</p><ul><li>find指令将从指定的目录向下递归各个子目录，将满足条件的文件或者目录现在在终端</li><li>基本语法：<ul><li>find [搜索范围][选项]<ul><li>选项说明<ul><li>-name&lt;查询方式&gt;</li><li>-user&lt;用户名&gt;</li><li>-size&lt;文件大小&gt;</li></ul></li></ul></li></ul></li><li>eg: find &#x2F;home -name admin</li></ul></li><li><p>locate指令</p><ul><li>locate指令可以快速地定位文件路径，locate指令利用实现建立的系统中所有文件名称及其路径的local数据库实现快速定位给定的文件。local指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的</li></ul></li><li><p>which</p><ul><li>查看某一个指令的地址</li><li>which ls</li></ul></li><li><p>grep指令</p><ul><li><p>grep过滤查找，管道符，“|” ，表示将一个命令的处理结果输出传递给后面的命令处理</p><ul><li><p>效果展示</p></li><li><p>[root@192 ~]# cat data.xml | grep “Hello”<br>Hello<br>Hello this is a row used test by grep command</p><hr></li><li><p>[root@192 ~]# cat data.xml | grep -n “Hello”</p><p>1:Hello</p><p>3:Hello this is a row used test by grep command</p><hr></li></ul></li></ul></li><li><p>压缩和解压类</p><ul><li><p>gzip&#x2F;gunzip指令</p><ul><li>gzip用于压缩文件，gunzip用于解压</li></ul></li><li><p>基本语法</p><ul><li>gzip 文件</li><li>gunzip 文件.gz</li></ul></li><li><p>zip&#x2F;unzip</p><ul><li><p>zip用于压缩文件，unzip用于解压文件 在项目中打包发布中很有用的</p><ul><li><p>zip -选项 xxx.zip</p></li><li><p>unzip -选项 xxx.zip</p></li><li><p>常用选项</p><ul><li>-r 递归压缩，即压缩目录</li><li>-d 指定解压文件的存放目录</li></ul><p>[root@192 Hello]# zip -r  home.zip &#x2F;home&#x2F;</p><p>[root@192 Hello]# unzip -d &#x2F;opt&#x2F;tmp home.zip</p></li></ul></li></ul></li><li><p>tar 指令</p><ul><li>即可打包压缩文件也可以压缩文件夹</li><li>可以压缩 也可以解压缩</li><li>[root@192 home]# tar -zcvf pc.tar.gz &#x2F;home&#x2F;pig &#x2F;home&#x2F;cat 压缩</li><li>[root@192 home]# tar -zxvf myhome.tar.gz &#x2F;home&#x2F; 解压</li></ul></li><li><p>ls -alh</p><ul><li>a表示all</li><li>h表示human 大小表示为人可读的</li><li>l表示list 列出</li></ul></li><li><p>chown指令</p><ul><li>修改文件的所有者<ul><li>chown 用户名 文件名<ul><li>所有者亦需要root权限</li></ul></li></ul></li></ul></li><li><p>组的管理</p><p>+ </p><p>  [root@192 home]# groupadd master<br>  [root@192 home]# useradd -g master jerry</p><ul><li><p>[root@192 home]# id jerry<br>uid&#x3D;1004(jerry) gid&#x3D;1005(master) 组&#x3D;1005(master)</p></li><li><p>所在组？</p><ul><li><p>一个文件被创建以后 文件所有者所在的组就是文件的所在组</p></li><li><p>-rw-r–r–. 1 jerry master 0 6月  16 19:07 readme.md jerry创建的文件</p></li><li><p>修改文件所在组chgrp 目标组 文件名</p></li><li><p>权限      所有者 所在组 大小    修改时间  文件名  </p></li><li><p>chgrp spring orange.txt<br>-rw-r–r–. 1 root spring    0 6月  16 19:21 orange.txt</p></li><li><p>r代表读 w代表写 x代表执行</p></li><li><p>第一列 一共十位 </p><ul><li><p>第0为是文件类型</p><ul><li>d目录 </li><li>l 链接文件 </li><li>c字符设备文件 鼠标键盘 </li><li>b块设备  U盘 打印机</li><li><ul><li></li></ul></li></ul></li><li><p>第1-3位 确定文件的所有者拥有的权限 —user</p></li><li><p>第4-6位确定所属组拥有该文件的权限 –group</p></li><li><p>第7-9位确定其他组用户拥有该文件的权限 –Other</p></li></ul></li></ul></li><li><p>其他组</p><ul><li>除了文件所在的组 其他的用户都是文件的其他组</li><li>改变用户的所在组<ul><li>usermod -g 新组名 用户名</li><li>usermod -d 目录名 用户名 改变用户的 初始目录。特别说明：用户需要有进入新目录的权限</li></ul></li></ul></li><li><p>修改-chmod</p><ul><li>u user g group o Other Person a all</li><li>chmod u&#x3D;rwx,g&#x3D;rx,o&#x3D;x 文件目录名</li><li>chomod o+w 文件目录名</li><li>chmod a-x 文件目录名</li><li>+-&#x3D; +：添加权限 -：删除权限 &#x3D;：赋予权限</li></ul><p>[root@192 home]# chmod u&#x3D;rwx,g&#x3D;rx,o&#x3D;x mycal<br>[root@192 home]# ls -hal</p><p>-rwxr-x–x.  1 root  root    644 6月  15 18:21 mycal</p></li><li><p>使用数字代表权限：r-4 w-2 x-1  注意   1:x 2:w 3:wx 4:r 5:rx 6:rw 7:rwx</p></li></ul></li></ul></li><li><p>crontab</p><ul><li>crond 定时调用：脚本 shell 比如对数据库的增删改查</li><li>任务调度快速入门<ul><li>设置任务调度文件: &#x2F;etc&#x2F;crontab</li><li>设置个人任务调度: 执行crontab -e 命令</li><li>接着输入任务到调度文件</li><li>如：*&#x2F;1 * * * * ls -l &#x2F;etc&#x2F; &gt; &#x2F;tmp&#x2F;to.txt</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*min *h *d *m *week    </span><br><span class="line">*/<span class="number">1</span> * * * *  每一分钟来一次</span><br></pre></td></tr></table></figure><ul><li><p>​     。&#x2F; 注意 前面有空格</p></li><li><p>任务调度</p><ul><li><p>现在.sh 文件中写脚本</p></li><li><p>注意给目标用户执行权限 没有权限的话会执行失败的</p></li><li><p>crontable -e 写时间表达式 </p><p>corntab -r 终止任务调度</p><p>crontab -l 列出当前有哪些任务调度</p><p>service crond restart 重启任务</p></li></ul></li><li><p>at定时任务</p><ul><li>基本介绍<ol><li>at命令是一次性定时计划任务，at的守护进程atd会以后台模式运行，检查作业队列来运行</li><li>默认情况下，atd守护进程的每60s检查工作队列，有作业时，会检查作业的运行时间，如果时间与当前时间匹配，者作业运行</li><li>at命令是一次性定时计划任务，执行完一个任务后就不再执行该任务了</li><li>在使用at命令的时候，一定要保证atd进程的启动，可以使用相关的指令来查看</li></ol></li><li>at命令格式<ul><li>at 【选项】 时间</li><li>ctrl+D 结束at的命令输入 2次</li><li>ps -ef 打印所有的进程 ps -ef | grep atd 过滤<br>   1Sun Jun 19 17:00:00 2022 a root<br>2Sun Jun 19 17:00:00 2022 a root<br>  [root@192 home]# atrm 1  演示删除1号atd<br>  [root@192 home]# atq<br>2Sun Jun 19 17:00:00 2022 a root</li></ul></li></ul></li></ul><h2 id="Linux-磁盘分区-管理"><a href="#Linux-磁盘分区-管理" class="headerlink" title="Linux 磁盘分区 管理"></a>Linux 磁盘分区 管理</h2><ul><li>Linux来说无论分几个分区，分给哪一个目录用，它归根结底只有一个根目录，一个独立的唯一的文件结构，Linux中每一个分区都是用来组成整个文件系统的一部风</li><li>Linux采用了一种叫做载入的处理方案，他的整个文件系统中包含了一套文件和目录，并且一个分区和一个目录联系起来。这时要载入的一个分区将使它的存储空间在一个目录下获得</li><li>lsblk 查看分区的情况</li><li>分区命令 fdisk &#x2F;dev&#x2F;sdb  dev表示设备 device<ul><li>开始对&#x2F;sdb分区<ul><li>m显示命令列表</li><li>p显示磁盘分区 同 fdisk -l</li><li>n 新增分区</li><li>d 删除分区</li><li>w 写入并退出</li></ul></li><li>说明：开始分区输入n，新增分区p，分区类型为主分区。两次回车默认剩余全部空间。最后输入w写入分区并退出，若不保存退出输入q。</li><li>mkfs -t ext4 &#x2F;dev&#x2F;sdb1       格式化磁盘</li><li>挂载：<ul><li>mount &#x2F;dev&#x2F;sdb1 &#x2F;newdisk 挂载分区</li><li>umount &#x2F;dev&#x2F;sdb1 卸载分区</li><li>这种挂载 在reboot只会会失效 需要重新挂载</li></ul></li><li>如何自动挂载 永久挂载呢？<ul><li>通过修改&#x2F;etc&#x2F;fstab 实现挂载</li><li>添加完成后执行mount -a 立即生效</li><li>du -nac –max -depth&#x3D;1 &#x2F;opt</li></ul></li></ul></li></ul><h2 id="Linux中网络管理"><a href="#Linux中网络管理" class="headerlink" title="Linux中网络管理"></a>Linux中网络管理</h2><ul><li>找到网络管理的文件</li><li>[root@192 etc]# cd sysconfig</li><li>[root@192 sysconfig]# cd network-scripts&#x2F;</li><li>[root@192 network-scripts]# vim ifcfg-ens33 </li><li>第一种方式<ul><li>说明：登陆后，通过界面来设置主动获取IP 特点：Linux启动后会主动获取IP 缺点是每次自动获取的IP地址可能不一样</li></ul></li><li>设置主机名和hosts映射<ol><li>为了方便记忆，可以给Linux系统设置一个主机名，也可以根据需要修改主机名</li><li>指令hostname：查看主机名</li><li>修改文件在&#x2F;etc&#x2F;hostname指定</li><li>修改后，重启生效</li></ol></li></ul><h2 id="Linux的进程管理"><a href="#Linux的进程管理" class="headerlink" title="Linux的进程管理"></a>Linux的进程管理</h2><ul><li>基本介绍<ul><li>ps命令是用来查看目前系统中，有哪些正在执行，以及它们执行的状态。可以不加任何参数</li><li>PID 进程表示符</li><li>TTY 终端记号</li><li>TIME 此进程所消耗CPU时间</li><li>CMD 正在执行的命令或者进程名</li><li>ps -a：显示终端的所有进程信息</li><li>ps -u： 以用户的格式显示进程的信息</li><li>ps -x 显示后台进程的运行参数</li><li>ps -aux | grep sshd</li><li>R-运行 D-短期等待 Z-僵死进程</li><li>VSZ 虚拟内存占用</li><li>RSS 物理内存占用</li></ul></li><li>应用实例<ul><li>以全格式显示当前所有的进程，查看进程的父进程<ul><li>ps -ef 是以全格式显示当前所有的进程</li><li>-e 显示所有进程 -f 全格式</li><li>ps -ef | grep xxx</li></ul></li></ul></li></ul><p>user       PID     FPID</p><p>root       1235      1  0 10:09 ?        00:00:00 &#x2F;usr&#x2F;sbin&#x2F;sshd -D<br>root       1682   1235  0 10:09 ?        00:00:00 sshd: root@pts&#x2F;0<br>root       3156   2973  0 10:16 pts&#x2F;0    00:00:00 grep –color&#x3D;auto sshd</p><ul><li><p>终止进程</p><ul><li>若是某个进程执行一半需要停止，或是已经消耗了大量系统资源时，需要考虑停止进程。使用kill命令来完成此项任务</li></ul></li><li><p>基本语法</p><ul><li>kill 选项 进程号 通过进程号杀死进程</li><li>killall 进程名称 通过进程名称杀死进程，也支持通配符，这在系统因为负载过大而变得很慢时很有用</li></ul></li><li><p>常用选项</p><ul><li>-9：表示强制终止进程</li></ul></li><li><p>最佳实践：</p><ul><li><p>踢掉某一个非法的登录用户</p><ul><li><p>[root@seaOcean ~]# ps -aux | grep sshd<br>root       1235  0.0  0.2 112900  4312 ?        Ss   10:09   0:00 &#x2F;usr&#x2F;sbin&#x2F;sshd -D<br>root       1682  0.0  0.2 158856  5560 ?        Ss   10:09   0:00 sshd: root@pts&#x2F;0</p><h4 id="root-3674-0-3-0-2-158856-5496-Ss-10-25-0-00-sshd-monkeyone-priv"><a href="#root-3674-0-3-0-2-158856-5496-Ss-10-25-0-00-sshd-monkeyone-priv" class="headerlink" title="root       3674  0.3  0.2 158856  5496 ?        Ss   10:25   0:00 sshd: monkeyone [priv]"></a>root       3674  0.3  0.2 158856  5496 ?        Ss   10:25   0:00 sshd: monkeyone [priv]</h4><p>monkeyo+   3683  0.0  0.1 158856  2504 ?        S    10:25   0:00 sshd: monkeyone@pts&#x2F;1<br>root       3770  0.0  0.0 112828   976 pts&#x2F;0    S+   10:26   0:00 grep –color&#x3D;auto sshd</p><h3 id="root-seaOcean-kill-3674"><a href="#root-seaOcean-kill-3674" class="headerlink" title="[root@seaOcean ~]# kill 3674"></a>[root@seaOcean ~]# kill 3674</h3></li></ul></li><li><p>终止远程登录</p><ul><li>[root@seaOcean ~]# ps -aux | grep sshd<br>root       1235  0.0  0.2 112900  4312 ?        Ss   10:09   0:00 &#x2F;usr&#x2F;sbin&#x2F;sshd -D<br>root       1682  0.0  0.2 158856  5560 ?        Ss   10:09   0:00 sshd: root@pts&#x2F;0<br>root       3674  0.3  0.2 158856  5496 ?        Ss   10:25   0:00 sshd: monkeyone [priv]<br>monkeyo+   3683  0.0  0.1 158856  2504 ?        S    10:25   0:00 sshd: monkeyone@pts&#x2F;1<br>root       3770  0.0  0.0 112828   976 pts&#x2F;0    S+   10:26   0:00 grep –color&#x3D;auto sshd<br>[root@seaOcean ~]# kill 3674<br>[root@seaOcean ~]# kill 1235<br>[root@seaOcean ~]# ps -aux | grep sshd<br>root       1682  0.0  0.2 158856  5560 ?        Ss   10:09   0:00 sshd: root@pts&#x2F;0<br>root       3847  0.0  0.0 112828   972 pts&#x2F;0    S+   10:30   0:00 grep –color&#x3D;auto sshd</li></ul></li><li><p>如何重启sshd服务？</p><ul><li>[root@seaOcean ~]# &#x2F;bin&#x2F;systemctl start sshd.service<br>[root@seaOcean ~]# ps -aux | grep sshd<br>root       1682  0.0  0.2 158856  5560 ?        Ss   10:09   0:00 sshd: root@pts&#x2F;0<br>root       3871  0.1  0.2 112900  4316 ?        Ss   10:32   0:00 &#x2F;usr&#x2F;sbin&#x2F;sshd -D<br>root       3881  0.0  0.0 112828   976 pts&#x2F;0    S+   10:33   0:00 grep –color&#x3D;auto sshd</li></ul></li><li><p>终止多个gedit，演示killall</p><ul><li>killall gedit</li></ul></li><li><p>强制杀掉一个终端：</p><ul><li>kill -9 xxxx： 强制杀死xxxx进程</li></ul></li><li><p>查看进程树</p><ul><li>pstree 选项 可以直观的查看进程的信息</li><li>pstree -p 给进程号</li><li>pstree -u 显示进程的拥有者</li></ul></li><li><p>service管理</p><ul><li>service本质就是进程，但是时运行在后台的，通常会监听某个端口，等待其他程序的请求，比如(mysql,sshd防火墙等)因此我们又称守护进程，是Linux中非常重要的知识点</li></ul></li><li><p>top 动态监控</p><ul><li>top与ps命令相似，都是用来监控进程的，Top会自动更新而已</li><li>基本语法<ul><li>top 选项<ul><li>-d 秒数指定top命令每隔几秒更新。默认是3秒</li><li>-i 使top不显示任何闲置或者僵死进程</li><li>-p 通过指定监控进程ID来仅仅监控某个进程的状态</li></ul></li><li>动态监控的交互操作<ul><li>P 以CPu的使用率来排序</li><li>M 以内存的使用了排序</li><li>N 以进程号排序</li><li>q 退出</li></ul></li></ul></li></ul></li><li><p>查看系统网络状况：</p><ul><li>基本语法<ul><li>netstat 【选项】</li></ul></li><li>选项说明<ul><li>-an 按照一定的顺序排列输出</li><li>-p 显示哪一个进程在调用</li></ul></li><li>rpm包的管理<ul><li>rpm包名的基本格式</li><li>rpm包的其他查询指令<ul><li>rpm -qa：查询所安装的所有rpm软件包</li><li>rpm -qa | more</li><li>rpm -qa | grep xxxx  query all</li><li>rpm -q 软件包名 ： 查询软件是否安装</li><li>rpm -q firefox   query</li><li>rpm -qi 软件包名 ： 查询软件包信息    query information</li><li>rpm -ql 软件包名 查询软件包中的文件 </li><li>rpm -qf 文件全路径名  查询文件所属的软件包 query</li></ul></li></ul></li><li>什么是rpm？<br>百度百科：RPM是Red-Hat Package Manager（RPM软件包管理器）的缩写，这一文件格式名称虽然打上了RedHat的标志，但是其原始设计理念是开放式的，现在包括OpenLinux、S.u.S.E.以及Turbo Linux等Linux的分发版本都有采用，可以算是公认的行业标准了。一种用于互联网下载包的打包及安装工具，它包含在某些Linux分发版中。它生成具有.RPM扩展名的文件。与Dpkg类似。<br>简而言之，就是linux中的软件包。</li><li>软件包管理 resource package manager</li></ul></li><li><p>卸载rpm包</p><ul><li><p>基本语法：</p><ul><li>rpm -e rpm包的名称 </li><li>会有警告但是还是会被删除</li></ul></li></ul></li><li><p>安装rpm包</p><ul><li>基本语法<ul><li>rpm -ivh rpm包全路径名称</li><li>参数说明：<ul><li>i&#x3D;install</li><li>v&#x3D;verbose 提示</li><li>h&#x3D;hash 进度条</li></ul></li></ul></li></ul></li><li><p>yum</p><ul><li>yun是一个shell前端软件包管理器。基于RPM包管理，能够从指定的服务器中自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有的软件包</li></ul></li><li><p>yum的基本指令</p><ul><li><p>yum list | grep xx 软件列表</p></li><li><p>安装指定的yum包</p><p>[root@seaOcean ~]# yum list | grep firefox<br>firefox.i686                              91.10.0-1.el7.centos         updates<br>firefox.x86_64                            91.10.0-1.el7.centos         updates  </p></li><li><p>yum install xxx 下载安装</p></li></ul></li><li><p>使用yum安装firefox</p></li></ul></li></ul></li></ul><p>​    </p><h1 id="Linux之JavaEE定制篇"><a href="#Linux之JavaEE定制篇" class="headerlink" title="Linux之JavaEE定制篇"></a>Linux之JavaEE定制篇</h1><h2 id="搭建JavaEE环境"><a href="#搭建JavaEE环境" class="headerlink" title="搭建JavaEE环境"></a>搭建JavaEE环境</h2><ul><li><p>如果需要在Linux下进行JavaEE的开发，我们需要安装如下的软件</p></li><li><p>安装JDK</p><ol><li>mkdir &#x2F;opt&#x2F;jdk</li><li>通过xftp6上传到&#x2F;opt&#x2F;jdk下.</li><li>cd &#x2F;opt&#x2F;jdk</li><li>解压 tar -zxvf jdk-8u261-linux-x64.tar.gz</li><li>mkdir &#x2F;usr&#x2F;local&#x2F;java</li><li>mv &#x2F;opt&#x2F;jdk&#x2F;jdk-8u261 &#x2F;usr&#x2F;local&#x2F;java</li><li>配置环境变量的配置文件vim &#x2F;etc&#x2F;profile</li><li>export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;java&#x2F;jdk1.8.0_261</li><li><code>export PATH=$JAVA_HOME/bin:$PATH</code></li><li>source &#x2F;etc&#x2F;profile </li><li>测试安装成功</li></ol></li><li><p>安装tomcat</p><ol><li>上传安装文件，并解压到&#x2F;opt&#x2F;tomcat</li><li>进入解压目录&#x2F;bin，启动tomcat  .&#x2F;startup.sh</li><li>开放端口 8080</li><li>firewall -cmd –permanent add-port&#x3D;8080&#x2F;tcp</li><li>firewall -cmd –reload</li></ol><p>测试：在Linux下访问<a href="http://linuxip:8080/">http://linuxip:8080</a></p></li><li><p>idea2020的安装</p></li><li><p>步骤：</p></li></ul><ol><li>下载地址：idea官网 注意不要下载windows版本的</li><li>解压缩到&#x2F;opt&#x2F;idea</li><li>启动idea bin目录下 .&#x2F;idea.sh 配置jdk</li><li>编写Hello world程序执行测试</li></ol><ul><li><p>mysql的安装</p><ol><li><p>新建文件夹&#x2F;opt&#x2F;mysql 并cd进去</p></li><li><p>运行wget <a href="http://dev.mysql.com/get/mysql-5.7.26">http://dev.mysql.com/get/mysql-5.7.26</a>             下载安装包</p><p>ps：centOS7.6自带mysql数据库是mariadb，会和mysql冲突，要先删除</p></li><li><p>运行 tar -vxf mysqlxxxx</p></li><li><p>运行 rpm -qa|grep mari 查询mariadb相关安装包</p></li><li><p>运行rpm  -e –nodeps mariadb-libs 卸载</p></li><li><p>然后开始真正的安装mysql 依次运行一下几条</p></li></ol><p><a href="https://blog.csdn.net/p445098355/article/details/124338426">https://blog.csdn.net/p445098355/article/details/124338426</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Linux简介：一种操作系统用于管理计算机资源的系统软件Linux注重安全性和稳定性，高并发处理能力，没有优异的可视化界面&lt;br&gt;Linux主要发行版本：Ubuntu(乌班图),Redhat(红帽),CentOS&lt;/p&gt;
&lt;h2 id=&quot;安装Linux操作系统&quot;&gt;&lt;a hr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Mybatis-Plus</title>
    <link href="http://example.com/2024/05/22/Mybatis-Plus/"/>
    <id>http://example.com/2024/05/22/Mybatis-Plus/</id>
    <published>2024-05-22T08:33:06.000Z</published>
    <updated>2024-05-22T08:33:06.801Z</updated>
    
    <content type="html"><![CDATA[<ul><li>在java中访问数据库，使用jdbc</li></ul><ol><li>在项目中直接使用jdbc 访问数据库 创建connection resultSet</li><li>把jdbc的操作进行封装。创建了很多工具类，比如DBUtil</li><li>持久化的框架<ol><li>hibernate： 全自动的ORM框架。实现java object –表的映射。可以通过java对象的方法，操作表中的数据。开发人员可以不了解或者少了解sql语句<br>可以使用hibernate访问不同的数据库，不需要改变代码。通过不同的数据库。</li><li>jpa规范，定义了访问数据库的各种操作。定义了一致的方法操作数据库<br>jpa有各种实现：hibernate open-jpa link</li><li>mybatis： 需要编写xml配置文件，在xml文件中编写sql语句，访问数据库。任何的操作都需要使用xml文件。对开发人员要求较高，需要熟悉sql语言。<br>单表的CRUD也需要使用xml来编写sql语句</li><li>mybatis-plus： 简称MP 他是对mybatis的增强。 在mybatis之外加入了一层，通过mybatis puls实现单表的CRUD，不使用xml文件。分页，性能统计，逻辑删除等等</li></ol></li></ol><h1 id="什么是Mybatis-plus"><a href="#什么是Mybatis-plus" class="headerlink" title="什么是Mybatis-plus"></a>什么是Mybatis-plus</h1><ul><li>无侵入：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li>损耗小：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li>强大的 CRUD 操作：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li>支持 Lambda 形式调用：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li>支持主键自动生成：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li>支持 ActiveRecord 模式：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li>支持自定义全局通用操作：支持全局通用方法注入（ Write once, use anywhere ）</li><li>内置代码生成器：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li>内置分页插件：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li>分页插件支持多种数据库：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li>内置性能分析插件：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li>内置全局拦截插件：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;在java中访问数据库，使用jdbc&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;在项目中直接使用jdbc 访问数据库 创建connection resultSet&lt;/li&gt;
&lt;li&gt;把jdbc的操作进行封装。创建了很多工具类，比如DBUtil&lt;/li&gt;
&lt;li&gt;持</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Mybatis</title>
    <link href="http://example.com/2024/05/22/Mybatis/"/>
    <id>http://example.com/2024/05/22/Mybatis/</id>
    <published>2024-05-22T08:33:06.000Z</published>
    <updated>2024-05-22T08:33:06.802Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-三层架构"><a href="#1-三层架构" class="headerlink" title="1 三层架构"></a>1 三层架构</h1><ol><li>界面层</li><li>业务逻辑层</li><li>数据访问层</li></ol><ul><li>常用的框架SSM<ul><li>spring：核心是IOC和AOP 跨领域提供了好的解决方案</li><li>springMVBC：专门用来优化控制器的，提供了既简单的数据提交，数据携带，页面跳转的功能</li><li>Mybatis：是一个持久层的框架，用来进行数据库访问的优化，专注于sql语句，极大的优化了JDBC的访问。</li></ul></li></ul><h1 id="2-框架"><a href="#2-框架" class="headerlink" title="2 框架"></a>2 框架</h1><ul><li>JDBC优化的框架，</li><li>什么是框架(MyBatis)<ul><li>MyBatis是一个半成品，将重复的功能解决掉，帮助程序快速高效的进行开发，他是可复用的，可扩展的。前身叫iBatis 是APache开发的</li><li>简化了JDBC的访问</li></ul></li><li>添加框架的步骤<ul><li>添加依赖</li><li>添加配置文件</li></ul></li></ul><h2 id="2-1-MyBatis"><a href="#2-1-MyBatis" class="headerlink" title="2.1 MyBatis"></a>2.1 MyBatis</h2><h3 id="2-1-1-mybatis查询操作"><a href="#2-1-1-mybatis查询操作" class="headerlink" title="2.1.1  mybatis查询操作"></a>2.1.1  mybatis查询操作</h3><ol><li><p>新建一个students表格</p></li><li><p>加入maven的mybatis坐标，mysql驱动的坐标</p></li><li><p>创建实体类，students–保存在表中的一行数据</p></li><li><p>创建持久层的dao接口</p></li><li><p>创建一个mybatis配置文件</p><p>叫做sql映射文件：写sql语句。一般一个表一个隐射文件</p><p>则个文件是xml文件 </p><p>需要特别注意的是：文件写在接口所在的目录中 文件的名称要和接口保持一致</p><ul><li>接口的模式 实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sea.case_1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sea.domain_case_1.Students;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口操作students表</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentsDao</span>&#123;</span><br><span class="line">    <span class="comment">//查询students表单所有的数据</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Students&gt; <span class="title function_">selectStudents</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//students标识要插入的数据 返回的是受影响的行数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addStudents</span><span class="params">(Students students)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>sql的配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.sea.case_1.StudentsDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sea.domain_case_1.Students&quot;</span>&gt;</span></span><br><span class="line">        select stdtno,name,email from students order by stdtno;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--resulType:表示结构类型的，是sql语句执行后得到resultSet，遍历这个ResultSet得到的对象类型 需要写的是类型的全限定名称--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--id表示你要执行的sql语句的唯一表示 你的mybatis会使用设个id之找到要执行的sql语句</span></span><br><span class="line"><span class="comment">            可以自定义，但是要求你使用接口中的方法名称--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">sql映射文件：写sql语句，mybatis会执行执行sql</span></span><br><span class="line"><span class="comment">    1. 指定约束文件</span></span><br><span class="line"><span class="comment">    &lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="comment">        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line"><span class="comment">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    mybatis-3-mapper.dtd是约束文件的名称，扩展名是dtd的。</span></span><br><span class="line"><span class="comment">    2. 约束文件的作用：限制和检查当前文件中出现的标签，属性必须符合mybatis要求</span></span><br><span class="line"><span class="comment">    &lt;mapper namespace=&quot;org.mybatis.example.BlogMapper&quot;&gt;</span></span><br><span class="line"><span class="comment">    &lt;select id=&quot;selectBlog&quot; resultType=&quot;Blog&quot;&gt;</span></span><br><span class="line"><span class="comment">        select * from Students where stdtno = #&#123;id&#125;</span></span><br><span class="line"><span class="comment">    &lt;/select&gt;</span></span><br><span class="line"><span class="comment">    &lt;/mapper&gt;</span></span><br><span class="line"><span class="comment">    3.mapper 他是当前文件的根标签</span></span><br><span class="line"><span class="comment">    namespace 命名空间 是唯一值 可以是自定义的字符串 要求使用dao的全限定名称</span></span><br><span class="line"><span class="comment">    4.在当前文件中，可以使用特定的标签，表示数据库的特定操作。</span></span><br><span class="line"><span class="comment">        &lt;select&gt;：表示执行查询操作</span></span><br><span class="line"><span class="comment">        &lt;update&gt;:表示执行更新操作 就是说执行的是update的sql语句</span></span><br><span class="line"><span class="comment">        &lt;insert&gt;:查入</span></span><br><span class="line"><span class="comment">        &lt;delete&gt;:删除</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建mybatis的主配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库环境的配置</span></span><br><span class="line"><span class="comment">            id：唯一值表示环境的名称</span></span><br><span class="line"><span class="comment">            default:必须和某个environment的id值一样</span></span><br><span class="line"><span class="comment">            告诉你的mybatis使用那个连接信息 也即是用哪一个数据库</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--transactionManager 事务的类型</span></span><br><span class="line"><span class="comment">            其中type的值有两种：</span></span><br><span class="line"><span class="comment">                1.JDBC（表示使用JBDC中的对象进行事务处理）--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--dataSource 表示数据员 type是数据源的类型 pooled表示连接池--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3066/mybase?serverTimezone=GMT&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;why123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/example/BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第一眼 感觉是连接数据库</span></span><br><span class="line"><span class="comment">    mybatis的主配置文件：主要定义了数据库的配置信息，sql映射文件的位置。</span></span><br><span class="line"><span class="comment">    1约束文件的说明：</span></span><br><span class="line"><span class="comment">    &lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="comment">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="line"><span class="comment">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span></span><br><span class="line"><span class="comment">        dtd/mybatis-3-config.dtd是约束文件的名称 是固定值</span></span><br><span class="line"><span class="comment">    2configuration 跟标签 表示各种配置信息</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br></pre></td></tr></table></figure><p>一个项目就一个主配置文件</p><p>主配置文件提供了数据库的连接信息和sql隐射文件的位置信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在pom文件中的build标签中加上上面的语句可以编译非resource目录中的xml和properties文件</li></ul></li><li><p>创建使用mybatis的类</p><p>提供mybatis访问数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sea;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sea.domain_case_1.Students;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myapp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//访问mybatis读取students数据</span></span><br><span class="line">        <span class="comment">//1.定义mybatis主配置文件的名称:从类路径的根开始</span></span><br><span class="line">        String config=<span class="string">&quot;MyBatisX.xml&quot;</span>;</span><br><span class="line">        <span class="comment">//读取config表示的文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Resources.getResourceAsStream(config);</span><br><span class="line">        <span class="comment">//3.创建sqlSessionFactoryBuilder对象</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="comment">//4.创建sqlSessionFactory对象</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> builder.build(in);</span><br><span class="line">        <span class="comment">//5.【重要】获取sqlSession对象，从sqlSessionFactory中获取sqlSession</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line">        <span class="comment">//6.【重要】指定要执行的sql语句的标识。 使用的sql映射文件的namespace+&quot;.&quot;+标签的id</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">SqlId</span> <span class="operator">=</span> <span class="string">&quot;com.sea.case_1.StudentsDao.selectStudents&quot;</span>;</span><br><span class="line">        <span class="comment">//7.执行sql语句 提供sqlId找到语句</span></span><br><span class="line">        List&lt;Students&gt; studentsList = sqlSession.selectList(SqlId);</span><br><span class="line">        <span class="comment">//8 输出结果</span></span><br><span class="line">        <span class="keyword">for</span> (Students stdt: studentsList)&#123;</span><br><span class="line">            System.out.println(stdt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//9.关闭sqlSession</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConclusion</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Test</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;MyBatisX.xml&quot;</span>); <span class="comment">//导入全局配置文件</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();<span class="comment">//创建一个构造</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">build</span> <span class="operator">=</span> builder.build(is);<span class="comment">//使用构造和流创建一个session工厂类</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> build.openSession();<span class="comment">//使用session工程类打开session</span></span><br><span class="line">        List&lt;Students&gt; list = session.selectList(<span class="string">&quot;com.sea.case_1.StudentsDao.selectStudents&quot;</span>); <span class="comment">//写sql语句的文件地址 执行后会返回结果</span></span><br><span class="line">        session.close(); <span class="comment">//关闭session</span></span><br><span class="line">        <span class="comment">//遍历得到的容器</span></span><br><span class="line">        <span class="keyword">for</span> (Students stdt:</span><br><span class="line">             list) &#123;</span><br><span class="line">            System.out.println(stdt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>需要注意的是mysql的端口号是3306；</p><h3 id="2-1-1-mybatis的insert操作"><a href="#2-1-1-mybatis的insert操作" class="headerlink" title="2.1.1  mybatis的insert操作"></a>2.1.1  mybatis的insert操作</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addStudents&quot;</span>&gt;</span></span><br><span class="line">    insert into students(stdtno,name,email) value(#&#123;stdtno&#125;,#&#123;name&#125;,#&#123;email&#125;); //&#123;&#125;里面填写的是类内属性的名称</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sea;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sea.domain_case_1.Students;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConclusion</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;MyBatisX.xml&quot;</span>); <span class="comment">//导入全局配置文件</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();<span class="comment">//创建一个构造</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">build</span> <span class="operator">=</span> builder.build(is);<span class="comment">//使用构造和流创建一个session工厂类</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> build.openSession();<span class="comment">//使用session工程类打开session</span></span><br><span class="line">        List&lt;Students&gt; list = session.selectList(<span class="string">&quot;com.sea.case_1.StudentsDao.selectStudents&quot;</span>); <span class="comment">//写sql语句的文件地址 执行后会返回结果</span></span><br><span class="line">        session.close(); <span class="comment">//关闭session</span></span><br><span class="line">        <span class="comment">//遍历得到的容器</span></span><br><span class="line">        <span class="keyword">for</span> (Students stdt:</span><br><span class="line">             list) &#123;</span><br><span class="line">            System.out.println(stdt);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Students</span> <span class="variable">stdt15</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Students</span>(<span class="number">15</span>, <span class="string">&quot;姜维&quot;</span>, <span class="string">&quot;jiangwei@gmail.com&quot;</span>);</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;MyBatisX.xml&quot;</span>); <span class="comment">//导入全局配置文件</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();<span class="comment">//创建一个构造</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">build</span> <span class="operator">=</span> builder.build(is);<span class="comment">//使用构造和流创建一个session工厂类</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> build.openSession();<span class="comment">//使用session工程类打开session</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">insert</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//写sql语句的文件地址 执行后会返回结果</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            insert = session.insert(<span class="string">&quot;com.sea.case_1.StudentsDao.addStudents&quot;</span>,stdt15);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(insert == <span class="number">1</span>) &#123;</span><br><span class="line">                session.commit();</span><br><span class="line">                System.out.println(<span class="string">&quot;affect row number &quot;</span>+insert);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;insert false&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Students&gt; list = session.selectList(<span class="string">&quot;com.sea.case_1.StudentsDao.selectStudents&quot;</span>);</span><br><span class="line">        <span class="comment">//遍历得到的容器</span></span><br><span class="line"></span><br><span class="line">        session.close();</span><br><span class="line">        <span class="keyword">for</span> (Students stdt:</span><br><span class="line">                list) &#123;</span><br><span class="line">            System.out.println(stdt);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-打开日志"><a href="#2-2-3-打开日志" class="headerlink" title="2.2.3 打开日志"></a>2.2.3 打开日志</h3><p>实际上mybatis文档里面是直接提供了的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--setting :控制mybatis全局行为--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置，ybatis输出日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3-主要的类的介绍"><a href="#3-主要的类的介绍" class="headerlink" title="3 主要的类的介绍"></a>3 主要的类的介绍</h1><h2 id="3-1主要类的介绍"><a href="#3-1主要类的介绍" class="headerlink" title="3.1主要类的介绍"></a>3.1主要类的介绍</h2><ol><li><p>Resources：mybatis中的一个类。负责读取主配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;MyBatisX.xml&quot;</span>); <span class="comment">//导入全局配置文件</span></span><br></pre></td></tr></table></figure><ol start="2"><li>SqlSessionFactoryBuilder:创建SqlSessionFactory对象 使用主配置转化的流来创建</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">build</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(is);</span><br></pre></td></tr></table></figure><ol start="3"><li>SqlSessionFactory：重量级对象，程序创建一个对象耗时比较长，使用资源比较多</li></ol><p>整个项目有一个就好</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">build</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(is);</span><br><span class="line"><span class="comment">//方法说明</span></span><br><span class="line">build.openSession(); <span class="comment">//无参数的，获取是自动提交事务的sqlSession对象</span></span><br><span class="line">build.openSession(<span class="type">boolean</span>);<span class="comment">// 如果是true的话获取的是非自动提交事务的对象 如果是false的话获取的是自动提交事务。</span></span><br></pre></td></tr></table></figure><p>用于获取SqlSession对象</p><ol start="4"><li>sqlsession:</li></ol><ul><li><p>接口：定义了操作数据的方法：例如 selectOne(),selectList(),insert(),update(),delete(),commit(),rollback()</p></li><li><p>sqlSession接口的实现类DefualtSqlSession</p></li><li><p>使用要求：sqlsession不是线程安全的，需要在方法的内部执行，在执行sql语句之情，使用opensession()获取sqlsession对象</p><p>在执行完sql语句后，需要关闭它，执行sqlsession.close() 这样才能保证线程是安全的。</p></li><li><p>工具类</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sea.domain_case_1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SqlSessionFactory</span> <span class="variable">build</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">Stream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;MyBatisX.xml&quot;</span>);</span><br><span class="line">            <span class="comment">//创建sqlsessionfactory对象，使用SqlSessionFactoryBuild</span></span><br><span class="line">            build = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(Stream);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">SqlSession</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> build.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-2-传统的DAO操作方式："><a href="#3-2-传统的DAO操作方式：" class="headerlink" title="3.2 传统的DAO操作方式："></a>3.2 传统的DAO操作方式：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.DAO.Impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.DAO.StudentsDAO;</span><br><span class="line"><span class="keyword">import</span> com.sea.Students;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentsDAOImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentsDAO</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Students&gt; <span class="title function_">selectStudents</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取sqlSession对象</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlsession</span> <span class="operator">=</span> MyUtil.SqlSession();</span><br><span class="line">        List&lt;Students&gt; studentsList = sqlsession.selectList(<span class="string">&quot;com.DAO.StudentsDAO.selectStudents&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Students stdt:</span><br><span class="line">                studentsList</span><br><span class="line">             ) &#123;</span><br><span class="line">            System.out.println(stdt);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlsession.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> studentsList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insertStudent</span><span class="params">(Students stu)</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlsession</span> <span class="operator">=</span> MyUtil.SqlSession();</span><br><span class="line">        <span class="type">Students</span> <span class="variable">students</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Students</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> sqlsession.insert(<span class="string">&quot;com.DAO.StudentsDAO.insertStudent&quot;</span>,stu);</span><br><span class="line">        sqlsession.commit();</span><br><span class="line">        sqlsession.close();</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>mybatis的动态代理：mybatis根据dao的方法调用，获取执行sql语句的信息<ul><li>mybatis根据你的接口，创建一个dao接口的实现类，并且创建这个类的对象。 用反射获取接口类的全路径名和方法名  配置namespace和id 即实现类不需要再创建了。</li><li>完成sqlsession调用方法，访问数据库。</li><li>session.getMapper(studentsDao.class);</li></ul></li></ul><ol><li><p>动态代理：使用SqlSession.getMapper(DAO接口.class)获取这个DAO接口的对象</p></li><li><p>传入参数：从java代码中把数据传入到mapper的sql语句中。</p></li><li><p>parameterType：是写在mapper文件中的一个属性 表示dao接口中的方法的参数数据类型</p><p>例如：StudentsDAO接口</p><p>public Students selectStudents(String id)</p><ul><li><p>需要注意的是parameter()是不必要的 不写mybatis也可以通过反射机制知道这个参数</p></li><li><p>传入一个简单参数：</p></li><li><pre><code class="java">/* 传一个简单类型的参数：*   简单类型：mybatis把java中的基本数据类型和String都叫做简单数据类型** 在mapper中要获取简单类型的一个参数使用#&#123;任意字符&#125;;*    List&lt;Students&gt; selectStudents(Integer stdtno);*         select stdtno,name,email from students where stdtno=#&#123;Studentsid&#125;;* 使用#&#123;&#125;之后，mybatis执行sql是使用的jdbc中的preparestatement对象* 由mybatis执行下面的代码：* #&#123;&#125;可以防止sql注入 比较安全*/<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">4. ## 如何传入多个参数？</span><br><span class="line"></span><br><span class="line">   1. ### 多个参数，使用@param命名参数</span><br><span class="line"></span><br><span class="line">      + 接口 public List&lt;Studuents&gt; selectMulitParam(@param(&quot;myname&quot;) String name,@param(&quot;myage&quot;) Integer age);</span><br><span class="line"></span><br><span class="line">      + 使用@param(&quot;参数名&quot;) 命名参数</span><br><span class="line"></span><br><span class="line">      + ```xml</span><br><span class="line">        &lt;select&gt;</span><br><span class="line">        select * from students where name=#&#123;myname,javaType=string,jdbcType=VARCHAR&#125; or age=#&#123;myage&#125;;</span><br><span class="line">        &lt;/select&gt;</span><br></pre></td></tr></table></figure> + ### 使用对象传参   + 创建一个类保存需要查询的信息 在mapper中使用     + 使用对象的属性值作为参数的语法标准       + 使用对象的语法：#&#123;属性名,javaType=类型名称，jdbcType=数据类型&#125; 最完整的语法格式 很少用         + 常常只写属性名</code></pre></li></ul></li></ol><ul><li>java类的别名全是小写 string int integer  </li><li>database类的别名都是大写的 VARCHAR INT CLOB</li><li>总结：#{}是用来匹配参数的</li></ul><h1 id="4-mybatis"><a href="#4-mybatis" class="headerlink" title="4 mybatis"></a>4 mybatis</h1><h2 id="4-1-ResultType"><a href="#4-1-ResultType" class="headerlink" title="4.1 ResultType"></a>4.1 ResultType</h2><ul><li><h3 id="（1）ResultType：mybatis的输出结果类型，指sql语句执行完之后，数据转化为的java对象。java类型是任意的。"><a href="#（1）ResultType：mybatis的输出结果类型，指sql语句执行完之后，数据转化为的java对象。java类型是任意的。" class="headerlink" title="（1）ResultType：mybatis的输出结果类型，指sql语句执行完之后，数据转化为的java对象。java类型是任意的。"></a>（1）ResultType：mybatis的输出结果类型，指sql语句执行完之后，数据转化为的java对象。java类型是任意的。</h3></li><li><p>ResultType： 1. 结果类型的全限定名称  2. 类的别名</p></li><li><p>处理的方式：</p><ol><li><p>mybatis执行sql语句，然后mybatis调用类的无参构造方法，创建对象。</p></li><li><p>mybatis把ResultSet指定的列值 赋值给同名的属性。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudents&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sea.Students&quot;</span>&gt;</span></span><br><span class="line">    select stdtno,name,email from students where stdtno=#&#123;Studentsid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><p>相当于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> executeselete(<span class="string">&quot;select stdtno,name,email from students where stdtno=#&#123;Studentsid&#125;;&quot;</span>)</span><br><span class="line"><span class="keyword">while</span>(re.next())&#123;</span><br><span class="line">    <span class="type">Students</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Students</span>();</span><br><span class="line">    student.setName();</span><br><span class="line">    student.setstdtno();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-定义自定义类的别名"><a href="#4-2-定义自定义类的别名" class="headerlink" title="4.2 定义自定义类的别名"></a>4.2 定义自定义类的别名</h2><ol><li>在mybatis主配置文件中定义，使用<TypeAllas>定义别名</li><li>可以在mapper的ResultType中使用自定义的别名</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;typeAlias type=&quot;com.sea.Hero&quot; alias=&quot;hero&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.sea&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;package&gt;name是包名，这个包中的所有类，类名就是别名（类名不区分大小写） 这个好--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>返回Map<ul><li>不建议使用 使用手册说了</li></ul></li></ul><h2 id="4-3-ResultMap"><a href="#4-3-ResultMap" class="headerlink" title="4.3 ResultMap"></a>4.3 ResultMap</h2><ul><li><p>ResultMap 叫做结果映射，指定列名和java对象属性对应关系。</p><ul><li><p>你可以自定义列值赋给那个属性</p></li><li><p>当你的列名和属性不同时，一定要使用resultmap</p></li><li><pre><code class="xml">&lt;resultMap id=&quot;studentsToHeroMap&quot; type=&quot;Hero&quot;&gt;   map 映射    &lt;result column=&quot;stdtno&quot; property=&quot;Herono&quot;&gt;&lt;/result&gt;&lt;/resultMap&gt;&lt;select id=&quot;transformToHero&quot; resultType=&quot;hero&quot; resultMap=&quot;studentsToHeroMap&quot;&gt;    select name,stdtno from students;&lt;/select&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 4.4 模糊匹配</span><br><span class="line"></span><br><span class="line">### 4.4.1 method 1</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">//第一种like</span><br><span class="line">List&lt;Students&gt; NotClearSearch(String name);</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;NotClearSearch&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sea.Students&quot;</span>&gt;</span></span><br><span class="line">    select stdtno,name,email from students where name like #&#123;aimmyname&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-4-1-method-2"><a href="#4-4-1-method-2" class="headerlink" title="4.4.1 method 2"></a>4.4.1 method 2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Students&gt; <span class="title function_">NotClearSearch</span><span class="params">(String name)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;NotClearSearch&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sea.Students&quot;</span>&gt;</span></span><br><span class="line">    select stdtno,name,email from students where name like &quot;%&quot;#&#123;aimname&#125;&quot;%&quot;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-动态sql-if-where-forEach"><a href="#5-动态sql-if-where-forEach" class="headerlink" title="5 动态sql  if-where-forEach"></a>5 动态sql  if-where-forEach</h2><ul><li><p>动态sql的内容是变化的，可以根据条件获取到不同的sql语句。</p><ul><li>主要是where部分变化</li></ul></li><li><p>动态sql的实现，使用的是mybatis提供的标签，<if>,<where>,<foreach></p><ol><li><p>if 是判断条件：</p><ul><li>语法</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;判断java对象的属性值&quot;</span>&gt;</span>部分sql语句<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.DAO.StudentsDAO&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudentsId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sea.Students&quot;</span>&gt;</span></span><br><span class="line">        select name,email,stdtno from students</span><br><span class="line">        where</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name!=null and name!=&#x27;&#x27;&quot;</span>&gt;</span> 注意左边的那么是指参数的 而不是数据库列属性名</span><br><span class="line">            name=#&#123;name&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;stdtno&gt;0&quot;</span>&gt;</span></span><br><span class="line">            and stdtno&gt;#&#123;stdtno&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><ol start="2"><li><where> + 用来包含多个<if>的，当多个if有一个成立的，<where>会自动增加一个where 关键字，并去掉if中多余的and，or等</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name!=null and name!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        name=#&#123;name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;stdtno&gt;0&quot;</span>&gt;</span></span><br><span class="line">        and stdtno&gt;#&#123;stdtno&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><for-each><ul><li>循环java中的数组，list集合的。主要用在sql的in语句中。<ul><li>学生stdtno是1，2，3的三个学生</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> stdtno <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Students&gt; <span class="title function_">mutipleselect</span><span class="params">()</span>&#123;List&lt;Integer&gt; idlist&#125;</span><br><span class="line"></span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ...;</span><br><span class="line"></span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">dao.multipleselect(list)</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudentsForEach&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sea.Students&quot;</span>&gt;</span></span><br><span class="line">    select * from students where id in </span><br><span class="line">                           <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;&quot;</span> <span class="attr">item</span>=<span class="string">&quot;&quot;</span> <span class="attr">open</span>=<span class="string">&quot;&quot;</span> <span class="attr">close</span>=<span class="string">&quot;&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                               </span><br><span class="line">                           <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ul><li><p>collcation 表示接口中的方法的参数的类型，如果 是数组使用array，如果是list集合使用list</p></li><li><p>item 自定义的表示数组和集合成员的变量</p></li><li><p>open 循环开始时的字符</p></li><li><p>close 循环结束时的字符</p></li><li><p>separator 集合成员之间的分隔符</p><ul><li>参数为简单数据类型</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   foreash 使用1--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudentsForEach&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sea.Students&quot;</span>&gt;</span></span><br><span class="line">       select * from students where stdtno in</span><br><span class="line">                              <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;stdtno&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">                               #&#123;stdtno&#125;</span><br><span class="line">                              <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>参数为自定义类型 (stu)</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   foreash 使用1--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudentsForEach&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sea.Students&quot;</span>&gt;</span></span><br><span class="line">       select * from students where stdtno in</span><br><span class="line">                              <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">                               #&#123;stu.stdtno&#125;</span><br><span class="line">                              <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>sql代码片段，就是服用一些方法</p><ul><li>步骤</li><li>先定义<sql id="自定义唯一标识符" > sql语句</sql></li><li>在使用<include refid="目标id"/></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;select&quot;</span>&gt;</span></span><br><span class="line">    select name,email,stdtno from students</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudentsId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sea.Students&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;select&quot;</span>/&gt;</span></span><br><span class="line">    where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name!=null and name!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        and name=#&#123;name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;stdtno&gt;0&quot;</span>&gt;</span></span><br><span class="line">        and stdtno&gt;#&#123;stdtno&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="5-主配置文件"><a href="#5-主配置文件" class="headerlink" title="5 主配置文件"></a>5 主配置文件</h1><ul><li><p>transaction事务处理的类型：</p><ul><li>JDBC：表示mybatis底层使用的是调用jdbc中的connection对象的，commit和rollback</li><li>MANAGER：把mybatis的事务管理委托给其他容器(一个服务器软件，一个框架叫spring)</li></ul></li><li><p>dataSource:表示数据源，java体系中，规定了java.sql.DataSource接口都是数据原</p><ul><li><p>数据源表示connection对象的</p></li><li><p>type：指定数据源的类型</p><ul><li><p>POOLED：使用连接池，mybatis会创建pooleddataSource类</p></li><li><p>upooled：不使用连接池，在每次执行sql语句时，先创建连接，再执行sql，在关闭连接</p><p>​mybatis会创建一个unpooledDataSource，管理Connection对象的使用</p></li><li><p>JNDI：java命名和目录服务(Windows注册表)</p></li></ul></li></ul></li><li><p>数据库的属性配置文件：把数据库连接信息放到一个单独的文件中，和mybatis主配置文件分开</p></li><li><p>目的是便于修改，保存和处理数据库的信息</p><ul><li>在recources目录中定义一个属性配置文件，xxx.properties例如 jdbc,properties在属性配置文件中，定义数据，格式是key&#x3D;value</li><li>key一般使用多级目录的</li></ul></li></ul><h3 id="的使用"><a href="#的使用" class="headerlink" title="${}的使用"></a>${}的使用</h3><ul><li>在mybatis的主配置文件中，使用<property>指定文件的位置 property resource<ul><li>在需要使用的地方，${key}</li></ul></li></ul><h3 id="多mapper的处理方式"><a href="#多mapper的处理方式" class="headerlink" title="多mapper的处理方式"></a>多mapper的处理方式</h3><ul><li><p>第一种是在主配置文件中配置多个mapper  resource</p></li><li><p>第二种使用包名 package name</p><ul><li>name：xml文件（mapper文件）所在的包名，这个包所有的xml文件一次都能加载到mybatis内<ul><li>使用package 的要求<ol><li>mapper文件名称要和接口名称一样，区分的小写的一样</li><li>mapper文件和DAO的接口要在同一个目录中</li></ol></li></ul></li></ul></li><li><p>pagehelper数据分页的</p></li><li><p>添加依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;pagehelper&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;5.1.10&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PageHelper.startPage(<span class="number">1</span>,<span class="number">3</span>);  <span class="comment">//startPage(pageNum,pageSize)  pageNum第几页 pageSize 页面大小</span></span><br><span class="line"><span class="type">List</span> <span class="variable">StudentsList</span> <span class="operator">=</span> studentsDAO.selectStuendts();</span><br><span class="line">studentsList( stu -&gt; sysout.out.println(stu));</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-三层架构&quot;&gt;&lt;a href=&quot;#1-三层架构&quot; class=&quot;headerlink&quot; title=&quot;1 三层架构&quot;&gt;&lt;/a&gt;1 三层架构&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;界面层&lt;/li&gt;
&lt;li&gt;业务逻辑层&lt;/li&gt;
&lt;li&gt;数据访问层&lt;/li&gt;
&lt;/ol&gt;
&lt;ul</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Shell</title>
    <link href="http://example.com/2024/05/22/Shell/"/>
    <id>http://example.com/2024/05/22/Shell/</id>
    <published>2024-05-22T08:33:06.000Z</published>
    <updated>2024-05-22T08:33:06.807Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h1><ul><li><p>一些字符串的操作</p><ul><li><strong>反引号的作用就是将反引号内的Linux命令先执行，然后将执行结果赋予变量</strong>。</li></ul></li><li></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Shell&quot;&gt;&lt;a href=&quot;#Shell&quot; class=&quot;headerlink&quot; title=&quot;Shell&quot;&gt;&lt;/a&gt;Shell&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一些字符串的操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;反引号的作用就是将反引号内的Linux</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Springboot</title>
    <link href="http://example.com/2024/05/22/Springboot/"/>
    <id>http://example.com/2024/05/22/Springboot/</id>
    <published>2024-05-22T08:33:06.000Z</published>
    <updated>2024-05-22T08:33:06.809Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-springboot"><a href="#1-springboot" class="headerlink" title="1 springboot"></a>1 springboot</h2><p>tips:start.spring.io是外国的网址 相对较慢 推荐使用 国内的网址:Start.springboot.io相对较快</p><h3 id="1-1-基本注解"><a href="#1-1-基本注解" class="headerlink" title="1.1 基本注解"></a>1.1 基本注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplicationClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(MainApplicationClass.class); <span class="comment">//主配置类</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span> <span class="comment">//主配置类注解</span></span><br><span class="line"><span class="comment">//以下的注解是主配置类注解的组成部分</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span> <span class="comment">//主配置类也在容器中</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAutoConfiguration</span> <span class="comment">//启动制动配置，把java对象配置好，注入到容器中。</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span> <span class="comment">//一个扫描器 用来找到注解 根据注解的功能可以创建对象 给属性赋值</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource(&quot;classpath:beans.xml&quot;)</span> <span class="comment">//原生配置文件的导入</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&quot;calsspath:jdbc.properties&quot;)</span> <span class="comment">//导入资源.properties</span></span><br></pre></td></tr></table></figure><h3 id="1-2-配置文件"><a href="#1-2-配置文件" class="headerlink" title="1.2 配置文件"></a>1.2 配置文件</h3><p>application.properties————application.yml<br>在实际开发中，我们的项目会经历很多个阶段(开发–测试–上线)，每个阶段的配置也会不同，例如：端口号，上下文，数据库等等，为了方便不同环境的切换springboot提供了多环境配置，具体步骤如下<br>    使用方式：<br>        创建多个配置文件：application-dev.properties,命名规则:application_环境名称.properties</p><p>​创建开发环境的配置文件：application-dev.properties<br>​创建测试环境的配置文件：application-test.properties</p><h2 id="2-springboot中使用applicationContext"><a href="#2-springboot中使用applicationContext" class="headerlink" title="2 springboot中使用applicationContext"></a>2 springboot中使用applicationContext</h2><ul><li><p>commandLineRunner</p></li><li><pre><code class="java">package com.example.demo;import com.example.demo.service.Impl.UserServiceImpl;import com.example.demo.service.UserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.CommandLineRunner;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.context.ConfigurableApplicationContext;import javax.annotation.Resource;@SpringBootApplicationpublic class MainApplicationClass implements CommandLineRunner &#123;    @Resource    private UserService service;    public static void main(String[] args) &#123;        System.out.println(&quot;创建容器&quot;);        ConfigurableApplicationContext run = SpringApplication.run(MainApplicationClass.class);//        String[] beanDefinitionNames = run.getBeanDefinitionNames();//        for (String beanDefinitionName : beanDefinitionNames) &#123;//            System.out.println(beanDefinitionName);//        &#125;        /*一般是自己测试的时候使用 我们返回值就是容器类型 就是@Serivce标注的类*/        System.out.println(&quot;创建容器对象之后&quot;);    &#125;    @Override    public void run(String... args) throws Exception &#123;        //可做自定义的操作，不如文件的读取 和 数据库等等        service.sayHello(&quot;lisi&quot;);        System.out.println(&quot;在容器对象创建以后执行的方法&quot;);    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ 冲上面我们可以得到一些发现： </span><br><span class="line"></span><br><span class="line">  1. @AutoWired和@Resource 直接注解在接口上 不必是实现类 </span><br><span class="line">  2. 如果使用run.getbean 使用的是实现类的名</span><br><span class="line"></span><br><span class="line">## 3 web组件</span><br><span class="line"></span><br><span class="line">三个内容：拦截器，过滤器，filter</span><br><span class="line"></span><br><span class="line">### 3.1 拦截器</span><br><span class="line"></span><br><span class="line">拦击器是springmvc中的一种对象，可拦截对controller的请求</span><br><span class="line">拦击器框架中有系统的拦击器，还可以自定义拦截器。实现对请求的预处理</span><br><span class="line"></span><br><span class="line">实现自定义拦截器：</span><br><span class="line"></span><br><span class="line">1. 创建类实现springmvc框架中的HandlerInterceptor</span><br><span class="line"></span><br><span class="line">   ```java</span><br><span class="line">   package com.example.demo.interceptor;</span><br><span class="line">   </span><br><span class="line">   import org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line">   import org.springframework.web.servlet.ModelAndView;</span><br><span class="line">   </span><br><span class="line">   import javax.servlet.http.HttpServletRequest;</span><br><span class="line">   import javax.servlet.http.HttpServletResponse;</span><br><span class="line">   </span><br><span class="line">   public class CustomerInterceptor implements HandlerInterceptor &#123;</span><br><span class="line">       @Override</span><br><span class="line">       public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class="line">           return HandlerInterceptor.super.preHandle(request, response, handler);</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       @Override</span><br><span class="line">       public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;</span><br><span class="line">           HandlerInterceptor.super.postHandle(request, response, handler, modelAndView);</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       @Override</span><br><span class="line">       public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;</span><br><span class="line">           HandlerInterceptor.super.afterCompletion(request, response, handler, ex);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure> 2. 需要在springMVC的配置文件中，声明拦截器    <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        &lt;mvc:path=&quot;url&quot;/&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;拦截器全限定名称&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>    springboot中我们需要注册拦截器    <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demo.interceptor.CustomerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyappConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="comment">//创建拦截器对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        String[] paths = &#123;<span class="string">&quot;/user/**&quot;</span>&#125;;</span><br><span class="line">        String[] exPaths = &#123;<span class="string">&quot;/user/login&quot;</span>&#125;;</span><br><span class="line">        <span class="type">InterceptorRegistration</span> <span class="variable">interceptorRegistration</span> <span class="operator">=</span> registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">CustomerInterceptor</span>()).addPathPatterns(paths).excludePathPatterns(exPaths);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><h3 id="3-2-servlet"><a href="#3-2-servlet" class="headerlink" title="3.2 servlet"></a>3.2 servlet</h3><h4 id="3-2-1-servet-Native"><a href="#3-2-1-servet-Native" class="headerlink" title="3.2.1 servet Native"></a>3.2.1 servet Native</h4><p>在springboot框架内使用servlet对象<br>使用步骤：</p><ol><li>创建一个servlet</li><li>实现doget dopost方法</li><li>注册servlet 用来容纳servlet</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建servlet类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.getWriter().print(<span class="string">&quot;hello get&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        resp.getWriter().print(<span class="string">&quot;hello post&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-2-2-filter"><a href="#3-2-2-filter" class="headerlink" title="3.2.2 filter"></a>3.2.2 filter</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        Filter.<span class="built_in">super</span>.init(filterConfig);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了MyFilter,DoFilter&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        Filter.<span class="built_in">super</span>.destroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-2-In-short"><a href="#3-2-In-short" class="headerlink" title="3.2.In_short"></a>3.2.In_short</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demo.servlet.MyFilter;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.servlet.MyServlet;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.Servlet;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletRegistrationBean <span class="title function_">registrationBean</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MyServlet</span> <span class="variable">myServlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyServlet</span>();</span><br><span class="line">        <span class="comment">//    public ServletRegistrationBean(T servlet, String... urlMappings) &#123;</span></span><br><span class="line">        <span class="comment">//        this(servlet, true, urlMappings);</span></span><br><span class="line">        <span class="comment">//    &#125;</span></span><br><span class="line">        ServletRegistrationBean&lt;MyServlet&gt; servletServletRegistrationBean = <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>&lt;&gt;(myServlet,<span class="string">&quot;/servlet&quot;</span>,<span class="string">&quot;/test&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> servletServletRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean <span class="title function_">filterRegistrationBean</span><span class="params">()</span>&#123;</span><br><span class="line">        FilterRegistrationBean&lt;Filter&gt; filterFilterRegistrationBean = <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>&lt;&gt;();</span><br><span class="line">        filterFilterRegistrationBean.setFilter(<span class="keyword">new</span> <span class="title class_">MyFilter</span>());</span><br><span class="line">        filterFilterRegistrationBean.addUrlPatterns(<span class="string">&quot;/user/*&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> filterFilterRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-字符集过滤器"><a href="#3-3-字符集过滤器" class="headerlink" title="3.3 字符集过滤器"></a>3.3 字符集过滤器</h3><p>respond的字符集过滤器是自动配置的，正常情况下不需要自己添加。<br>方式一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> FilterRegistrationBean <span class="title function_">bean</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">FilterRegistrationBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line">    <span class="comment">//使用框架中的FIlter</span></span><br><span class="line">    <span class="type">CharacterEncodingFilter</span> <span class="variable">characterEncodingFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">    <span class="comment">//指定编码方式</span></span><br><span class="line">    characterEncodingFilter.setEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    <span class="comment">//指定request，response都是用encoding的值</span></span><br><span class="line">    characterEncodingFilter.setForceEncoding(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    bean.setFilter(characterEncodingFilter);</span><br><span class="line">    bean.addUrlPatterns(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">encoding:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 先买个关子 为什么呢？ 在springboot中默认已经配置了 字符集过滤器 编码默认ISO—8859-1 设置enable=false是关闭系统中配置好的过滤器 使用自定义的过滤器4</span></span><br><span class="line">      <span class="attr">charset:</span> <span class="string">utf-8</span></span><br><span class="line">      <span class="attr">force:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>方式二更加简单 推荐使用 主要用于自定义的servlet</li></ul><h2 id="4-ORM操作数据库"><a href="#4-ORM操作数据库" class="headerlink" title="4 ORM操作数据库"></a>4 ORM操作数据库</h2><p>先看一下需要的配置：</p><p><img src="https://s1.328888.xyz/2022/06/09/zxtEg.png" alt="zxtEg.png"></p><p>Web SQLDriver Mybatis</p><p>ORM(Object Relate Mapping) java对象与数据库表的映射关系。<br>使用步骤：</p><ol><li>mybatis起步依赖：完成mybatis对象的自动配置，对象放在容器中</li><li>pom文件中指定src&#x2F;main&#x2F;java目录中的xml文件包含到classpath中</li><li>创建实体类Student</li><li>创建DAO接口，创建一个查询学生的方法</li><li>创建一个对应的Mapper文件 写sql语句</li><li>创建servlet层对象，创建studentService接口和他的实现类。去DAO对象的方法，完成数据库的操作</li><li>创建controller对象，访问Service</li><li>写application.properties文件 配置数据库信息</li></ol><h4 id="第一种方式：-Mapper"><a href="#第一种方式：-Mapper" class="headerlink" title="第一种方式：@Mapper"></a>第一种方式：@Mapper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentsDAO</span> &#123;</span><br><span class="line">    Student <span class="title function_">selectById</span><span class="params">(<span class="meta">@Param(&quot;stdtno&quot;)</span> Integer Id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种方式：@MapperScan()</p><ul><li>在主类上面添加使用</li></ul><p>第三种方式：</p><ul><li><p>将mapper放入到resource文件夹中创建一个mapper子目录</p></li><li><p>将已有的将来的mapper存放到src&#x2F;main&#x2F;resource&#x2F;mapper目录下</p></li><li><p>在配置文件中实现如下的配置</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span> <span class="comment">#mapper的包的位置</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span> <span class="comment">#添加一个日志类</span></span><br></pre></td></tr></table></figure><h2 id="5-事务"><a href="#5-事务" class="headerlink" title="5 事务"></a>5 事务</h2><p>spring框架中的事务处理：</p><ol><li>事务管理的对象：事务管理器(接口，接口有许多实现类)<br>例如：使用jdbc或者mybatis访问数据库，使用事务的管理器：DataSourceTransactionManager</li><li>声明式事务：在xml文件中使用注解说明事务的内容<br>控制事务的隔离级别，传播行为，超时时间</li><li>事务的处理方式：<ol><li>spring框架中的@Transaction</li><li>aspectJ框架可以在xml文件中，声明事务的内容</li></ol></li></ol><p>springboot中使用事务：上面的两种方式都是可以的</p><ol><li>在业务方法上面加入@Transaction，加入注解后，方法就有了事务功能了。</li><li>明确的在主配置类上面，加入@EnableTransactionManager</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">recordNewStudent</span><span class="params">(Student stu)</span> &#123;</span><br><span class="line"><span class="comment">//        Student student = new Student();</span></span><br><span class="line"><span class="comment">//        student.setStdtno(24);</span></span><br><span class="line"><span class="comment">//        student.setCountry(&quot;群雄&quot;);</span></span><br><span class="line"><span class="comment">//        student.setName(&quot;貂蝉&quot;);</span></span><br><span class="line"><span class="comment">//        student.setEmail(&quot;diaochan@gmail.com&quot;);</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">insert</span> <span class="operator">=</span> mapper.insert(stu);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//抛出一个运行时异常  目的是回滚事务</span></span><br><span class="line"><span class="comment">//        int m = 10/0;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> insert;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;com.sea.transaction.dao&quot;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(TransactionApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-接口的架构风格-REST-style"><a href="#6-接口的架构风格-REST-style" class="headerlink" title="6 接口的架构风格 REST-style"></a>6 接口的架构风格 REST-style</h2><ul><li><p>接口：API:application programing interface 应用程序接口</p></li><li><p>接口可以访问servlet，controller的url 调用其他程序的函数</p></li><li><p>架构风格：api的组织方式</p><ul><li><a href="http://localhost:8090/transaction/stu/add?name=%E8%B2%82%E8%9D%89&stdtno=24">http://localhost:8090/transaction/stu/add?name=%E8%B2%82%E8%9D%89&amp;stdtno=24</a></li><li>在地址上提供了访问资源的名称addstudent，在其后使用了get方式传递参数</li></ul></li><li><p>RESTful架构风格：</p><ul><li><p>（1）REST Representational State Transfer 简称REST （表现层状态转义）</p><p> 是一种架构理念和设计原则 不是强制性的要求 使得接口更加简洁更有层次 不是标准</p></li><li><p>（2）REST中的要素</p><p>​用REST表示资源和对资源的操作。在互联网中表示一个资源或者一个操作<br>​资源使用俩表示，在互联网，使用的图片等资源都是有对应url表示资源</p><ul><li>在url中表示资源，以及访问资源的信息,在url中使用分隔符的方式，分离不同的信息</li><li><a href="http://localhost:8080/mybase/myboot/1001">http://localhost:8080/mybase/myboot/1001</a></li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET, 查询资源  <span class="comment">//处理单个资源使用单数方式 处理多个请求使用复试形式</span></span><br><span class="line">HEAD, </span><br><span class="line">POST, 提交资源 </span><br><span class="line">PUT, 更新资源</span><br><span class="line">PATCH,</span><br><span class="line">DELETE, 删除资源</span><br><span class="line">OPTIONS,</span><br><span class="line">TRACE;</span><br></pre></td></tr></table></figure><p>但是浏览目前自是支持post和get方式</p><ul><li>在post请求中传递数据</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/students&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    name:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;stuname&quot;</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    age:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>put:更新资源–sql update</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;addStudent&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    name:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    age:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PUT&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>delete:删除资源—sql delete</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://localhost:8080/deleteStu&quot;</span>&gt;</span>delate aim data<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>传递数据需要使用什么方式呢？</p></li><li><p>分页 排序 等无关紧要的参数 依然是放在url的后面<br>case1：<a href="http://localhost:3306/listStuInfo?PerpageNum=5">http://localhost:3306/listStuInfo?PerpageNum=5</a></p></li><li><p>对资源的操作方式</p></li><li><p>REST 表现状态转移</p><ol><li><p>表现层状态转义：表现层就是视图层，显示资源的，通过视图页面，jsp等等显示操作资源的结果</p></li><li><p>状态：指的是资源的变化</p></li><li><p>转移：资源可以变化的，可以创建，new一个状态，资源一创建后可以查询资源，并且在此之后可以查看他的内容，可以被修改，修改后资源和之前的是不一样的</p></li></ol></li></ul><h3 id="6-1-REST-style相关的注解"><a href="#6-1-REST-style相关的注解" class="headerlink" title="6.1 REST style相关的注解"></a>6.1 REST style相关的注解</h3><p>​@Pathvariable:从路径中获取资源</p><p>​@GetMapping：支持get请求的方式 &#x3D;&#x3D; @RequestMapping(method&#x3D;”RequestMethod.GET”)</p><p>​…<br>​其他的我们在前面的课程里面已经用过 不再赘述了<br>​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sea.myapp.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">appController</span> &#123;</span><br><span class="line">    <span class="comment">//查询id=1001的学生</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@PathVariable</span>（路径变量）：获取url中的数据</span></span><br><span class="line"><span class="comment">     *  属性：value： 路径变量名</span></span><br><span class="line"><span class="comment">     *  位置：放在控制器的形参前面</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello/&#123;stdtno&#125;&quot;)</span> <span class="comment">//需要特别注意的是格式是&#123;&#125;而不是$&#123;&#125;   容易犯错的点</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">( <span class="meta">@PathVariable(&quot;stdtno&quot;)</span> String stdtno)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world! students &quot;</span>+stdtno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-在页面中或者ajax中，支持put，delete请求"><a href="#6-2-在页面中或者ajax中，支持put，delete请求" class="headerlink" title="6.2 在页面中或者ajax中，支持put，delete请求"></a>6.2 在页面中或者ajax中，支持put，delete请求</h3><ul><li>在springmvc中有一个过滤器，支持post请求转换为put,delete</li><li>过滤器：org.spring.springframework.web.filter.HiddenHttpMethodFilter<ul><li>实现步骤：<ol><li>application.properties（yaml）：开启使用HiddenHttpMethodFIlter过滤器</li><li>在请求也中，包含_method参数，它的值是put,delete，发起这个请求使用的是post方式</li></ol></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;put&quot;</span>&gt;</span> <span class="comment">&lt;!--比较容易忘记的是name=&quot;_method&quot;--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7-Springboot集成Redis"><a href="#7-Springboot集成Redis" class="headerlink" title="7 Springboot集成Redis"></a>7 Springboot集成Redis</h2><ul><li>Redis的数据类型：String，List，Set，Zset，Hash</li><li>Redis是一个中间件：一个独立的服务器</li><li>java中著名的客服端</li><li>程序中使用RedisTemplate类的方法，操作redis数据，实际就是调用的lettuce 客户端的中的方法</li><li>序列化的不同方式<ul><li>JDK：不支持跨语言的 所以在Linux中没有显示数据 用的比较多 但是Linux中不可见 性能最差</li><li>Json 高并发使用较多</li><li>xml</li><li>Hessian</li><li>kryo(不支持跨语言) 高效率</li><li>Thrift-&gt;facebook</li><li>Protostuff</li></ul></li></ul><h3 id="重要总结："><a href="#重要总结：" class="headerlink" title="重要总结："></a>重要总结：</h3><ul><li><p>如果只是传字符串的话推荐使用StringRedisTemplate</p></li><li><p>json序列化：将对象转化为json格式</p></li><li><p>设置springboot的序列化：</p></li><li><p>RedisTemplate是Redis-start注入进来的 使用的是jdk‘的序列化</p></li></ul><h2 id="8-springboot集成Dubbo"><a href="#8-springboot集成Dubbo" class="headerlink" title="8 springboot集成Dubbo"></a>8 springboot集成Dubbo</h2><ul><li>由于Dubbo尚未学过所以展示先搁置一下</li></ul><h2 id="9-Springboot的打包方式"><a href="#9-Springboot的打包方式" class="headerlink" title="9 Springboot的打包方式"></a>9 Springboot的打包方式</h2><ul><li><p>打包为war：要使用springboot打包webapp需要在生命周期中使用clean 和 package 再将打包好的文件装入到tomcat的webapp文件夹中 启动tomcat服务器 即可实现打包</p><ul><li><p>需要注意的是要将文件的主类实现可序列化的类</p></li><li></li><li><pre><code class="java">@SpringBootApplicationpublic class JspApplication extends SpringBootServletInitializer &#123;    public static void main(String[] args) &#123;        SpringApplication.run(JspApplication.class, args);    &#125;    @Override    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) &#123;        return builder.sources(JspApplication.class);    &#125;&#125;</code></pre></li></ul></li><li><p>打包为jar：jar包更加容易使用内嵌的tomcat就能使用</p><ul><li>在build中给出finalname</li><li>打包jar，有jsp是必须指定maven-plugin插件的版本是1.4.2.RELEASE</li><li>jar在cmd中使用java -jar myboor.jar 就可以开启服务器使用<ul><li>有一个小问题 为什么连tomcat都可以不需要使用呢？</li></ul></li></ul></li><li><p>可以将该命令封装到一个Linux的一个shell脚本中 上线部署</p><ul><li><p>写一个shell脚本</p><p>#!&#x2F;bin&#x2F;sh<br>java-jar xxx.jar</p></li><li><p>赋权限 chmod 777 run.sh</p></li><li><p>启动shell脚本：.&#x2F;run.sh</p><ul><li>由此可见shell是一种脚本语言</li></ul></li></ul></li></ul><h3 id="重要总结：-1"><a href="#重要总结：-1" class="headerlink" title="重要总结："></a>重要总结：</h3><ul><li>打包为jar<ol><li>创建一个项目</li><li>修改pom’文件的配置</li><li>指定文件jar的名称</li><li>最后在lifecycle中施行clear 和 package</li><li>生成jar包 在Linux或者Windows中使用 java -jar myboot.jar 实现项目的部署</li></ol></li><li>war于此类似但是需要在tomcat中部署使用</li></ul><h2 id="10-Thymeleaf模板引擎"><a href="#10-Thymeleaf模板引擎" class="headerlink" title="10 Thymeleaf模板引擎"></a>10 Thymeleaf模板引擎</h2><p>​</p><h2 id="SSM的使用关系"><a href="#SSM的使用关系" class="headerlink" title="SSM的使用关系"></a>SSM的使用关系</h2><p>controller (@Autowire Service_interface)—-&gt; Service interface  (implement entity @Service) ——&gt;Mapper(need code a .xml file)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-springboot&quot;&gt;&lt;a href=&quot;#1-springboot&quot; class=&quot;headerlink&quot; title=&quot;1 springboot&quot;&gt;&lt;/a&gt;1 springboot&lt;/h2&gt;&lt;p&gt;tips:start.spring.io是外国的网址 相对较</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>computer_Network</title>
    <link href="http://example.com/2024/05/22/computer_Network/"/>
    <id>http://example.com/2024/05/22/computer_Network/</id>
    <published>2024-05-22T08:33:06.000Z</published>
    <updated>2024-05-22T08:33:06.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="计算机网络的概念"><a href="#计算机网络的概念" class="headerlink" title="计算机网络的概念"></a>计算机网络的概念</h2><ul><li>计算机网络：是一个将分散的、具有独立功能的计算机系统，通过通信设备与线路连接起来，由功能完善的软件实现<mark>资源的共享和信息传递</mark>的系统。</li></ul><h2 id="计算机网络的功能"><a href="#计算机网络的功能" class="headerlink" title="计算机网络的功能"></a>计算机网络的功能</h2><ul><li><p>数据通信</p></li><li><p>资源共享</p><ul><li>同一台计算机网络上的其他计算机可以使用某台计算机的计算机资源的行为，可共享硬件、软件、数据。</li></ul></li><li><p>分布式处理</p><ul><li>多台计算机各自承担同一任务的不同部分</li></ul></li><li><p>提高可靠性</p></li><li><p>负载均衡</p></li></ul><h2 id="计算机网络的发展"><a href="#计算机网络的发展" class="headerlink" title="计算机网络的发展"></a>计算机网络的发展</h2><ul><li><p>略</p></li><li><p>ARPnet阿帕网 不能实现不同网络的互联</p></li><li><p>TCP&#x2F;IP协议 可以实现不同网络的连接<br>网络是许多计算机连接在一起，互联网是把许多的网络连接在一起，因特网是世界上最大的互联网。</p></li></ul><h2 id="计算机网络的三级结构"><a href="#计算机网络的三级结构" class="headerlink" title="计算机网络的三级结构"></a>计算机网络的三级结构</h2><p><img src="https://i.328888.xyz/2023/04/24/iSYn2o.png" alt="iSYn2o.png"></p><h2 id="计算机的多层次ISP结构"><a href="#计算机的多层次ISP结构" class="headerlink" title="计算机的多层次ISP结构"></a>计算机的多层次ISP结构</h2><ul><li>ISP：因特网服务的提供者&#x2F;因特网服务供应商，是一个面向广大用户中和提供互联网接入业务的、信息业务、和增值业务的公司，如中国联通，中国电信等分为主干ISP、地区ISP和本地ISP</li></ul><h2 id="计算机网络的组成"><a href="#计算机网络的组成" class="headerlink" title="计算机网络的组成"></a>计算机网络的组成</h2><ul><li><p>组成部分： 硬件、软件、协议（一定约定和规则的集合）</p></li><li><p>工作方式： 边缘部分、核心部分</p><ul><li><p>核心部分：提供服务</p></li><li><p>边缘：发布数据</p></li><li><p>进程之间的同信：</p></li></ul></li><li><p>功能组成</p><ul><li><p>数据通信-&gt;通信子网</p></li><li><p>资源共享-&gt;资源子网</p></li></ul></li><li><p><img src="https://i.328888.xyz/2023/04/24/iSYPJb.png" alt="iSYPJb.png"></p></li><li><p>按分布范围分类</p><ul><li><p>局域网使用的是广播技术</p></li><li><p>广域网使用的是交换技术 就是通过路由器交换信息</p></li></ul></li><li><p>交换技术分类</p><ul><li><p>电路交换 通话中不能被被人使用</p></li><li><p>报文交换 </p></li><li><p>分组交换</p><ul><li>报文和分组都是存储转发</li></ul></li></ul></li><li><p>按传输技术分：</p><ul><li><p>广播式网络 共享公共通信信道</p></li><li><p>点对点网络 使用分组存贮转发和路由选择机制</p></li></ul></li></ul><h2 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h2><ul><li><p>速率：数据率或者数据传输率或者比特率</p></li><li><p><img src="https://i.328888.xyz/2023/04/24/iSqqRP.png" alt="iSqqRP.png"></p></li><li><p>带宽</p><ul><li><p>带宽原本是指某个信号具有的频带宽度，就是最高频率与最低率之差单位是hz</p></li><li><p>计算机网络中，带宽用来表示网络通路传输数据的能力，通常是指单位时间内从网络中的某一个点到另一个点所能通过的最高数据率。单位i是bit&#x2F;s</p><ul><li>1Mb&#x2F;s&#x3D;1bit&#x2F;us 电磁波一微秒可以向前传输200m</li></ul></li></ul></li><li><p>吞吐量</p><ul><li>表示单位时间内通过某个网络的数据量。吞吐量受到带宽和额定速率的限制</li></ul></li><li><p>时延</p><ul><li><p>数据从一端到另一端需要的时间。也叫延迟或延迟。单位i是s</p></li><li><p>时延的类型</p><ul><li><p>发送时延&#x3D;数据长度&#x2F;信道带宽</p></li><li><p>传播时延 取决于电磁波的传播速度和链路长度 &#x3D;信道长度&#x2F;电磁波在信道上的传播速度</p></li><li><p>排队时延 等待输入&#x2F;入链路可用&#x3D; 等待输&#x2F;出链路可用</p></li><li><p>处理时延&#x3D;检错 找出口</p></li></ul></li></ul></li><li><p>时延带宽积&#x3D;传播时延*带宽</p></li><li><p>往还时延RTT：从发送方发出数据到发送方收到接收方的确认总共经历的时延</p></li><li><p>利用率</p><ul><li><p>信道利用率：有数据通过的时间&#x2F;数据通过时间</p></li><li><p>网络利用率：信道利用率的加权平均数</p></li></ul></li></ul><h2 id="计算机网络的结构"><a href="#计算机网络的结构" class="headerlink" title="计算机网络的结构"></a>计算机网络的结构</h2><ul><li><p>ISO&#x2F;OSI七层参考模型</p></li><li><p>分层的基本原则</p><ul><li><p>各层之间相互独立，每层只实现一种相对独立的功能（解耦合）</p></li><li><p>每层之间界面自然清晰，易于理解，相互交流尽可能少（解耦合）</p></li><li><p>结构上可分割开。每层都采用最适合的技术来实现。</p></li><li><p>保持下层对上层的独立性，上层单向使用下层提供的服务（生产者消费者模式）</p></li></ul></li><li><p>整个分层结构应该促进标准化工作（标准化）</p><ol><li><p>实体： 第n层中的活动称为n层实体。同一层的实体叫做对等实体</p></li><li><p>协议：进行网络中的对等实体的数据交换而建立的原则、标准或者约定称为网络协议</p></li><li><p>接口：上层使用下层的入口</p></li><li><p>服务: 下层为相邻上层提供的功能调用（vertical）</p><ol><li><p>SDU服务数据单元：为完成用户要求的功能而传递的数据</p></li><li><p>PCI协议控制信息：控制协议操作的信息</p></li><li><p>PDU协议数据单元：对等层次之间传送的数据单元</p></li></ol></li></ol></li><li><p><img src="https://i.328888.xyz/2023/04/24/io4mGP.png" alt="io4mGP.png"></p></li><li></li><li><p>会话层： （建立同步）</p><ol><li><p>建立管理终止会话</p></li><li><p>使用校验点可使会话在通信失效时从校验点&#x2F;同步点恢复通信，实现数据同步。使用于传输大文件</p></li></ol></li><li><p>表示层：</p><ol><li><p>用于处理两个通信系统中交换信息的表达方式</p><ol><li><p>数据格式变换</p></li><li><p>数据加密解密</p></li><li><p>数据压缩和恢复</p></li></ol><p>JPEG ASCII</p></li></ol></li><li><p>传输层：（TCP&#x2F;UDP）</p><ul><li>负责主机中两个进程的通信，就是端到端的通信。传输单位时报文段或者用户数据报</li></ul><ol><li><p>可靠传输、不可靠传输 ：可靠传输需要有确认信息 不可靠传输：不需要建立连接，不需要确认信息就会开始发送消息</p></li><li><p>差错控制：如果出错会不会重新发送</p></li><li><p>流量控制：对发送方的速度进行控制</p></li><li><p>复用分用：</p><ol><li><p>复用：多个应用进程同时使用下面传输层的服务</p></li><li><p>分用：传输层把收到的消息分别交付给上面的应用层中相应的进程</p></li></ol></li></ol></li><li><p>网络层（IP层）最重要的一层</p><ul><li><p>主要任务是把分组从远端传到目的端，分组交换网上的不同主机提供通信服务。网络传输单位时数据报（数据报太长的时候就会有一个分组）</p><ol><li><p>路由选择（选择最好的道路）</p></li><li><p>流量控制（）</p></li><li><p>差错控制</p></li><li><p>拥塞控制 若所有的点都来不及接受分组，而是丢弃大量的分组的话，网络就处在一个拥塞的状态。因此要采取一定的措施来缓解这种拥塞。</p></li></ol></li></ul></li><li><p>数据链路层</p><ul><li><p>主要任务是把网络层传下来的数据组装成帧</p><ul><li>数据链路层&#x2F;链路层的传输单位时帧</li></ul><ol><li><p>成帧</p></li><li><p>差错控制 （帧错+位错）</p></li><li><p>流量控制</p></li><li><p>访问控制 控制对信道的访问</p></li></ol></li><li><p>主要协议</p><ul><li>SDLC、HDLC、PPP、STP</li></ul></li><li><p>设备</p><ul><li><p>交换机</p></li><li><p>网桥</p></li></ul></li><li><p>差错控制</p><ul><li><p>奇偶校验</p><ul><li>当出错两位是，检测不到错误</li></ul></li><li><p>循环冗余校验</p><ul><li>根据传输或者保存的数据产成固定位数校验码</li></ul></li></ul></li><li><p>最大传输单元</p><ul><li><p>最大传输单元MTU，数据链路层的数据帧不是无限大的，数据帧长度受到MTU限制</p></li><li><p>路径MTU：由链路中MTU的最小值决定</p></li></ul></li></ul></li><li><p>物理层</p><ul><li><p>主要任务时在物理介质上实现比特流的透明传送 </p><ul><li>透明传输： 不管什么数据是什么样的比特流组合，都应当能在链路上传送</li></ul></li><li><p>物理层的基本单位时Bit</p><ol><li><p>定义接口特性 （连接电缆的插头 引脚）</p></li><li><p>定义传输模式 （单工、半双工、双工）</p></li><li><p>定义传输速率</p></li><li><p>比特同步</p></li></ol></li></ul></li><li><p><img src="https://i.328888.xyz/2023/04/24/ioWAwv.png" alt="ioWAwv.png"></p></li></ul><h1 id="物理层的基本概念"><a href="#物理层的基本概念" class="headerlink" title="物理层的基本概念"></a>物理层的基本概念</h1><h3 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h3><p><img src="https://i.328888.xyz/2023/04/24/ioWkvZ.png" alt="ioWkvZ.png"></p><ul><li><p>物理层接口特性</p><ul><li><p>物理层解决如何连接各种计算机的传输媒体上传输数据比特流，而不是指具体的传输媒体。</p></li><li><p>物理层的主要任务：确定与传输媒体接口有关的一些特性——》定义标准</p><ul><li><p>路由器接口的形制</p></li><li><p>插排的形制</p></li></ul></li><li><p>机械特性；</p><ul><li>定义物理连接的特性，规定物理连接时采用的规格、接口现状、引线数目、引脚数量和排列情况</li></ul></li><li><p>电器特性</p><ul><li>规定传输二进制位时，线路上的信号的电压范围、抗阻匹配、传输速率和距离限制等</li></ul></li><li><p>功能特性</p><ul><li>指某一条线上出现的某一电平代表何种意义，接口部件的信号线的用途</li></ul></li><li><p>规程特性</p><ul><li>定义各条线路的工作规程和时序关系</li></ul></li><li><p>物理层设备</p><ul><li><p>中继器</p><ul><li>同一个局域网的再生信号；两端的网段必须同一个协议；5-4-3规程：10BASE-5以太网中，最多串联4ge中继器，5段中只能有3个连接主机</li></ul></li><li><p>集线器</p><ul><li>同一个局域网的再生、放大信号（多端口的中继器）；半双工，不能隔离冲突域与不能隔离广播域。</li></ul></li></ul></li><li><p>冲突域</p><ul><li>以太网上竞争同一带宽的节点集合。这个域代表了冲突在其中发生并传播的区域，这个区域可以被认为是共享段。</li></ul></li><li><p>广播域</p><ul><li>接收同样广播消息的节点的集合。</li></ul></li></ul><h3 id="数据通信"><a href="#数据通信" class="headerlink" title="数据通信"></a>数据通信</h3><p>典型的数据通信模型<br> <img src="https://i.328888.xyz/2023/04/24/iokFXX.png" alt="iokFXX.png"><br>源系统——————》传输系统————————》目的系统</p><h3 id="数据通信的相关术语"><a href="#数据通信的相关术语" class="headerlink" title="数据通信的相关术语"></a>数据通信的相关术语</h3><p>通信的目的时传送消息（消息：语音、文字、图像、视频等）。<br>数据Data：传送消息的实体，通常是有意义的符号序列<br>信号：数据的电器&#x2F;电磁的表现，时数据在传输过程中的存在形式<br>数字信号&#x2F;离散信号：代表消息的参数的取值时离散的<br> 模拟信号&#x2F;连续信号：代表消息的参数的取值是连续的<br>信道： 信号的传输介质。一般用来表示向某一方向传输消息的介质，因此一条通路的线路往往包含一条发送信道和一条接受信道</p><ul><li><img src="https://i.328888.xyz/2023/04/24/iokMXq.png" alt="iokMXq.png" border="0" /></li></ul></li><li><p><img src="https://i.328888.xyz/2023/04/24/iokaUw.png" alt="iokaUw.png"></p><ul><li><p>同步传输：在同步传输的模式下，数据的传输是一个个数据区块为单位，因此同步传输又称为区块传输。在传输数据的过程中，需要先发送1或者多个同步字符，在整批发送数据</p></li><li><p>异步传输：异步传输将比特流分成小组进行传输，小组可以是一个字符或者更长。发送方可以随时发送这些比特组，而接收方不知道他们什么时候能到达。传输数据时，加一个字符起始位和一个字符终止位。（键盘）</p></li></ul></li></ul><p><img src="https://i.328888.xyz/2023/04/24/iokqVk.png" alt="iokqVk.png"></p><h2 id="以太网协议详解"><a href="#以太网协议详解" class="headerlink" title="以太网协议详解"></a>以太网协议详解</h2><ul><li><p>MAC地址：每一个设备都拥有唯一的MAC地址，一共8位，使用16进制表示。</p></li><li><p>以太协议：是一种使用广泛的局域网技术，是一种应用于数据链路层的协议，使用以太网可以完成相邻设备的数据帧传送</p></li><li><p>以太网帧结构</p><ul><li><p>类型：标识上层协议 2字节</p></li><li><p>目的地址和源地址：MAC地址 6字节</p></li><li><p>数据：封装的上层协议的分组 45-1500字节</p></li><li><p>CRC：循环冗余码 4字节</p></li><li><p>以太网最短帧：以太网帧最短64字节；以太网除了数据部分18字节；数据最短字46字节；</p></li></ul></li><li><p>MAC地址 物理地址 局域网地址</p><ul><li><p>MAC地址长度为6字节 48位</p></li><li><p>MAC地址具有唯一性，每个网络适配器对应一个MAC地址；</p></li><li><p>通常采用16进制表示，每个字节表示一个16进制数，使用-连接起来</p></li><li><p>MAC广播地址：FF-FF-FF-FF-FF-FF</p></li></ul></li><li><p>同0异1</p></li></ul><p>    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;计算机网络&quot;&gt;&lt;a href=&quot;#计算机网络&quot; class=&quot;headerlink&quot; title=&quot;计算机网络&quot;&gt;&lt;/a&gt;计算机网络&lt;/h1&gt;&lt;h2 id=&quot;计算机网络的概念&quot;&gt;&lt;a href=&quot;#计算机网络的概念&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>databaseLearn</title>
    <link href="http://example.com/2024/05/22/databaseLearn/"/>
    <id>http://example.com/2024/05/22/databaseLearn/</id>
    <published>2024-05-22T08:33:06.000Z</published>
    <updated>2024-05-22T08:33:06.789Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-sql的分类"><a href="#1-sql的分类" class="headerlink" title="#1.sql的分类"></a>#1.sql的分类</h2><p>&#x2F;*<br>DDL 数据定义语言 create\alter 修改结构\drop 删除\rename\truncate:清空表，但是表的结构还在 表的结构的增删改查<br>DML 数据操作语言 insert\delete\update 更新\select 查询\       表的数据的增删查改<br>DQL 数据查询语言 select<br>DCL 数据控制语言 grant revoke<br>TCL 事务控制语言 commit rollback</p><p>– 导入数据库的方式</p><p>&#x2F;*方式一：source 文件的全路径<br>mysql&gt;source D:... 引入sql源文件<br>要用命令行执行<br>要在某一个database中导入<br>  方式二：基于具体的图形化界面的工具可以导入数据 </p><h2 id="–-列的别名"><a href="#–-列的别名" class="headerlink" title="– 列的别名"></a>– 列的别名</h2><p>– as:全称：alias（别名），可以省略 不是英语中的as（作为）<br>– 列的别名可以使用双引号引起来。<br>– select 是永远不会修改数据的</p><h2 id="条件格式"><a href="#条件格式" class="headerlink" title="条件格式"></a>条件格式</h2><p>mysql&gt; select * from emp where sal &gt;&#x3D; 1250 and sal &lt;&#x3D; 3000; 显示工资在1250 到 3000之间的 与下面的方法同</p><p>mysql&gt; select * from emp where sal between 1250 and 3000;</p><p> select * from emp where comm is not null; comm是空</p><p> select * from emp where comm is null;somm不是空</p><p>select * from emp where sal&gt;&#x3D;2500 and job &#x3D; ‘manager’; 工作岗位是管理 工资大于2500的员工；</p><p>select * from emp where sal&gt;&#x3D;2500 or job &#x3D; ‘manager’; 找到岗位是管理或者工资大于2500的员工；</p><p>select * from emp where sal&gt;&#x3D;2500 and (deptno &#x3D; 10 or deptno &#x3D; 20);找出部门编号为10或者20的且工资大于2500的员工；</p><p>说明：and和or同时出现，and优先级比较高 如果and和or同时出现or的内容加小括号；</p><p>select empno,job,ename from emp where job in(‘manager’,’salesman’); 工作是管理和销售的人员部分信息；</p><p>注意：in不是表示一个区间 而是一个一一对应的关系</p><p>select empno,job,ename from emp where sal not in(5000,3000)；工资不是3000和5000的员工</p><h2 id="14-模糊查询："><a href="#14-模糊查询：" class="headerlink" title="14 模糊查询："></a>14 模糊查询：</h2><p>like ‘’ 的使用</p><p>%是一个特殊的符号 。_下划线也是一特殊的字符</p><p>%匹配任意多的字符</p><p>_任意一个字符</p><p> select ename from emp where ename like ‘%O%’; 找到名字里面含有O的员工</p><p>select * from emp where ename like ‘_M%’; 找到名字第二个字母是m的员工</p><p>转义字符</p><p>_的转义\ _</p><h2 id="15-排序："><a href="#15-排序：" class="headerlink" title="15 排序："></a>15 排序：</h2><p>order by 默认是升序</p><p>sac指定升序 desc降序</p><p>多个字段排序：</p><p>按照多个字段排序；</p><p>有主有次 要求按照薪资升序 再按名字的升序排列</p><p>select</p><p>​*</p><p>from </p><p>​emp </p><p>order by </p><p>​sal asc,ename asc; 在前的是起到主导作用的；</p><p>根据字段的位置也可以排序</p><p>select ename, sal from emp order by 2; 用第二列排序 </p><p>了解一下，不建议开发中这样使用，应为不健壮 删除一列会导致排序逻辑变化</p><p>select * from emp where sal between 1250 and 3000 order by sal desc;</p><h2 id="16-条件加排序的综合处理："><a href="#16-条件加排序的综合处理：" class="headerlink" title="16 条件加排序的综合处理："></a>16 条件加排序的综合处理：</h2><p>严格按照一个顺序</p><p>select </p><p>…</p><p>from</p><p>…</p><p>where</p><p>….</p><p>order by</p><p> …</p><p>先from</p><p>在where</p><p>在select</p><p>在order by</p><p>排序总是在最后执行</p><h2 id="17-数据处理函数"><a href="#17-数据处理函数" class="headerlink" title="17 数据处理函数"></a>17 数据处理函数</h2><p>数据处理函数又称为单行处理函数</p><p>单行处理函数的特点是一个输入对应一个输出 (单参数函数)</p><p>多行处理函数是多个输入对应一个输出(多参数函数)</p><p>单行处理函数常见的有哪些</p><p><img src="C:\Users\ADMINI~1\AppData\Local\Temp\1651320477124.png" alt="1651320477124"></p><p>lower函数 select lower(ename) ‘lowername’ from emp; 14个输入对应14个输出 这是单处理函数的特点</p><p> select upper(ename) ‘lowername’ from emp;大写</p><p>取子串 substr();</p><p>select substr(ename,1,1) ‘kk’ from emp; 其实位置以一为起始；</p><p>select substr(ename,1,2),job,sal from emp where substr(ename,1,1) &#x3D; ‘S’;截取子串</p><p>concat 函数进行字符串的拼接；</p><p>length()取字符串长度</p><p>trim()去除前后空白；select * from emp where ename &#x3D; trim(‘king’);</p><p>str_to_data;</p><p>data_fromat: 格式化日期</p><p>format 设置千分位</p><p>round 四舍五入</p><p>ifnull 可以将null转化为一个具体的值</p><p>select round(1234.567,2) as result from emp; 保留两位小数 &#x3D; 1234.57</p><p>select round(1234.567,1) as result from emp；保留一位小数 &#x3D;1234.6</p><p>select round(1234.567,-1) as result from emp；十位1240</p><p>select round(1234.567,-2) as result from emp；百位 1200；</p><p> select round(rand()*100) as result  from emp;得到一百以内的随机数</p><p>凡是空参加的运算最终结果都是null；</p><p>select ename,job,sal,(sal+ifnull(comm,0)) as anusal_comout from emp;  ifnull(object,result)函数前面写判断对象 后面写是null的时候对象当作什么？</p><p>case…when…then….when…than….else…..when…..; 当什么什么如何当什么什么如何如何此外当如何如何</p><p>不修改数据只是将查询结果显示为工资上调</p><p>实例： </p><p>select ename,job,sal oldersal,(case job when ‘manager’then sal<em>1.1 when ‘salesman’ then sal</em>1.5 else sal end) as newsal from emp；</p><p>当员工为管理的时候工资提高百分之十 当员工为销售人员时工作提高百分之五十 其他的不变；</p><h2 id="18-分组函数"><a href="#18-分组函数" class="headerlink" title="18 分组函数"></a>18 分组函数</h2><p>多行处理函数 一共有五个；</p><p>count() 计数</p><p>sum（）求和</p><p>avg（）求平均值</p><p>max（）求最大值</p><p>min（）求最小值</p><p>mysql&gt; select sum(sal),ename  from emp;<br>+———-+———-+<br>| sum(sal) | ename    |<br>+———-+———-+<br>| 39025.00 | SeaOcean |<br>+———-+———-+</p><p>mysql&gt; select avg(sal) from emp;<br>+————-+<br>| avg(sal)    |<br>+————-+<br>| 2601.666667 |<br>+————-+</p><p>mysql&gt; select min(sal) from emp;<br>+———-+<br>| min(sal) |<br>+———-+<br>|   800.00 |<br>+———-+</p><p>mysql&gt; select count(sal) from emp;<br>+————+<br>| count(sal) |<br>+————+<br>|         15 |<br>+————+</p><p>分组函数使用时要先分组 如果没有分组默认是整张表是一个组</p><p>分组函数在使用的时候要只注意哪些问题；</p><p>一、分组函数自动处理null，不需要提前对null进行处理；</p><p>二、分组函数中count(*)和count具体字段有什么区别</p><p>count(具体字段)：表示统计字段下所有不为null的字段</p><p>count(*)：统计表中的总行数</p><p>三、分组函数不能直接使用在where子句中；</p><h1 id="19-分组查询"><a href="#19-分组查询" class="headerlink" title="19 分组查询"></a>19 分组查询</h1><p>什么是分组查询：</p><p>先分组 再分组操作</p><p>select</p><p>​…</p><p>from </p><p>​…</p><p>where</p><p>​….</p><p>group by</p><p>​…</p><p>执行顺序：</p><p>1 from 2where 3group by4select 5order by</p><p>计算每个部门的工资和</p><p>计算每个岗位的平均工资</p><p>mysql&gt; select job,sum(sal) from emp  group by job order by sal;<br>+———–+———-+<br>| job       | sum(sal) |<br>+———–+———-+<br>| CLERK     |  4150.00 |<br>| SALESMAN  |  5600.00 |<br>| ANALYST   |  6000.00 |<br>| PRESIDENT |  5000.00 |<br>| MANAGER   | 18275.00 |<br>+———–+———-+</p><h3 id="重点结论："><a href="#重点结论：" class="headerlink" title="重点结论："></a>重点结论：</h3><p>在一条select语句中，如果有group by 语句的话，select后面只能跟：参加分组的字段及其分组函数。其他一律不行</p><p>mysql&gt; select deptno,max(sal) from emp group by deptno; 找到各个部门最大新资</p><p>+——–+———-+<br>| deptno | max(sal) |<br>+——–+———-+<br>|     20 | 10000.00 |<br>|     30 |  2850.00 |<br>|     10 |  5000.00 |<br>+——–+———-+</p><p>如何用两个关键字分组？</p><p>+——-+———-+———–+——+————+———-+———+——–+<br>| EMPNO | ENAME    | JOB       | MGR  | HIREDATE   | SAL      | COMM    | DEPTNO |<br>+——-+———-+———–+——+————+———-+———+——–+<br>|  1001 | SeaOcean | MANAGER   | 8848 | 1998-09-26 | 10000.00 |    NULL |     20 |<br>|  7369 | SMITH    | CLERK     | 7902 | 1980-12-17 |   800.00 |    NULL |     20 |<br>|  7499 | ALLEN    | SALESMAN  | 7698 | 1981-02-20 |  1600.00 |  300.00 |     30 |<br>|  7521 | WARD     | SALESMAN  | 7698 | 1981-02-22 |  1250.00 |  500.00 |     30 |<br>|  7566 | JONES    | MANAGER   | 7839 | 1981-04-02 |  2975.00 |    NULL |     20 |<br>|  7654 | MARTIN   | SALESMAN  | 7698 | 1981-09-28 |  1250.00 | 1400.00 |     30 |<br>|  7698 | BLAKE    | MANAGER   | 7839 | 1981-05-01 |  2850.00 |    NULL |     30 |<br>|  7782 | CLARK    | MANAGER   | 7839 | 1981-06-09 |  2450.00 |    NULL |     10 |<br>|  7788 | SCOTT    | ANALYST   | 7566 | 1987-04-19 |  3000.00 |    NULL |     20 |<br>|  7839 | KING     | PRESIDENT | NULL | 1981-11-17 |  5000.00 |    NULL |     10 |<br>|  7844 | TURNER   | SALESMAN  | 7698 | 1981-09-08 |  1500.00 |    0.00 |     30 |<br>|  7876 | ADAMS    | CLERK     | 7788 | 1987-05-23 |  1100.00 |    NULL |     20 |<br>|  7900 | JAMES    | CLERK     | 7698 | 1981-12-03 |   950.00 |    NULL |     30 |<br>|  7902 | FORD     | ANALYST   | 7566 | 1981-12-03 |  3000.00 |    NULL |     20 |<br>|  7934 | MILLER   | CLERK     | 7782 | 1982-01-23 |  1300.00 |    NULL |     10 |<br>+——-+———-+———–+——+————+———-+———+——–+</p><p>select job,deptno,max(sal) from emp group by deptno,job order by deptno;<br>+———–+——–+———-+<br>| job       | deptno | max(sal) |<br>+———–+——–+———-+<br>| CLERK     |     10 |  1300.00 |<br>| MANAGER   |     10 |  2450.00 |<br>| PRESIDENT |     10 |  5000.00 |<br>| ANALYST   |     20 |  3000.00 |<br>| CLERK     |     20 |  1100.00 |<br>| MANAGER   |     20 |  2975.00 |<br>| CLERK     |     30 |   950.00 |<br>| MANAGER   |     30 |  2850.00 |<br>| SALESMAN  |     30 |  1600.00 |<br>+———–+——–+———-+</p><p>select job,deptno,max(sal) from emp group by deptno,job having max(sal) &gt; 3000;<br>+———–+——–+———-+<br>| job       | deptno | max(sal) |<br>+———–+——–+———-+<br>| PRESIDENT |     10 |  5000.00 |<br>+———–+——–+———-+<br>1 row in set (0.00 sec)</p><p>以上sql语句执行效率较低</p><p>可以考虑先将大于3000的找出来 在分组</p><p>mysql&gt; select deptno,job from emp where sal &gt; 3000 group by deptno,job;<br>+——–+———–+<br>| deptno | job       |<br>+——–+———–+<br>|     10 | PRESIDENT |<br>+——–+———–+</p><p>找出每个部门平均新资，要求显示平均新资高于2500的；</p><p>还没分组时不能使用分组函数</p><p>mysql&gt; select avg(sal),deptno from emp group by deptno having avg(sal)&gt;2500;<br>+————-+——–+<br>| avg(sal)    | deptno |<br>+————-+——–+<br>| 2916.666667 |     10 |<br>+————-+——–+</p><p>能用where用where 没有where用having；</p><p>总结：</p><p>select</p><p>​………</p><p>from</p><p>​………..</p><p>where </p><p>​……</p><p>group by</p><p>​……..</p><p>having</p><p>​…….</p><p>order by</p><p>​……….</p><h2 id="20-distinct"><a href="#20-distinct" class="headerlink" title="20 distinct"></a>20 distinct</h2><p>distinct只能写在所有字段的最前方</p><h2 id="21-连接查询"><a href="#21-连接查询" class="headerlink" title="21 连接查询"></a>21 连接查询</h2><p>2.1 什么时连接查询？</p><p>冲一张表中单独查询，称为单独查询</p><p>emp表和dept表联合起来查询，从emp表中取出员工名字，从dept表中查出部门名称。</p><p>这种跨表查询，多张表联合起来查询数据，被称为连接查询。</p><p>2.2 连接查询的分类？</p><p>  根据语法的年代分类：</p><p>SQL92：上世纪92年出现的语法</p><p>SQL99：上世纪99年出现的语法</p><p>我们在这里重点学习SQL99 </p><p>根据表连接的方式分类：</p><p>内连接：</p><p>等值连接 非等值连接 自联结</p><p>外连接：</p><p>左连接 右连接</p><p>全连接（不讲）：几乎不用</p><p>2.3</p><p>当两张表进行连接查询时，没有任何条件限制会发生什么情况？</p><p>案例：查询每个员工的所在的部门名称？</p><p>mysql&gt; select ename,dname from emp,dept;<br>+——–+————+<br>| ename  | dname      |<br>+——–+————+<br>| SMITH  | OPERATIONS |<br>| SMITH  | SALES      |<br>| SMITH  | RESEARCH   |<br>| SMITH  | ACCOUNTING |<br>| ALLEN  | OPERATIONS |<br>| ALLEN  | SALES      |<br>| ALLEN  | RESEARCH   |<br>| ALLEN  | ACCOUNTING |<br>| WARD   | OPERATIONS |<br>| WARD   | SALES      |<br>| WARD   | RESEARCH   |<br>| WARD   | ACCOUNTING |<br>| JONES  | OPERATIONS |<br>| JONES  | SALES      |<br>| JONES  | RESEARCH   |<br>| JONES  | ACCOUNTING |<br>| MARTIN | OPERATIONS |<br>| MARTIN | SALES      |<br>| MARTIN | RESEARCH   |<br>| MARTIN | ACCOUNTING |<br>| BLAKE  | OPERATIONS |<br>| BLAKE  | SALES      |<br>| BLAKE  | RESEARCH   |<br>| BLAKE  | ACCOUNTING |<br>| CLARK  | OPERATIONS |<br>| CLARK  | SALES      |<br>| CLARK  | RESEARCH   |<br>| CLARK  | ACCOUNTING |<br>| SCOTT  | OPERATIONS |<br>| SCOTT  | SALES      |<br>| SCOTT  | RESEARCH   |<br>| SCOTT  | ACCOUNTING |<br>| KING   | OPERATIONS |<br>| KING   | SALES      |<br>| KING   | RESEARCH   |<br>| KING   | ACCOUNTING |<br>| TURNER | OPERATIONS |<br>| TURNER | SALES      |<br>| TURNER | RESEARCH   |<br>| TURNER | ACCOUNTING |<br>| ADAMS  | OPERATIONS |<br>| ADAMS  | SALES      |<br>| ADAMS  | RESEARCH   |<br>| ADAMS  | ACCOUNTING |<br>| JAMES  | OPERATIONS |<br>| JAMES  | SALES      |<br>| JAMES  | RESEARCH   |<br>| JAMES  | ACCOUNTING |<br>| FORD   | OPERATIONS |<br>| FORD   | SALES      |<br>| FORD   | RESEARCH   |<br>| FORD   | ACCOUNTING |<br>| MILLER | OPERATIONS |<br>| MILLER | SALES      |<br>| MILLER | RESEARCH   |<br>| MILLER | ACCOUNTING |<br>+——–+————+</p><p>没有任何条件限制 14 *4 &#x3D; 56</p><p>当两张表进行连接查询，没有任何条件限制时候，最终的查询条数，是两张表条数的乘积，这种现象</p><p>叫笛卡尔积现象；</p><p>如何避免笛卡尔积现象：那就是连接时加条件</p><p>满足条件的记录筛选出来</p><p>mysql&gt; select ename,dname from emp,dept where emp.deptno &#x3D; dept.deptno;<br>+——–+————+<br>| ename  | dname      |<br>+——–+————+<br>| SMITH  | RESEARCH   |<br>| ALLEN  | SALES      |<br>| WARD   | SALES      |<br>| JONES  | RESEARCH   |<br>| MARTIN | SALES      |<br>| BLAKE  | SALES      |<br>| CLARK  | ACCOUNTING |<br>| SCOTT  | RESEARCH   |<br>| KING   | ACCOUNTING |<br>| TURNER | SALES      |<br>| ADAMS  | RESEARCH   |<br>| JAMES  | SALES      |<br>| FORD   | RESEARCH   |<br>| MILLER | ACCOUNTING |<br>+——–+————+</p><p>思考：最终查询的结果是14条 但是匹配的过程中匹配的次数没有减少</p><p>给表起别名 同时加条件</p><p>mysql&gt; select e.ename,d.dname from emp e,dept d  where e.deptno &#x3D; d.deptno;<br>+——–+————+<br>| ename  | dname      |<br>+——–+————+<br>| SMITH  | RESEARCH   |<br>| ALLEN  | SALES      |<br>| WARD   | SALES      |<br>| JONES  | RESEARCH   |<br>| MARTIN | SALES      |<br>| BLAKE  | SALES      |<br>| CLARK  | ACCOUNTING |<br>| SCOTT  | RESEARCH   |<br>| KING   | ACCOUNTING |<br>| TURNER | SALES      |<br>| ADAMS  | RESEARCH   |<br>| JAMES  | SALES      |<br>| FORD   | RESEARCH   |<br>| MILLER | ACCOUNTING |<br>+——–+————+<br>14 rows in set (0.00 sec)</p><p>上面的是92语法</p><p>注意：通过笛卡尔积现象得出，表的连接次数越多，效率越低</p><p>2.5</p><p>内连接之等值连接</p><p>查询内个员工所在的部门名称显示员工名和部门名</p><p>将emp表和dept表进行连接，条件是e.deptno &#x3D; d.deptno</p><p>SQL99语法：</p><p>select</p><p>e.ename,d.dname </p><p>from </p><p>emp e</p><p>join</p><p>dept d</p><p>on</p><p>e.deptno &#x3D; d.deptno;</p><p>join…on…</p><p>mysql&gt; select * from salgrade;<br>+——-+——-+——-+<br>| GRADE | LOSAL | HISAL |<br>+——-+——-+——-+<br>|     1 |   700 |  1200 |<br>|     2 |  1201 |  1400 |<br>|     3 |  1401 |  2000 |<br>|     4 |  2001 |  3000 |<br>|     5 |  3001 |  9999 |<br>+——-+——-+——-+<br>5 rows in set (0.00 sec)</p><p>mysql&gt; select * from emp;<br>+——-+——–+———–+——+————+———+———+——–+<br>| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |<br>+——-+——–+———–+——+————+———+———+——–+<br>|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |    NULL |     20 |<br>|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |<br>|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |<br>|  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |<br>|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |<br>|  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |<br>|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |<br>|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 |<br>|  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 |<br>|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |<br>|  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 |<br>|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 |<br>|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 |<br>|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |<br>+——-+——–+———–+——+————+———+———+——–+<br>14 rows in set (0.00 sec)</p><h2 id="Innerjoin"><a href="#Innerjoin" class="headerlink" title="Innerjoin"></a>Innerjoin</h2><p>mysql&gt; select e.sal,e.ename,s.grade from emp e join salgrade s on e.sal between s.losal and s.hisal;<br>+———+——–+——-+<br>| sal     | ename  | grade |<br>+———+——–+——-+<br>|  800.00 | SMITH  |     1 |<br>| 1600.00 | ALLEN  |     3 |<br>| 1250.00 | WARD   |     2 |<br>| 2975.00 | JONES  |     4 |<br>| 1250.00 | MARTIN |     2 |<br>| 2850.00 | BLAKE  |     4 |<br>| 2450.00 | CLARK  |     4 |<br>| 3000.00 | SCOTT  |     4 |<br>| 5000.00 | KING   |     5 |<br>| 1500.00 | TURNER |     3 |<br>| 1100.00 | ADAMS  |     1 |<br>|  950.00 | JAMES  |     1 |<br>| 3000.00 | FORD   |     4 |<br>| 1300.00 | MILLER |     2 |<br>+———+——–+——-+</p><p>条件不是一个等量关系 成为非等值连接；</p><p>2.7 内连接之自联结</p><p>案例：查询员工的上级领导，要求显示员工名对应的领导名</p><p>mysql&gt; select a.ename worker,b.ename boss from emp a join emp b on a.mgr &#x3D; b.empno;<br>+——–+——-+<br>| worker | boss  |<br>+——–+——-+<br>| SMITH  | FORD  |<br>| ALLEN  | BLAKE |<br>| WARD   | BLAKE |<br>| JONES  | KING  |<br>| MARTIN | BLAKE |<br>| BLAKE  | KING  |<br>| CLARK  | KING  |<br>| SCOTT  | JONES |<br>| TURNER | BLAKE |<br>| ADAMS  | SCOTT |<br>| JAMES  | BLAKE |<br>| FORD   | JONES |<br>| MILLER | CLARK |<br>+——–+——-+</p><p>一张表 一个别名叫A 一个别名叫B</p><p>以上就是内连接中的自联结 </p><h2 id="外连接："><a href="#外连接：" class="headerlink" title="外连接："></a>外连接：</h2><p>内连接的特点是完全能够匹配上这个条件的数据查询出来。</p><p>select</p><p>e.ename,d.dname </p><p>from </p><p>emp e</p><p>rightjoin</p><p>dept d</p><p>on</p><p>e.deptno &#x3D; d.deptno;</p><p>right代表什么：表是将join关键字右边的整张表看成主要</p><p>表，主要是为了将这张表的数据显示出来，捎带</p><p>关联右边的表；</p><p>在外连接中表与表中存在主次关系 内连接中的表示平等的关系</p><p>带有right的是右外连接，又叫右连接</p><p>带有right的是左外连接，又叫左连接</p><p>左右连接是可以相互转化的；</p><p>外连接的查询结果条数一定是大于内连接查询结果条数的；</p><p>案例：查询每个员工的上级领导，要显示所有员工的名字和领导名字</p><p>mysql&gt; select a.ename,b.ename from emp a left join emp b on a.mgr &#x3D; b.empno;<br>+——–+——-+<br>| ename  | ename |<br>+——–+——-+<br>| SMITH  | FORD  |<br>| ALLEN  | BLAKE |<br>| WARD   | BLAKE |<br>| JONES  | KING  |<br>| MARTIN | BLAKE |<br>| BLAKE  | KING  |<br>| CLARK  | KING  |<br>| SCOTT  | JONES |<br>| KING   | NULL  |<br>| TURNER | BLAKE |<br>| ADAMS  | SCOTT |<br>| JAMES  | BLAKE |<br>| FORD   | JONES |<br>| MILLER | CLARK |<br>+——–+——-+</p><h2 id="2-9-多表如何连接"><a href="#2-9-多表如何连接" class="headerlink" title="2.9 多表如何连接"></a>2.9 多表如何连接</h2><p>语法一：</p><p>select </p><p>​…</p><p>from</p><p>​A</p><p>join</p><pre><code>  B</code></pre><p>on</p><p>​a与b连接的条件</p><p>join</p><p>​C</p><p>on</p><p>​a和c的连接条件</p><p>join</p><p>​d</p><p>on </p><p>​a和d连接的条件</p><p>案例：找出每个部门的员工名称，同时找出每个员工的工资等级；</p><p>要求显示员工名 部门名 薪资等级</p><p>mysql&gt; select e.ename,d.dname,s.grade from emp e left join dept d on e.deptno &#x3D; d.deptno join salgrade s on e.sal between s.losal and s.hisal ;<br>+——–+————+——-+<br>| ename  | dname      | grade |<br>+——–+————+——-+<br>| SMITH  | RESEARCH   |     1 |<br>| ALLEN  | SALES      |     3 |<br>| WARD   | SALES      |     2 |<br>| JONES  | RESEARCH   |     4 |<br>| MARTIN | SALES      |     2 |<br>| BLAKE  | SALES      |     4 |<br>| CLARK  | ACCOUNTING |     4 |<br>| SCOTT  | RESEARCH   |     4 |<br>| KING   | ACCOUNTING |     5 |<br>| TURNER | SALES      |     3 |<br>| ADAMS  | RESEARCH   |     1 |<br>| JAMES  | SALES      |     1 |<br>| FORD   | RESEARCH   |     4 |<br>| MILLER | ACCOUNTING |     2 |<br>+——–+————+——-+</p><p>案例：找出每个员工的部门名称以及工资等级还有上级领导</p><p>mysql&gt; select e.ename,d.dname,s.grade,e2.ename from emp e join dept d on e.deptno &#x3D; d.deptno join salgrade s on e.sal between s.losal and s.hisal left join emp e2 on e.mgr &#x3D; e2.empno;<br>+——–+————+——-+——-+<br>| ename  | dname      | grade | ename |<br>+——–+————+——-+——-+<br>| SMITH  | RESEARCH   |     1 | FORD  |<br>| ALLEN  | SALES      |     3 | BLAKE |<br>| WARD   | SALES      |     2 | BLAKE |<br>| JONES  | RESEARCH   |     4 | KING  |<br>| MARTIN | SALES      |     2 | BLAKE |<br>| BLAKE  | SALES      |     4 | KING  |<br>| CLARK  | ACCOUNTING |     4 | KING  |<br>| SCOTT  | RESEARCH   |     4 | JONES |<br>| KING   | ACCOUNTING |     5 | NULL  |<br>| TURNER | SALES      |     3 | BLAKE |<br>| ADAMS  | RESEARCH   |     1 | SCOTT |<br>| JAMES  | SALES      |     1 | BLAKE |<br>| FORD   | RESEARCH   |     4 | JONES |<br>| MILLER | ACCOUNTING |     2 | CLARK |<br>+——–+————+——-+——-+</p><h2 id="22子查询"><a href="#22子查询" class="headerlink" title="22子查询"></a>22子查询</h2><p>什么是子查询？</p><p>select 语句中嵌套select语句，被嵌套的语句被称为子查询。</p><p>子查询可以出现在哪里？</p><p>select</p><p>…..(select)</p><p>from </p><p>…..(select)</p><p>where</p><p>……..(select)</p><p>3.3where子句中出现子查询</p><p>案例 ：找出比最低工资高的员工姓名和工资</p><p>select ename,sal from emp where sal &gt; (select min(sal) from emp);</p><p>3.4 from子句中的查询</p><p>注意：from后面的子查询可以将子查询的查询结果当一张临时表来看待；</p><p>案例：找出每个岗位的平均工资的工资等级</p><p>mysql&gt; select t.*,s.grade from (select job,avg(sal) as avgsal from emp group by job) t join salgrade s on t.avgsal between s.losal and s.hisal;<br>+———–+————-+——-+<br>| job       | avgsal      | grade |<br>+———–+————-+——-+<br>| CLERK     | 1037.500000 |     1 |<br>| SALESMAN  | 1400.000000 |     2 |<br>| MANAGER   | 2758.333333 |     4 |<br>| ANALYST   | 3000.000000 |     4 |<br>| PRESIDENT | 5000.000000 |     5 |<br>+———–+————-+——-+</p><p>非常值得注意的是 arg() 要重命名才能在no里面使用</p><p>3.5 select后面的子查询</p><p>注意：对于select后面的子查询来说，这个只能一次返回一个结果，多于一条，就会报错；</p><h2 id="23-合并查询结果集"><a href="#23-合并查询结果集" class="headerlink" title="23 合并查询结果集"></a>23 合并查询结果集</h2><p>案例：查询工作岗位是manager和salesman的员工</p><p>mysql&gt; select ename,job from emp where job in (‘manager’,’salesman’)<br>    -&gt; ;<br>+——–+———-+<br>| ename  | job      |<br>+——–+———-+<br>| ALLEN  | SALESMAN |<br>| WARD   | SALESMAN |<br>| JONES  | MANAGER  |<br>| MARTIN | SALESMAN |<br>| BLAKE  | MANAGER  |<br>| CLARK  | MANAGER  |<br>| TURNER | SALESMAN |<br>+——–+———-+<br>7 rows in set (0.00 sec)</p><p>mysql&gt; select ename,job from emp where job &#x3D; ‘manager’<br>    -&gt; union<br>    -&gt; select ename,job from emp where job &#x3D; ‘salesman’<br>    -&gt; ;<br>+——–+———-+<br>| ename  | job      |<br>+——–+———-+<br>| JONES  | MANAGER  |<br>| BLAKE  | MANAGER  |<br>| CLARK  | MANAGER  |<br>| ALLEN  | SALESMAN |<br>| WARD   | SALESMAN |<br>| MARTIN | SALESMAN |<br>| TURNER | SALESMAN |<br>+——–+———-+</p><p>其中union的效率高一些，对于表连接来说，每次连接一张新表，则匹配的次数满足笛卡尔积</p><p>但是union可以减少匹配的次数。在减少匹配次数的情况下，还能完成两个结果集的拼接</p><p>注意事项：union要求在进行结果集合并时要求两个结果集的列数相同。数据类型也要一样</p><h3 id="5、limit"><a href="#5、limit" class="headerlink" title="5、limit"></a>5、limit</h3><p>将查询结果集的一部分取出来，通常在分页查询中；</p><p>按照薪资降序，取排名前五的员工</p><p>mysql&gt; select sal from emp order by sal desc limit 0,5;<br>+———+<br>| sal     |<br>+———+<br>| 5000.00 |<br>| 3000.00 |<br>| 3000.00 |<br>| 2975.00 |<br>| 2850.00 |<br>+———+<br>5 rows in set (0.00 sec)</p><h2 id="limit-start-length"><a href="#limit-start-length" class="headerlink" title="limit start, length;"></a>limit start, length;</h2><p>注意的是limit是在order by 之后执行的</p><p>取出工作排在5-9的员工</p><p>每页显示3条记录</p><p>第一页 limit0，3</p><p>第二页 limit 3，3</p><p>第三页 limit 6，3</p><p>每页显示pageSize条数记录：</p><p>第pageNo页：limit （pageNo - 1)*pageSize ,PageSize</p><p>from where group_by having select order_by limit</p><h2 id="23-建表的语法"><a href="#23-建表的语法" class="headerlink" title="23 建表的语法"></a>23 建表的语法</h2><p>name varchar(15) default ‘m’;  设置默认值。</p><p>str_to_date(‘01-09-1998’,’%d-%m-%Y’);</p><p>date_format(date,’%Y&#x2F;%m&#x2F;%d’)</p><p>date 和datetime 的区别</p><p>date:年月日</p><p>datetime：年月日时分秒</p><p>now()：系统当前时间 并且时间带有时分秒信息</p><h3 id="修改：update"><a href="#修改：update" class="headerlink" title="修改：update"></a>修改：update</h3><h2 id="update-emp-set-ename-‘wanghaoyang’-where-ename-‘king’"><a href="#update-emp-set-ename-‘wanghaoyang’-where-ename-‘king’" class="headerlink" title="&amp;update&amp;  emp  &amp;set&amp;  ename &#x3D; ‘wanghaoyang’  &amp;where&amp; ename &#x3D; ‘king’;"></a>&amp;update&amp;  emp  &amp;set&amp;  ename &#x3D; ‘wanghaoyang’  &amp;where&amp; ename &#x3D; ‘king’;</h2><p>mysql&gt; update emp set ename&#x3D;’seaocean’ where ename &#x3D; ‘king’;<br>Query OK, 1 row affected (0.01 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0</p><p>mysql&gt; select * from emp;<br>+——-+———-+———–+——+————+———+———+——–+<br>| EMPNO | ENAME    | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |<br>+——-+———-+———–+——+————+———+———+——–+<br>|  7369 | SMITH    | CLERK     | 7902 | 1980-12-17 |  800.00 |    NULL |     20 |<br>|  7499 | ALLEN    | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |<br>|  7521 | WARD     | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |<br>|  7566 | JONES    | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |<br>|  7654 | MARTIN   | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |<br>|  7698 | BLAKE    | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |<br>|  7782 | CLARK    | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |<br>|  7788 | SCOTT    | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 |<br>|  7839 | seaocean | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 |<br>|  7844 | TURNER   | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |<br>|  7876 | ADAMS    | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 |<br>|  7900 | JAMES    | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 |<br>|  7902 | FORD     | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 |<br>|  7934 | MILLER   | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |<br>+——-+———-+———–+——+————+———+———+——–+<br>14 rows in set (0.00 sec)</p><h2 id="24-删除的语法"><a href="#24-删除的语法" class="headerlink" title="24 删除的语法"></a>24 删除的语法</h2><p>delete from emp where name ename &#x3D; ‘seaocean’;</p><p>insert语句可以一次插入多条记录？</p><p>insert into emp value (…),(…..),(…….);</p><p>快速复制表</p><p>create table emp2 as select * from emp; 可以完成表的快速赋值</p><p>很少用 学个乐 &#x2F;&#x2F;记录时可以重复的</p><p>快速删除表内的数据：</p><p>delete语句的原理：只是删除记录的指针但是不会清空磁盘中的数据，其实还是可以回滚的。</p><p>start transaction；开启事务</p><p>rollback ；回滚</p><p>删除效率比较低。</p><p>快速删除的方法：truncate</p><p>这种删除效率比较好，表被一次截断，物理删除。</p><p>缺点：不支持回滚</p><p>优点：高效</p><p>使用truncate之前一定要警告客户</p><h2 id="25对表结构的增删查改-可以使用使用sqlyog"><a href="#25对表结构的增删查改-可以使用使用sqlyog" class="headerlink" title="25对表结构的增删查改 可以使用使用sqlyog"></a>25对表结构的增删查改 可以使用使用sqlyog</h2><p>实际开发中很少使用表结构的修改</p><p>开放中修改表结构的代价很高</p><p>动表的结构就需要动大量的java代码 这样的责任应该由设计人员承担</p><p>如果真的要修改 可以使用程序</p><p>修改表结构不需要java 不是java的范畴</p><h2 id="26-创建表的时候加入约束："><a href="#26-创建表的时候加入约束：" class="headerlink" title="26 创建表的时候加入约束："></a>26 创建表的时候加入约束：</h2><p>什么是约束？</p><p>约束对应的英语单词是constraint</p><p>在创建表的时候 我们可以在表中的一个字段加上一些约束，来保证这个表中的数据完整性，有效性！！！</p><p>约束作用就是为了保证：表中的数据有效；</p><p>约束的一些形式：</p><p>​not null;非空</p><p>​unique;唯一</p><p>​primary key;主键</p><p>​foreign key;外键</p><p>实例：</p><p>create table students(</p><p>studentno int not null,</p><p>score int</p><p>)</p><h3 id="小插曲"><a href="#小插曲" class="headerlink" title="小插曲"></a>小插曲</h3><p>xxx.sql这种文件被成为sql脚本文件</p><p>sql脚本文件中的编写的大量的sql语句。我们执行的时候，该文件中的sql语句会全部执行！ </p><p>批量的执行的sql，可以使用sql脚本文件。在mysql中怎么使用脚本文件呢？</p><p>在你实际工作中，第一天到了公司，项目经理会给你一个sql文件，source一下在自己的数据库中就会出现这些数据</p><p>联合唯一性：要求name和email两个字段联合起来具有唯一性</p><p>create table emp(</p><p>id int,</p><p>name varchar(15),</p><p>email varchar(30);</p><p>unique(name,email)</p><p>);</p><p>此时是name和email联合起来唯一；</p><p>注意：约束直接加到列后面的叫列级约束 如果没有放在列后面的叫表级约束</p><p>什么时候使用表级约束？</p><p>需要给多个字段联合起来进行约束的叫标记约束。</p><p>not null只有列级约束，没有标记约束的语法。</p><p>在mysql中not noll unique 和primary是等价的； 在甲骨文中是不能这样的</p><h1 id="27-主键约束"><a href="#27-主键约束" class="headerlink" title="27 主键约束"></a>27 主键约束</h1><p>主键约束的相关术语：</p><p>主键字段：添加了主键约束的字段 </p><p>主键值：主键的值 </p><p>主键约束：主键的约束</p><p>什么是主键 有什么用处？</p><p>主键值是每一行记录的唯一标识</p><p>主键值是每一行记录的身份证</p><p>注意：任何一张表都应该有i一个主键，没有主键表无效</p><p>主键的特征：主键具有唯一性，不可重复性</p><p>create students(</p><p>name varchar(15)，</p><p>stdno bigint primary key,</p><p>score int</p><p>);</p><p>主键可以使用标记约束</p><p>create students(</p><p>name varchar(15)，</p><p>stdno bigint ,</p><p>score int,</p><p>primary(stdno,score)</p><p>);</p><h2 id="28-外键"><a href="#28-外键" class="headerlink" title="28 外键"></a>28 外键</h2><p>create t_class(</p><p>classno int primary key;</p><p>classname varchar(20)</p><p>);</p><p>create students(</p><p>name varchar(20),</p><p>classno int,</p><p>foreign key(classno) reference t_class(classno)</p><p>)</p><h2 id="29-存储引擎"><a href="#29-存储引擎" class="headerlink" title="29 存储引擎"></a>29 存储引擎</h2><p>innoDB</p><p>myisam</p><p>momery</p><h2 id="30-事务："><a href="#30-事务：" class="headerlink" title="30 事务："></a>30 事务：</h2><p>事务开：start transaction</p><p>事务结束：rollback        commit</p><p>事务具有四条性质：</p><p>A 原子性</p><p>B 一致性</p><p>I 隔离性</p><p>D 持久性  </p><p>重点研究一下事务的隔离性：</p><p>隔离涉及到隔离级别 一共有四个隔离级别</p><p>​1 读未提交 read uncommitted</p><p>事务a可以读到事务b未提交的数据，这种隔离可能读到脏数据。这种隔离级别一般是理论上的。</p><p>​2 读已提交 read committed </p><p><em>oracle</em>的默认隔离级别就是读已提交</p><p>不可重复读 一个事务里面可能两次读到的数据不同</p><p>解决了脏读但是不可重复读取数据，</p><p>​3 可重复读 repeatable read 提交之后也读不到 读的都是开启事务时的数据</p><p>可重复读解决了不可重复读的问题，但是可能出现幻影读 每次读的数据都是幻象，不真实</p><p>​4 序列化 serializable</p><p>最高的隔离级别，效率最低。解决了所有的问题。种族隔离级别表示事务排队，不能并行。</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p> 什么是索引？</p><p>索引是在数据库的字段上添加的，是为了提高查询效率存在的一种机制。一张表的一个字段可以添加一个索引，当然，多个字段联合起来也可以添加索引。索引相当于一本书的目录，是为了缩小扫描范围而存在的一种机制。</p><p>加索引可以提高效率 但是要视情况而定。</p><p>在mysql数据库中索引也是需要排序的，并且这个索引的排序和TREESET数据结构相同。TreeSet底层是一个自平衡的二叉树！在mysql当中是一个B-Tree数据结构。</p><p>索引的实现原理：</p><p>提示：在任何一个数据库中主键会自动添加索引对象，id字段上有索引，以为id是pk的，另外mysql当中一个字段如果有unique约束的话，也会自动创建索引对象。在任何数据库中，任何一张表的任何一个记录都在硬盘上存储都有物理存储编号。在mysql当中，索引是一个单独的对象，不同的存储引擎以不同的形式存在，在myisam存储引擎中索引存在于一个.MYI文件中。在innodb存储引擎中索引存储在一个逻辑名称叫做tablespace的当中。在memory中存储在内存中，不管索引存储在哪里，索引在mysql中是一种树的形式纯在</p><p>在什么情况下添加索引：</p><p>​条件一：数据量庞大 和硬件情况有关系</p><p>​条件二：这个字段经常出现在where后面 常常在条件子句中出现</p><p>​条件三：该字段很少的DML操作(insert delete update)</p><p>​不建议随意添加索引，建议通过unique键来查 效率高一些</p><p>索引怎么创建？索引怎么删除？语法是什么？</p><p>create index emp_ename_index on emp(ename);</p><p>drop index emp_ename_index on emp;</p><p>索引有时候会失效，什么时候会失效呢？</p><h4 id="失效一"><a href="#失效一" class="headerlink" title="失效一"></a>失效一</h4><p>select * from emp where name like ‘%T’;</p><p>ename 上即使添加了索引，也不会查索引</p><p>原因是模糊查询当中以%开头了</p><p>尽量避免模糊查询的时候以‘%’开始</p><p>这是一种优化的手段</p><h4 id="失效二"><a href="#失效二" class="headerlink" title="失效二"></a>失效二</h4><p>使用or会失效 如果使用or要求两边都要有索引 才会使用索引 不然会失效</p><p>这是玩什么不建议使用or的原因</p><h4 id="失效三"><a href="#失效三" class="headerlink" title="失效三"></a>失效三</h4><p>使用符合索引的时候，没有使用左侧的列的时候 索引会失效</p><h4 id="失效四"><a href="#失效四" class="headerlink" title="失效四"></a>失效四</h4><p>在where中索引列参加了运算，索引失效。</p><h4 id="失效五"><a href="#失效五" class="headerlink" title="失效五"></a>失效五</h4><p>在where中索引使用了函数；单列函数</p><h3 id="索引的分类："><a href="#索引的分类：" class="headerlink" title="索引的分类："></a>索引的分类：</h3><p>索引是mysql数据库进行优化的重要手段</p><h1 id="视图-view"><a href="#视图-view" class="headerlink" title="视图(view)"></a>视图(view)</h1><p>视图是什么？</p><p>view站在不同的角度看同一份数据</p><h4 id="创建视图对象的方法？"><a href="#创建视图对象的方法？" class="headerlink" title="创建视图对象的方法？"></a>创建视图对象的方法？</h4><p>create view emp_view as select * from emp; 和复制有些相似</p><h4 id="删除视图对象的方法？"><a href="#删除视图对象的方法？" class="headerlink" title="删除视图对象的方法？"></a>删除视图对象的方法？</h4><p>drop view emp_view;</p><p>注意：只有DQL语句可以view的形式创建</p><h4 id="有了视图可以做什么？"><a href="#有了视图可以做什么？" class="headerlink" title="有了视图可以做什么？"></a>有了视图可以做什么？</h4><p>对视图进行增删改查会导致原表被操作，视图是用来简化sql的</p><p>将常用的sql语句，用view保存起来。retrive（检索） CRUD</p><p>DBA 授权语句</p><p>导入导出命令</p><p>​导出Dos下使用： mysqldump mybase &gt;C:\mybase.sql -uroot -pwhy123456</p><p>​导入：source   要在库内</p><p>三范式</p><p>第一范式：每个表都要有主键，并且每一个字段都要有原子性 不可再分； 比如电话号码和邮箱地址要分为两个</p><p>第二范式：建立在第一范式的基础上，要求所有非主键字段完全依赖主键 不要依赖部分主键。一个表只写一个对象的内容，要解耦合。使用<em>三张表表示多对多的关系 如：教师表 学生表 和教师学生关系表</em>   单一主键满足完全依赖</p><h2 id="多对多-三张表-关系表两个外键"><a href="#多对多-三张表-关系表两个外键" class="headerlink" title="多对多 三张表 关系表两个外键"></a>多对多 三张表 关系表两个外键</h2><p>第三范式：建立在第二范式的基础上，要求使用的非主键字段必须直接依赖主键，不能传递依赖</p><h2 id="一对多-两张表-多的表加外键"><a href="#一对多-两张表-多的表加外键" class="headerlink" title="一对多 两张表  多的表加外键"></a>一对多 两张表  多的表加外键</h2><p>一对一有时候要拆分表 一对一 外键唯一</p><h2 id="for-updata-行级锁-又叫-悲观锁-不许别的线程修改select的行记录"><a href="#for-updata-行级锁-又叫-悲观锁-不许别的线程修改select的行记录" class="headerlink" title="for updata; 行级锁 又叫 悲观锁 不许别的线程修改select的行记录"></a>for updata; 行级锁 又叫 悲观锁 不许别的线程修改select的行记录</h2><p>乐观锁支持多线程 悲观锁不支持多线程 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-sql的分类&quot;&gt;&lt;a href=&quot;#1-sql的分类&quot; class=&quot;headerlink&quot; title=&quot;#1.sql的分类&quot;&gt;&lt;/a&gt;#1.sql的分类&lt;/h2&gt;&lt;p&gt;&amp;#x2F;*&lt;br&gt;DDL 数据定义语言 create&#92;alter 修改结构&#92;drop</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>docker</title>
    <link href="http://example.com/2024/05/22/docker/"/>
    <id>http://example.com/2024/05/22/docker/</id>
    <published>2024-05-22T08:33:06.000Z</published>
    <updated>2024-05-22T08:33:06.791Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="docker介绍"><a href="#docker介绍" class="headerlink" title="docker介绍"></a>docker介绍</h2><ul><li>docker的应用场景？</li><li>开发–运维的人员角色？？<ul><li>docker</li><li>devOps 开发工程师</li></ul></li><li>docker的三要素<ul><li>container 容器</li><li>images 镜像</li><li>repository 仓库 ： 就是存放一堆容器的地方，我们可以把镜像发布到仓库中，需要的时候再从仓库中拉下来就可以了</li></ul></li></ul><h2 id="docker容器的一些操作"><a href="#docker容器的一些操作" class="headerlink" title="docker容器的一些操作"></a>docker容器的一些操作</h2><ul><li><p>docker run xxx 运行某个容器</p></li><li><p>docker images 查看docker中的镜像</p></li><li><p>-i 即stdin（标准输入流）<br>-t：开启一个伪终端<br>-d：放到后台运行</p><p>-e ：传入变量。</p><p>-p：将容器端口转发到端口 </p></li><li><p>ctrl + p + q 不停止退出</p></li><li><p>还可以重新启动</p></li><li><p>docker rmi 删除镜像</p></li><li><p>docker stop 可以停止容器</p></li><li><p>docker rm -f images 强制删除</p></li><li><p>docker ps -q -a    ： -q 静默模式 只显示编号 -a all</p></li><li><p>docker logs id 查看一些进程的日志</p></li><li><p>docker exec -it id &#x2F;bin&#x2F;bash 可以重新和id为${id}的容器交互</p></li><li><p>attach 直接进入容器启动命令的终端，不会启动新的进程 用exit退出 会导致容器的停止</p></li><li><p>exec实在容器中打开新的终端，并且可以启动新的进程，用exit退出不会导致容器的停止</p></li><li><p>从docker容器内拷贝文件到本地主机中 </p><ul><li>docker cp id:容器内路径 目的主机的路径     eg: docker cp dklajwdk4564dd:&#x2F;tmp&#x2F;a.txt  &#x2F;save</li></ul></li><li><p>导入和导出容器</p><ul><li>export 导出容器的内容流作为一个tar归档文件          docker export dhwhdd1213dw &gt; abcd.tar</li><li>import 从tar包中的内容创建一个新的文件系统再导入为镜像       cat abcd.tar | docker import - 镜像用户 &#x2F; 镜像名:镜像版本号</li></ul></li></ul><h2 id="docker的commmit镜像加强命令"><a href="#docker的commmit镜像加强命令" class="headerlink" title="docker的commmit镜像加强命令"></a>docker的commmit镜像加强命令</h2><ul><li>如何自己创建一个镜像文件<ul><li>案例<ol><li>docker commit 提交容器副本使之成为一个新的镜像</li><li>docker commit -m “提交的描述信息” -a “作者” 容器的id 要创建的目标镜像名</li></ol></li></ul></li></ul><h2 id="使用docker"><a href="#使用docker" class="headerlink" title="使用docker"></a>使用docker</h2><ul><li><p>如何安装docker</p><ul><li>dockers可以在任何操作系统中使用但是教学中使用的是Linux 所以大家还是使用VMware 安装CentOS</li><li>通过yum安装docker</li><li>yum list installed | grep docker 产看之前是否安装了docker</li><li>yum remove docker.x86_64 卸载docker</li><li>yum install docker -y 安装docker</li><li><img src="https://s1.328888.xyz/2022/07/11/L4Mlw.png" alt="L4Mlw.png"></li></ul></li><li><p>启动docker</p><ul><li>systemctl start docker</li></ul></li><li><p>停止docker</p><ul><li>systemctl stop docker</li></ul></li><li><p>重启</p><ul><li>systemctl restart docker</li></ul></li><li><p>查看docker的状态</p><ul><li>ps -ef | grep docker</li></ul></li><li><p>systemctl status docker ： 查看docker现在的状态</p></li><li><p>docker info 查看docker的信息</p></li><li><p>docker 显示一些命令 （使用的辅助）</p></li><li><p>docker command –help 产看某个command的使用详情</p></li><li><p>docker的运行机制</p><ul><li>docker 服务启动-&gt; 下载镜像 -&gt; 启动该镜像得到一个容器 -&gt; 容器里运行这我们想要的程序</li></ul></li><li><p>第一个docker容器</p><ul><li><p>根据docker的运行机制，我们将按照如下的步骤运行第一个docker容器</p><ul><li><p>具体步骤</p><ol><li><p>启动docker</p></li><li><p>下载一个镜像，docker运行一个容器前需要在本地存在有对应的镜像文件，如果镜像不存在本地，Docker就会在镜像库中下载（默认是DockerHub公共注册服务器中的仓库 <a href="https://hub.docker.com)/">https://hub.docker.com）</a></p><p>CentOS环境下如何下载镜像呢？</p><ul><li>从docker hub官网上搜索镜像： docker search tomcat 查找镜像</li><li>如何下载呢？： docker pull tomcat 下载tomcat</li><li>tips：docker images可以查看已安装的镜像文件</li></ul></li><li><p>运行镜像 docker run tomcat</p></li></ol></li></ul></li></ul></li><li><p>docker安装tomcat</p><ul><li><p>docker pull billygoo&#x2F;tomcat8-jdk</p></li><li><p>docker run -d -p 8080:8080 –name tomcat8 billygoo&#x2F;tomcat8-jdk</p><p>注意最新的tomcat需要修改webapps文件夹</p></li></ul></li><li><p>docker安装mysql</p><ul><li>docker pull mysql:5.7</li><li>docker run -p 3306:3306 -e MYSQL_ROOT_PASSWORD&#x3D;123456 -d mysql:5.7 启动容器</li></ul><p></p></li><li><p>将自己的镜像发布到阿里云上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker login --username=aliyun1878443127 registry.cn-hangzhou.aliyuncs.com</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/seaocean/test_version:[镜像版本号]</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker push registry.cn-hangzhou.aliyuncs.com/seaocean/test_version:[镜像版本号]</span></span><br></pre></td></tr></table></figure></li><li><p>docker私有库 </p><ul><li>docker pull registry</li><li>docker run -d -p 5000:5000 -v &#x2F;seaocean&#x2F;myapps:&#x2F;temp&#x2F;requestry –privileged&#x3D;true registry<ul><li>注意容器中没有IP地址</li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker&quot;&gt;&lt;a href=&quot;#Docker&quot; class=&quot;headerlink&quot; title=&quot;Docker&quot;&gt;&lt;/a&gt;Docker&lt;/h1&gt;&lt;h2 id=&quot;docker介绍&quot;&gt;&lt;a href=&quot;#docker介绍&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>github</title>
    <link href="http://example.com/2024/05/22/github/"/>
    <id>http://example.com/2024/05/22/github/</id>
    <published>2024-05-22T08:33:06.000Z</published>
    <updated>2024-05-22T08:33:06.792Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ssh-keygen-t-rsa-C-“-x32-50-x37-x33-51-52-x39-x38-x31-55-x40-x71-x71-x2e-x63-x6f-109-“-生成一个密钥"><a href="#ssh-keygen-t-rsa-C-“-x32-50-x37-x33-51-52-x39-x38-x31-55-x40-x71-x71-x2e-x63-x6f-109-“-生成一个密钥" class="headerlink" title="ssh-keygen -t rsa -C “&#x32;&#50;&#x37;&#x33;&#51;&#52;&#x39;&#x38;&#x31;&#55;&#x40;&#x71;&#x71;&#x2e;&#x63;&#x6f;&#109;“ 生成一个密钥"></a>ssh-keygen -t rsa -C “<a href="mailto:&#x32;&#50;&#x37;&#x33;&#51;&#52;&#x39;&#x38;&#x31;&#55;&#x40;&#x71;&#x71;&#x2e;&#x63;&#x6f;&#109;">&#x32;&#50;&#x37;&#x33;&#51;&#52;&#x39;&#x38;&#x31;&#55;&#x40;&#x71;&#x71;&#x2e;&#x63;&#x6f;&#109;</a>“ 生成一个密钥</h3><h3 id="1-添加文件git-add"><a href="#1-添加文件git-add" class="headerlink" title="(1) 添加文件git add ."></a>(1) 添加文件git add .</h3><h3 id="2-提交到本地库-git-commit-m-“一些说明文字”"><a href="#2-提交到本地库-git-commit-m-“一些说明文字”" class="headerlink" title="(2)提交到本地库 git commit -m “一些说明文字”"></a>(2)提交到本地库 git commit -m “一些说明文字”</h3><h3 id="3-连接远端仓库-git-remote-add-origin-SSH"><a href="#3-连接远端仓库-git-remote-add-origin-SSH" class="headerlink" title="(3)连接远端仓库 git remote add origin SSH"></a>(3)连接远端仓库 git remote add origin SSH</h3><h3 id="4-将远端的文件拉回来git-pull-–rebase-origin-master"><a href="#4-将远端的文件拉回来git-pull-–rebase-origin-master" class="headerlink" title="(4)将远端的文件拉回来git pull –rebase origin master"></a>(4)将远端的文件拉回来git pull –rebase origin master</h3><h3 id="5-将本地库的文件推到远端git-push-u-origin-master"><a href="#5-将本地库的文件推到远端git-push-u-origin-master" class="headerlink" title="(5)将本地库的文件推到远端git push -u origin master"></a>(5)将本地库的文件推到远端git push -u origin master</h3><h3 id="获取将远端文件git-clone-xxxxxxx"><a href="#获取将远端文件git-clone-xxxxxxx" class="headerlink" title="获取将远端文件git clone xxxxxxx"></a>获取将远端文件git clone xxxxxxx</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;ssh-keygen-t-rsa-C-“-x32-50-x37-x33-51-52-x39-x38-x31-55-x40-x71-x71-x2e-x63-x6f-109-“-生成一个密钥&quot;&gt;&lt;a href=&quot;#ssh-keygen-t-rsa-C-“-x32-50</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>servletLearn</title>
    <link href="http://example.com/2024/05/22/servletLearn/"/>
    <id>http://example.com/2024/05/22/servletLearn/</id>
    <published>2024-05-22T08:33:06.000Z</published>
    <updated>2024-05-22T08:33:06.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JAVAWEB"><a href="#JAVAWEB" class="headerlink" title="JAVAWEB"></a>JAVAWEB</h1><h1 id="1-servlet："><a href="#1-servlet：" class="headerlink" title="1  servlet："></a>1  servlet：</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注意一下的路径以斜杠开始带享目名不需要添加端口号和IP和协议名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/oa/login.html&quot;</span>&gt;</span>user login<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>界面层：通常有美工来完成  html javascript  </li><li>逻辑层：通常由程序员来完成 javaBean…servlet spring  </li><li>数据层：数据库分析员来完成  jdbc jdbc-odbc  </li><li>动态的数据需要JDBC技术来实现 我们需要写java程序的通信原理是什么样的呢？</li><li>创建一个servlet然后再在配置文件内将其部署</li></ul><p><img src="https://s1.328888.xyz/2022/05/05/hb6R7.png" alt="hb6R7.png"></p><p>webApp是具有独立性的一方 </p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><ul><li><p>servlet规定了：</p><ul><li>一个合格的webapp应该是这样的文件目录结构</li></ul><ul><li>一个合格的webapp应该是怎样的配置文件</li><li>一个合格的webapp应该将配置文件存放在哪里</li><li>一个合格的webappjava程序放在哪里</li></ul></li></ul><p>servlet规范是什么样的规范：</p><ul><li>遵寻servlet规范的webapp是可以放在WEB服务器中运行。</li><li>servlet规范了哪些接口<ul><li>规范了哪些接口</li><li>规范了那些类</li><li>规范了一个web应用中应该有哪些配置文件</li><li>规范了一个web应用中配置文件的名字</li><li>规范了一个web应用中配置文件的内容</li><li>规范了一个合法有效的webapp合法有效的目录结构因该是什么样的</li></ul></li></ul><h2 id="1-1-开发一个带有servlet的webapp"><a href="#1-1-开发一个带有servlet的webapp" class="headerlink" title="1.1  开发一个带有servlet的webapp"></a>1.1  开发一个带有servlet的webapp</h2><ul><li><p>开发步骤是怎样的？</p><ul><li><p>第一步：在webapp目录下新建一个目录，起名crm(这个crm就是webapp的名字) 当然也可以是其他名字 bank 此时创建的目录作为app的根目录存在</p></li><li><p>第二步：在根目录下创建一个WEB-INF</p><ul><li>这个目录的名字是严格规定的，写死的，无条件的，无理由的。</li></ul></li><li><p>第三步：创建一个classes文件夹，这个目录下存放的一定是.class文件</p></li><li><p>第四步：创建一个lib目录(非必须) 但是如果webapp需要第三方的jar文件时，将其放入此文件夹内</p></li><li><p>第五步：在WEB-INF目录下新建一个web.xml文件</p><ul><li><p>注意这个文件是必须的 xml文件就是配置文件记录了请求路径和servlet之间的关系 可以从root文件夹下拷贝没必要手写</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Welcome to Tomcat<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">     Welcome to Tomcat</span><br><span class="line">  <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>第六步：这个小java程序要实现java接口，</p><ul><li>接口不再jdk中，在webservice里面。</li></ul></li><li><p>第七步：在xml.class文件中编写配置信息，让”请求路径”和”servlet名”关联在一起</p><ul><li>这一步的专业名叫注册</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Welcome to Tomcat<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">     Welcome to Tomcat</span><br><span class="line">  <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--servlet描述信息--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>asdf<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这个位置是必须带有--包名的全限定名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.sea.hello<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!--servlet映射信息--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--这里也是谁编写 但是要和上面的一样--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>asdf<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这里需要一个路径 </span></span><br><span class="line"><span class="comment">唯一的要求是必须以斜杠开始</span></span><br><span class="line"><span class="comment">当前这个路径可以随便写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/bbls<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>第十步： 启动tomcat服务器</p></li><li><p>第十一步： 打开浏览器在浏览器上输入一个url</p></li></ul><h2 id="1-2-如何将webapp中的信息输入到浏览器中："><a href="#1-2-如何将webapp中的信息输入到浏览器中：" class="headerlink" title="1.2 如何将webapp中的信息输入到浏览器中："></a>1.2 如何将webapp中的信息输入到浏览器中：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">/*向控制台打印输出*/</span></span><br><span class="line">        System.out.println(<span class="string">&quot;hello servlet&quot;</span>);</span><br><span class="line">        <span class="comment">/*向浏览器打印输出*/</span></span><br><span class="line">        <span class="comment">//设置相应内容类型是普通文本或者是html代码                特别注意设置获取流对象之前设置才有效 不要放在后面</span></span><br><span class="line">        servletResponse.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> servletResponse.getWriter();</span><br><span class="line">        out.print(<span class="string">&quot;the people republic of china is forever, peace full around the world is forever&quot;</span>);</span><br><span class="line">        <span class="comment">/*浏览器是可以识别html代码的所以我们也可以输出一段html代码*/</span></span><br><span class="line">        out.print(<span class="string">&quot;&lt;br&gt;&lt;h1&gt;the TIANNAN door&lt;/h1&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-如何在servlet中连接数据库"><a href="#1-3-如何在servlet中连接数据库" class="headerlink" title="1.3 如何在servlet中连接数据库"></a>1.3 如何在servlet中连接数据库</h2><ul><li>在servlet中直接编写java代码即可（JDBC）      如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sea;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">studentsInfo</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            connection = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/mybase?serverTimezone=GMT&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;why123456&quot;</span>);</span><br><span class="line">            <span class="type">PreparedStatement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.prepareStatement(<span class="string">&quot;select empno,ename,sal from emp&quot;</span>);</span><br><span class="line">            set = statement.executeQuery();</span><br><span class="line"></span><br><span class="line">            servletResponse.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> servletResponse.getWriter();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(set.next())&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">empno</span> <span class="operator">=</span> set.getInt(<span class="string">&quot;empno&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">ename</span> <span class="operator">=</span> set.getString(<span class="string">&quot;ename&quot;</span>);</span><br><span class="line">                <span class="type">double</span> <span class="variable">sal</span> <span class="operator">=</span> set.getDouble(<span class="string">&quot;sal&quot;</span>);</span><br><span class="line">                out.print(empno+<span class="string">&quot;,&quot;</span>+ename+<span class="string">&quot;,&quot;</span>+sal+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (set != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    set.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ps != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ps.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-servlet对象的生命周期"><a href="#1-4-servlet对象的生命周期" class="headerlink" title="1.4 servlet对象的生命周期"></a>1.4 servlet对象的生命周期</h2><h2 id="1-5-在IDE中开发servlet程序"><a href="#1-5-在IDE中开发servlet程序" class="headerlink" title="1.5 在IDE中开发servlet程序"></a>1.5 在IDE中开发servlet程序</h2><ul><li>第一步：New project创建一个新的空的项目</li><li>第二步：新建一个新的module(javase)</li><li>第三步：让模块变成javaee的模块           (目录结构要符合webapp的规范)<ul><li>在module上点击右键，添加框架支持 Add framework support…</li><li>在弹出的窗口中选择webApplication，之后会自动生成合法的目录结构</li><li>重点需要注意的 生成的目录中有一个web目录这个目录就对应webapp的根目录</li></ul></li><li>第四步：根据web application中生成的jsp文件，这里先将其删除。</li><li>第五步：编写servlet(helloServlet)</li><li>第六步：编写servlet程序</li><li>第七步：在web.xml文件中注册你编写的servlet对象</li><li>第八步：创建一个html文件，提供一个超文本连接，发送请求，tomcat执行后台的studentServlet</li><li>第九步：让IDEA工具关联Tomcat服务器。关联的过程中将webapp部署到Tomcat服务器中<ul><li>IDEA右上角的小锤子：Add configuration</li><li>左上角加号，点击Tomcatserver-&gt;local</li><li>在上面的选项卡中有deployment(点击用以部署webapp)</li><li>修改进程上下文 写到直接的项目文件夹的名字</li><li>应用</li></ul></li><li>第十步：启动tomcat服务器<ul><li>debug模式可启动</li></ul></li><li>第十一步：打开浏览器</li></ul><h1 id="2-servlet生命周期："><a href="#2-servlet生命周期：" class="headerlink" title="2  servlet生命周期："></a>2  servlet生命周期：</h1><h2 id="2-1-什么是servlet的生命周期"><a href="#2-1-什么是servlet的生命周期" class="headerlink" title="2.1  什么是servlet的生命周期"></a>2.1  什么是servlet的生命周期</h2><ul><li><p>servlet对象什么时候创建</p></li><li><p>servlet对象什么时候销毁</p></li><li><p>servlet对象创建了几个</p></li><li><p>servlet对象的生命周期是指一个servlet从出生到死亡的全过程</p></li><li><h5 id="servlet对象有谁来维护呢？"><a href="#servlet对象有谁来维护呢？" class="headerlink" title="servlet对象有谁来维护呢？"></a>servlet对象有谁来维护呢？</h5></li><li><p>servlet对象有tomcat全权负责</p></li><li><p>tomcat服务器又被称为web容器</p></li><li><p>web容器来管理web的生死</p></li><li><h5 id="我们自己new的servlet对象是不受web容器管理的"><a href="#我们自己new的servlet对象是不受web容器管理的" class="headerlink" title="我们自己new的servlet对象是不受web容器管理的"></a>我们自己new的servlet对象是不受web容器管理的</h5></li><li><p>在servlet中加一个无参数的构造器测试可知服务器中不会实例化servlet对象</p></li><li><p>可以在启动之前创建对象但是需要在xml文件中填写整数</p></li><li><pre><code class="xml">&lt;load-on-startup&gt;0&lt;/load-on-startup&gt;内部的数值是一个优先级数 越小优先级越高<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">## 2.2 总结</span><br><span class="line"></span><br><span class="line">+ servlet是一个单实例的对象 （但是servlet不满足单例模式，我们称之为单例 因为tomcat只创建了一个实例 别人管不着）</span><br><span class="line">+ init和实例化只会进行一次 init还会在此处实例化一个对象 之后用户请求不会在进行init()函数了</span><br><span class="line">+ server是每次请求都会进行一次</span><br><span class="line">+ destory方法是在销毁之前调用的</span><br><span class="line">+ 服务器刚启动的时候默认是不会启动的 用户第一次请求的时候tomcat会调用无参构造方法创建一个实例</span><br><span class="line"></span><br><span class="line"># 3 适配器模式修改servlet</span><br><span class="line"></span><br><span class="line">+ **&lt;u&gt;*接口方法太多但是子类使用的方法不多？如何才能减少子类的代码量？*&lt;/u&gt;**</span><br><span class="line"></span><br><span class="line">  接口类---&gt;抽象类  实现了屏蔽效应</span><br><span class="line">  编写一个抽象类继承servlet接口实现了简化代码</span><br><span class="line"></span><br><span class="line">+ 思考一下：怎么进一步简化开发？</span><br><span class="line"></span><br><span class="line">  + 子类的init还能执行吗？</span><br><span class="line"></span><br><span class="line">    会，会默认调用父类的方法；</span><br><span class="line"></span><br><span class="line">模拟一下tomcat的代码：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">public class tomcat&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Class clazz = Class.forname(&quot;com.xxx.xxxx.xxxx.mySeriver&quot;);</span><br><span class="line">        Object obj = clazz.newInstance();</span><br><span class="line">        Servlet slt = (Servlet)obj;</span><br><span class="line">        </span><br><span class="line">        //创建一个Servletconfig实例化出来</span><br><span class="line">        </span><br><span class="line">        //调用servlet的init方法</span><br><span class="line">        slt.init(servletconfig);</span><br><span class="line">        //调用servlet的server方法</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><p>final可以阻止子类重写方法 但是如果想让子类可以自定义方法的话 可以在final修饰的方法中加入一个重载方法 并在类中申明重载的方法 这样子类可以覆写没有final修饰的方法达到自定义的效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> ServletConfig config;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> SerletException&#123;</span><br><span class="line">    <span class="built_in">this</span>.config = config;</span><br><span class="line">    <span class="built_in">this</span>.init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是模板方法设计模式</p><ul><li>用transient修饰的属性是不可以序列化的</li><li>ServletConfig是什么？<ul><li>是servlet规范中的一员，servletConfig是一个接口</li></ul></li><li>谁去实现这个接口？</li><li>servletconfig对象里面是什么呢？<ul><li>包装的信息是web.xml中<servlet></servlet>中的信息。</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>config<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.sea.ConfigTest<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--init-param可以初始化信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>driver<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/mybase?serverTimezone=GMT<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>config<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/config/a<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>以上servlet标签中的init-param 是初始化参数 会自动被toncat装载到ServletConfig中；</p><ul><li>可以用一下方法获取config里面的内容</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Enumeration&lt;String&gt; names = config.getInitParameterNames();</span><br><span class="line">        <span class="keyword">while</span>(names.hasMoreElements())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> names.nextElement();</span><br><span class="line">            writer.print(s+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> config.getInitParameter(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        writer.print(url);</span><br></pre></td></tr></table></figure></li><li><p>整个webapp的servletContext对象只有一个，被称为上下文对象或者环境</p></li><li><p>servletContext对象对应的是真个web.xml文件</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">context.log(<span class="string">&quot;吾剑未尝不利 借汝头一用&quot;</span>);</span><br><span class="line"><span class="comment">//为记录在tomcat的logs目录里</span></span><br></pre></td></tr></table></figure><p>注意：以后编写servlet类的时候，实际上不会去直接继承genericservlet类的，因为我们是B&#x2F;S的系统，这种系统使用HTTP超文本传输协议的，在servlet规范中提供了一个叫httpservlet的类。httpservlet是genericservlet的子类</p><h1 id="4-HttpServlet"><a href="#4-HttpServlet" class="headerlink" title="4 HttpServlet"></a>4 HttpServlet</h1><h2 id="4-1-http的结构"><a href="#4-1-http的结构" class="headerlink" title="4.1 http的结构"></a>4.1 http的结构</h2><ul><li>http请求协议包含四个部分：<ul><li>请求协议 浏览器-&gt;服务器<ul><li>请求行</li><li>请求头</li><li>空白行</li><li>请求体</li></ul></li><li>响应协议 服务器-&gt;浏览器<ul><li>状态行</li><li>响应头</li><li>空白行</li><li>响应体</li></ul></li></ul></li><li>http的具体报文</li></ul><h3 id="4-1-1-get-http"><a href="#4-1-1-get-http" class="headerlink" title="4.1.1  get http"></a>4.1.1  get http</h3><ul><li><p>响应头</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200            状态行</span><br><span class="line">Content-Type: text/html;charset=UTF-8   响应头</span><br><span class="line">Content-Length: 142</span><br><span class="line">Date: Sat, 07 May 2022 10:16:48 GMT</span><br><span class="line">Keep-Alive: timeout=20</span><br><span class="line">Connection: keep-alive</span><br><span class="line">空白行</span><br><span class="line">&lt;!DOCTYPE html&gt; 响应体</span><br><span class="line">&lt;html lang=&#x27;en&#x27;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&#x27;UTF-8&#x27;&gt;</span><br><span class="line">&lt;title&gt;from get servlet&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;&lt;h1&gt;from get servlet&lt;/h1&gt;&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>状态行<ul><li>第一部分：版本协议号 http&#x2F;1.1</li><li>第二部分：状态码 （HTTP协议中规定的响应状态号，不同的响应结果对应不同的号码）<ul><li>200 表示响应成功，正常结束</li><li>404 表示资源不存在，通常是路径错误，或者是路径正确但是服务器中的资源没有启动</li><li>405 表示前端发送的请求方式与后端处理方式不一致时发生的<ul><li>比如：前段是POST请求，后端的处理方式是get方式进行处理的</li></ul></li><li>500 表示服务器的程序出了异常，一般认为是服务器端的错误导致的</li></ul></li></ul></li><li>怎么查看协议的内容<ul><li>chrome F12</li></ul></li></ul></li></ul><h3 id="4-1-2-post-http"><a href="#4-1-2-post-http" class="headerlink" title="4.1.2 post http"></a>4.1.2 post http</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Request URL: http://localhost:8080/httptest/postservlet 请求行</span><br><span class="line">Request Method: POST请求头</span><br><span class="line">Status Code: 200 </span><br><span class="line">Remote Address: [::1]:8080</span><br><span class="line">Referrer Policy: strict-origin-when-cross-origin</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Length: 144</span><br><span class="line">Content-Type: text/html;charset=UTF-8</span><br><span class="line">Date: Sat, 07 May 2022 10:48:29 GMT</span><br><span class="line">Keep-Alive: timeout=20</span><br><span class="line">POST /httptest/postservlet HTTP/1.1</span><br><span class="line">Host: localhost:8080</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Length: 26</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">sec-ch-ua: &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Chromium&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;99&quot;</span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">sec-ch-ua-platform: &quot;Windows&quot;</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http://localhost:8080</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Referer: http://localhost:8080/httptest/index.html</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">空白行</span><br><span class="line">username: lisi&amp;password: 123请求体</span><br></pre></td></tr></table></figure><ul><li>请求行有三部分<ul><li>请求方式<ul><li>get</li><li>post</li><li>delete</li><li>put</li></ul></li><li>URI<ul><li>什么是uri？同一资源标识符。<ul><li>代表某个资源的名字，但是通过URI是定位的</li></ul></li><li>什么是URL？<ul><li>同一资源定位符</li></ul></li><li>URL包括URI</li></ul></li><li>http版本号</li></ul></li><li>请求头<ul><li>请求的主机</li><li>主机的端口号</li><li>浏览历史</li><li>平台信息</li><li>cookie等信息</li></ul></li><li>空白行<ul><li>空白行用来区分请求头和请求体</li></ul></li><li>请求体向服务器发送的具体数据</li></ul><h2 id="4-2-get请求和post请求有什么区别？"><a href="#4-2-get请求和post请求有什么区别？" class="headerlink" title="4.2  get请求和post请求有什么区别？"></a>4.2  get请求和post请求有什么区别？</h2><h3 id="4-2-1-结构差异"><a href="#4-2-1-结构差异" class="headerlink" title="4.2.1 结构差异"></a>4.2.1 结构差异</h3><ul><li>发送中的不同<ul><li>只有当你的form中method属性是post时，才是POST方式，其他的全是get方式</li></ul></li><li>get方式常用方式<ul><li>直接点击超链接</li><li>直接输入url访问website</li><li>使用form时标签中的method属性是get</li></ul></li><li>grt请求发送数据的时候 会挂在url后面，并且url后面会加一个?,?后面是数据。这样会导致返回的数据显示在url上。</li><li>post请求发送数据的时候在请求体中发送，不会回显到浏览器的地址栏中。</li><li>但是不管是post还是get它们的数据格式是完全相同的 不过是位置不同</li><li>get请求只能发送普通的字符串，并且发送的长度是有长度限制的。<ul><li>无法发送大数据量</li></ul></li><li>stop是可以发送任意类型的数据的，包括声音，视频，图像等等。</li><li>get请求在w3c中是这样描述的：get请求比较适合从服务端获取数据。</li><li>post请求在w3c中是这样描述的：post请求比较合适向服务器端传送。</li></ul><h3 id="4-2-2-安全性差异"><a href="#4-2-2-安全性差异" class="headerlink" title="4.2.2 安全性差异"></a>4.2.2 安全性差异</h3><ul><li>get请求是绝对安全的，因为get请求是从服务器中获取数据</li><li>post请求是相对危险的，如果提交的数据通过后门的方式进入到服务器中，服务器是很危险的。所以大部分时候post请求是需要监听的。</li><li>get支持缓冲  每次get请求时会现在浏览器缓存中寻找，找不到才会请求。<ul><li>有没有这样一种需求，不想要get走缓存？<ul><li>只要每一次的get的请求路径不同 路径后面加一个每时每刻变化的时间戳，每次的路径不同，浏览器就不走缓存了</li></ul></li></ul></li><li>post不支持缓存</li></ul><h2 id="4-3-Httpservlet源码分析"><a href="#4-3-Httpservlet源码分析" class="headerlink" title="4.3 Httpservlet源码分析"></a>4.3 Httpservlet源码分析</h2><ul><li><p>httpservlet是专门为http协议准备的。比GeneticServlet跟加适合HTTP写一下的的开发。</p></li><li><p>servlet在那个包下？</p><ul><li>jakarta.servlet.http.Httpservlet</li></ul></li><li><p>到目前为止我们接触了servlet规范中的哪些接口？</p><ul><li>servlet</li><li>servletContext</li><li>servletConfig</li><li>servletResponse</li><li>servletRequest</li><li>servletException</li></ul></li><li><p>http包下有哪些接口呢？</p><ul><li>HttpServlet</li><li>HttpservletResponse</li><li>HttpServletRequest</li></ul></li><li><p>HttpServletRequest中封装了哪些信息呢？</p><ul><li>简称request对象</li><li>封装了请求协议的所有内容</li></ul></li><li><p>总结：</p><ul><li>后端重写了doget方法，前端就要发送get请求</li><li>后端重写了dopost方法，前端就要发送getpost请求</li></ul></li><li><p>实操</p><ul><li>编写一个类直接继承HttpServlet</li><li>重写Doget和DoPost方法<ul><li>使用的时候一定记得删除super.do(post&#x2F;get)();</li></ul></li><li>将servlet类配置到xml文件中</li><li>准备前端的表单中(form表单),form指定请求路径即可</li><li>准备前端的页面：在form中指定请求路径</li></ul></li><li><p>关于一个web站点的欢迎页面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>login.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="4-4-HttpServletRequest详解"><a href="#4-4-HttpServletRequest详解" class="headerlink" title="4.4 HttpServletRequest详解"></a>4.4 HttpServletRequest详解</h2><ul><li><p>httpServletRequest是一个接口</p></li><li><p>是servlet规范的一员</p></li><li><p>父接口叫servletrequest</p><ul><li>Map&lt;String,String[]&gt; getParamentMap()</li><li>String getParamenter(String name) 最常用的</li><li>Servletrequest会记录用户使用时候提交的数据</li></ul></li><li><p>如何将一个请求的信息传递到两个Servlet中呢？</p></li></ul><h3 id="4-4-1-Servlet的转发机制"><a href="#4-4-1-Servlet的转发机制" class="headerlink" title="4.4.1 Servlet的转发机制"></a>4.4.1 Servlet的转发机制</h3><ul><li>能否在AServlet中创建一个BServlet的对象 然后调用BServlet对象的doGet方法，把request对象传过去？<ul><li>不可以，因为processor自己实例化的对象TomCat是不会对他进行管理的</li></ul></li><li>正确操作<ul><li>跳转到<ul><li>转发（一次请求）</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一步：获取请求转发器对象</span></span><br><span class="line">        <span class="comment">//相当于把/b包装到请求转发器中，实际上把下一个跳转的资源的路径告诉tomcat服务器</span></span><br><span class="line">        <span class="type">RequestDispatcher</span> <span class="variable">dispatcher</span> <span class="operator">=</span> req.getRequestDispatcher(<span class="string">&quot;/b&quot;</span>);</span><br><span class="line">        <span class="comment">//第二步：调用请求转发器RequestDispatcher的forward方法，进行转发</span></span><br><span class="line">        <span class="comment">//转发的时候，这两个参数很重要，request和response都是要传递给下一个资源的</span></span><br><span class="line">        dispatcher.forward(req,resp);</span><br><span class="line"></span><br><span class="line">其实第一步和第二步代码可以联合</span><br><span class="line">req.getRequestDispatcher(<span class="string">&quot;/b&quot;</span>).forward(req,resq);</span><br><span class="line"></span><br><span class="line">注意想要得到最终的页面需要输入的还是前序的url-pattern 但是最终显示的是后序的内容</span><br></pre></td></tr></table></figure><ul><li>该方法实现了 两个servlet的之间的通信</li><li>转发的下一个资源一定要是servlet吗？<ul><li>不是的，可以是任意的资源，需要注意的是路径的格式</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">parameter</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;name&quot;</span>);<span class="comment">//获取前端提交的参数</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> req.getAttribute(<span class="string">&quot;name&quot;</span>);   <span class="comment">//获取req.getAttribute(&quot;name&quot;,new String(&quot;hello&quot;));里面绑定的内容---&gt;hello</span></span><br></pre></td></tr></table></figure><h2 id="4-5-使用纯servlet做一个单表的CRUD操作"><a href="#4-5-使用纯servlet做一个单表的CRUD操作" class="headerlink" title="4.5  使用纯servlet做一个单表的CRUD操作"></a>4.5  使用纯servlet做一个单表的CRUD操作</h2><ul><li><p>使用纯servlet实现单表的增删查改</p></li><li><p>实现步骤</p><ul><li><p>1 创建一个数据库表</p></li><li><p>2  准备一套HTML页面</p><ul><li><p>把html表格准备好在链接中可以跑的通</p><ul><li><p>添加页面</p></li><li><p>修改页面</p></li><li><p>详情页面</p></li><li><p>欢迎页面</p></li><li><p>列表页面</p><p>+——-+———-+————+<br>| empno | ename | deptno |<br>+——-+———-+————+<br>|  7369 | SMITH    |     20 |<br>|  7499 | ALLEN    |     30 |<br>|  7521 | WARD     |     30 |<br>|  7566 | JONES    |     20 |<br>|  7654 | MARTIN  |     30 |<br>|  7698 | BLAKE    |     30 |<br>|  7782 | CLARK   |     10 |<br>|  7788 | SCOTT   |     20 |<br>|  7844 | TURNER|     30 |<br>|  7876 | ADAMS  |     20 |<br>|  7900 | JAMES   |     30 |<br>|  7902 | FORD     |     20 |<br>|  7934 | MILLER  |     10 |<br>|  8848 | SEAO     |     10 |<br>+——-+————–+——-+</p></li></ul></li></ul></li></ul></li><li><p>分析我们需要实现的功能：</p><ul><li>什么是功能？<ul><li>需要连接数据库的操作就是功能</li></ul></li><li>包括一个功能？<ul><li>查看部门列表</li><li>保存用户需要功能</li><li>删除</li><li>修改用户信息</li></ul></li></ul></li><li><p>在IDEA中搭建开发环境</p><ul><li>创建webapp</li><li>添加依赖</li><li>jdbc工具类</li></ul></li><li><p>实现一个功能查看部门列表</p><ul><li><p>第一首先修改前端页面的超链接，因为用户先点击的就是超链接</p></li><li><pre><code class="html">&lt;a  href=&quot;/oa/dept/list&quot; &gt;员工列表&lt;/a&gt;       &lt;br&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ 配置servlet</span><br><span class="line"></span><br><span class="line">  + ```html</span><br><span class="line">    &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">    &lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span><br><span class="line">             xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">             xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span><br><span class="line">             version=&quot;4.0&quot;&gt;</span><br><span class="line">        &lt;servlet&gt;</span><br><span class="line">            &lt;servlet-name&gt;list&lt;/servlet-name&gt;</span><br><span class="line">            &lt;servlet-class&gt;com.sea.List&lt;/servlet-class&gt;</span><br><span class="line">        &lt;/servlet&gt;</span><br><span class="line">        &lt;servlet-mapping&gt;</span><br><span class="line">            &lt;servlet-name&gt;list&lt;/servlet-name&gt;</span><br><span class="line">            &lt;url-pattern&gt;/dept/list&lt;/url-pattern&gt;</span><br><span class="line">        &lt;/servlet-mapping&gt;</span><br><span class="line">    &lt;/web-app&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>写servlet</p><ul><li><p>在doget方法中查询所有员工信息</p><ul><li><p>所有的双引号要换成但引号，可能与java的字符串冲突。</p></li><li><p>sql语句可以先在DOS执行一下再写进去</p></li><li><pre><code class="java"> @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        resp.setContentType(&quot;text/html;charset=utf-8&quot;);        PrintWriter out = resp.getWriter(); <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">                out.print(&quot;&lt;!DOCTYPE html&gt;&quot;);</span><br><span class="line">                out.print(&quot;&lt;html&gt;&quot;);</span><br><span class="line">                out.print(&quot;&lt;head&gt;&quot;);</span><br><span class="line">                out.print(&quot;&lt;meta charset=&#x27;utf-8&#x27;&gt;&quot;);</span><br><span class="line">                out.print(&quot;&lt;title&gt;员工信息&lt;/title&gt;&quot;);</span><br><span class="line">                out.print(&quot;&lt;/head&gt;&quot;);</span><br><span class="line">                out.print(&quot;&lt;body&gt;&quot;);</span><br><span class="line">                out.print(&quot;&lt;h1 align=&#x27;center&#x27;&gt;部门列表&lt;/h1&gt;&quot;);</span><br><span class="line">                out.print(&quot;&lt;hr&gt;&quot;);</span><br><span class="line">                out.print(&quot;&lt;table border=&#x27;1px&#x27; align=&#x27;center&#x27; width=&#x27;50%&#x27;&gt;&quot;);</span><br><span class="line">                out.print(&quot;&lt;tr&gt;&quot;);</span><br><span class="line">                out.print(&quot;&lt;th&gt;员工序号&lt;/th&gt;&quot;);</span><br><span class="line">                out.print(&quot;&lt;th&gt;员工姓名&lt;/th&gt;&quot;);</span><br><span class="line">                out.print(&quot;&lt;th&gt;部门序号&lt;/th&gt;&quot;);</span><br><span class="line">                out.print(&quot;&lt;th&gt;编辑&lt;/th&gt;&quot;);</span><br><span class="line">                out.print(&quot;&lt;/tr&gt;&quot;);</span><br><span class="line">            </span><br><span class="line">                Connection conn = null;</span><br><span class="line">                PreparedStatement ps = null;</span><br><span class="line">                ResultSet set = null;</span><br><span class="line">                try &#123;</span><br><span class="line">                    conn = DBUtil.getConnection();</span><br><span class="line">                    ps = conn.prepareStatement(&quot;select empno,ename,deptno from emppro&quot;);</span><br><span class="line">                    set = ps.executeQuery();</span><br><span class="line">                    while(set.next())&#123;</span><br><span class="line">                        String empno = set.getString(&quot;empno&quot;);</span><br><span class="line">                        String ename = set.getString(&quot;ename&quot;);</span><br><span class="line">                        String deptno = set.getString(&quot;deptno&quot;);</span><br><span class="line">                        System.out.println(empno);</span><br><span class="line">                        System.out.println(ename);</span><br><span class="line">                        System.out.println(deptno);</span><br><span class="line">                        out.print(&quot;&lt;tr&gt;&quot;);</span><br><span class="line">                        out.print(&quot;&lt;td&gt;&quot;+empno+&quot;&lt;/td&gt;&quot;);</span><br><span class="line">                        out.print(&quot;&lt;td&gt;&quot;+ename+&quot;&lt;/td&gt;&quot;);</span><br><span class="line">                        out.print(&quot;&lt;td&gt;&quot;+deptno+&quot;&lt;/td&gt;&quot;);</span><br><span class="line">                        out.print(&quot;&lt;td&gt;&quot;);</span><br><span class="line">                        out.print(&quot;&lt;a href=&#x27;&#x27;&gt;删除&lt;/a&gt;&quot;);</span><br><span class="line">                        out.print(&quot;&lt;a href=&#x27;update.html&#x27;&gt;修改&lt;/a&gt;&quot;);</span><br><span class="line">                        out.print(&quot;&lt;a href=&#x27;detail.html&#x27;&gt;详细信息&lt;/a&gt;&quot;);</span><br><span class="line">                        out.print(&quot;&lt;/td&gt;&quot;);</span><br><span class="line">                        out.print(&quot;&lt;/tr&gt;&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                    throw new RuntimeException(e);</span><br><span class="line">                &#125;finally&#123;</span><br><span class="line">                    DBUtil.disConnection(set,ps,conn);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​        </span><br><span class="line"></span><br><span class="line">                out.print(&quot;&lt;/table&gt;&quot;);</span><br><span class="line">                out.print(&quot;&lt;a href=&#x27;Add.html&#x27;&gt;添加员工&lt;/a&gt;&quot;);</span><br><span class="line">                out.print(&quot;&lt;/body&gt;&quot;);</span><br><span class="line">                out.print(&quot;&lt;/html&gt;&quot;);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>+ 需要注意的是&lt;a href=&quot; &quot;&gt;前端发送请求要加项目名 action和href都是需要加项目名的+ ```java  String path = req.getContextPath(); //可以得到请求webapp的地址<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">      ​    </span><br><span class="line"></span><br><span class="line">+ 技巧</span><br><span class="line"></span><br><span class="line">  + 重点：向服务器提交数据的格式中的问号必须是英文的？ 不能是中文的？</span><br><span class="line"></span><br><span class="line">+ 配置empDetial信息</span><br><span class="line"></span><br><span class="line">  + ```html</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">            &lt;servlet-name&gt;detail&lt;/servlet-name&gt;</span><br><span class="line">            &lt;servlet-class&gt;com.Detail&lt;/servlet-class&gt;</span><br><span class="line">        &lt;/servlet&gt;</span><br><span class="line">        &lt;servlet-mapping&gt;</span><br><span class="line">            &lt;servlet-name&gt;detail&lt;/servlet-name&gt;</span><br><span class="line">            &lt;url-pattern&gt;/dept/detail&lt;/url-pattern&gt;</span><br><span class="line">        &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li></ul></li><li><p>编写一个servlet：</p><ul><li>实现detail的展示</li></ul></li><li><pre><code class="html">&lt;body&gt;    &lt;script type=&quot;text/javascript&quot;&gt;        function del(empno)&#123;            if(window.confirm(&quot;亲 删了无法恢复哦&quot;))&#123; //弹出确认框 有ok和no选项-&gt;返回boolean                /*document.location.href=&quot;目标url&quot;                       document.location =&quot;目标url&quot;                       Window.location.href=&quot;目标url&quot;                       Window.location=&quot;目标url&quot;                */ //四种方式可选                document.location.href=&quot;/oa/dept/delete?empno=&quot;+empno            &#125;        &#125;    &lt;/script&gt;       &lt;/body&gt;&lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;del(&quot;+empno+&quot;)&quot;&gt;删除&lt;/a&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">## 4.6转发与重定向</span><br><span class="line"></span><br><span class="line">+ 在一个webapp中有两种跳转的方式：</span><br><span class="line"></span><br><span class="line">  + 转发</span><br><span class="line">  + 重定向</span><br><span class="line"></span><br><span class="line">+ 转发和重定向的区别是什么？</span><br><span class="line"></span><br><span class="line">  + 代码上有区别</span><br><span class="line"></span><br><span class="line">    + 转发</span><br><span class="line"></span><br><span class="line">    + ```java</span><br><span class="line">      request.getRequestDispatcher(&quot;url&quot;).forward(req,resp);</span><br><span class="line">      </span><br></pre></td></tr></table></figure>  + 重定向  + ```    response.sendRedirect(&quot;url&quot;);    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">+ 形式上有什么区别？</span><br><span class="line"></span><br><span class="line">  + 转发 一次请求</span><br><span class="line">    + 在浏览器上发送的请求和跳转之后的请求地址没有发生变化，因为资源的跳转时在服务端完成的</span><br><span class="line">  + 重定向 两次请求</span><br><span class="line">    + 通过浏览器的response再次请求服务端跳转资源，内部是服务器内部的跳转。</span><br><span class="line"></span><br><span class="line">+ 什么时候用转发和重定向？</span><br><span class="line"></span><br><span class="line">  + 如果上一个servlet当中的request域当中绑定了数据，希望从下一个servlet当中的request域里面的数据取出来，使用转发机制</span><br><span class="line">  + 剩下的均使用重定向(重定向使用较多)</span><br><span class="line"></span><br><span class="line">+ 跳转到的下一个资源没有要求呢？必须是一个servlet吗？</span><br><span class="line"></span><br><span class="line">  + 不一定，跳转的资源只要是一个合法的资源即可。包括html，jsp</span><br><span class="line"></span><br><span class="line">+ 转发会存在浏览器的刷新问题。</span><br><span class="line"></span><br><span class="line">  + 转发不需要知道项目名 但是sendRedirect需要知道项目名</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+ 有一个问题是是的注意的是 实现如此简答的功能就要进行如此复杂的配置是非常不好的。</span><br><span class="line"></span><br><span class="line">  这种配置信息能不能直接写道java类里面呢？</span><br><span class="line"></span><br><span class="line">  servlet3.0之后提出了多种基于注解式开发 为什么不是直接标注上不再xml上面配置了</span><br><span class="line"></span><br><span class="line">  + 优点：开发效率高</span><br><span class="line"></span><br><span class="line">## 4.7 servlet的注解方式开发</span><br><span class="line"></span><br><span class="line">### webservlet</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">@WebServlet</span><br><span class="line">public class UserAnnotationDevelopment extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><p>​使用注解标注 此类就会变成一个servlet</p><p>Annotation源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> WebServlet &#123;</span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>; <span class="comment">//servlet-name</span></span><br><span class="line"></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;; <span class="comment">//和urlparttern要存储的数据是一样的 但是如果value只有一个值的时候可以省略value标签 //如果属性名是value的话 连value都可以省略</span></span><br><span class="line"></span><br><span class="line">    String[] urlPatterns() <span class="keyword">default</span> &#123;&#125;; <span class="comment">//servlet-mapping---&gt;urlpattern</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">loadOnStartup</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;  <span class="comment">//启动阶段是非直接启动servlet 使用的话 置为1</span></span><br><span class="line"></span><br><span class="line">    WebInitParam[] initParams() <span class="keyword">default</span> &#123;&#125;; <span class="comment">//注解的数组</span></span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">asyncSupported</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>; </span><br><span class="line"></span><br><span class="line">    String <span class="title function_">smallIcon</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">largeIcon</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">description</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">displayName</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>request———<br>    |—-getServletPath()    获取urlpattern的内容<br>    |——getContextPath()获取webapp的根目录名</p><h2 id="模板方法设计模式解决类爆炸"><a href="#模板方法设计模式解决类爆炸" class="headerlink" title="模板方法设计模式解决类爆炸"></a>模板方法设计模式解决类爆炸</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sea;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/emp/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplateForm</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;/emp/List&quot;</span>.equals(req.getServletPath()))&#123;</span><br><span class="line">            doList(req,resp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;/emp/Add&quot;</span>.equals(req.getServletPath()))&#123;</span><br><span class="line">            doAdd(req,resp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;/emp/Remove&quot;</span>.equals(req.getServletPath()))&#123;</span><br><span class="line">            doRemove(req,resp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;/emp/Update&quot;</span>.equals(req.getServletPath()))&#123;</span><br><span class="line">            doUpdate(req,resp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doUpdate</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doRemove</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doAdd</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doList</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​如果只是这样的话，可能会有用户恶意登录，就是说可能有人知道下一步的地址，从而不需要登录，直接访问内部信息。甚至可以做到直接通过url发送请求修改数据库的内容。</p><h1 id="5-关于B-S架构的session机制-会话机制"><a href="#5-关于B-S架构的session机制-会话机制" class="headerlink" title="5 关于B&#x2F;S架构的session机制 会话机制"></a>5 关于B&#x2F;S架构的session机制 会话机制</h1><h2 id="5-1-什么是会话？"><a href="#5-1-什么是会话？" class="headerlink" title="5.1 什么是会话？"></a>5.1 什么是会话？</h2><ul><li><p>用户打开浏览器。经行一系列的操作，然后最终i将浏览器关闭，这个过程叫一次会话</p></li><li><p>是什么一次请求？</p><ul><li>用户在浏览器上一次点击，就会触发请求</li></ul></li><li><p>请求对应的服务端的对象是request 会话也有一个对象 叫做session</p></li><li><p>session是属于B&#x2F;S架构的一部分</p><ul><li>如果使用php开发web项目，同样使用session这一机制<ul><li>他是一个规范，不同的语言对这样的会话方式都有实现</li><li>它最重要的作用是保留登录状态</li><li>这是一种登录成功的状态</li></ul></li></ul></li></ul><h2 id="5-2-Http是一种无状态协议"><a href="#5-2-Http是一种无状态协议" class="headerlink" title="5.2 Http是一种无状态协议"></a>5.2 Http是一种无状态协议</h2><ul><li>就是请求的时候B&#x2F;S是连接的，但是请求结束之后连接就断开了。是为了减小服务器的压力</li></ul><ul><li><p>为什么需要session来保存会话状态呢？</p></li><li><p>getSession()与getSession(true)一样，获取request对象关联的session对象，如果没有session，则返回一个新的session。</p><p>getSession(false)也是返回一个request对象关联的session对象，但如果没有session，则返回null。</p><ul><li><pre><code class="java">  HttpSession session = req.getSession();        resp.setContentType(&quot;text/html&quot;);        PrintWriter out = resp.getWriter();        out.print(session);  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">证明session的特性:</span><br><span class="line"></span><br><span class="line">+ 为什么不使用request和servletContext对象来保存会话状态？</span><br><span class="line"></span><br><span class="line">  + request.setAttribute()和request.getAttribute()，servletContext也有这样的方法，request是请求域。servletContext是应用域</span><br><span class="line">  + request是一次请求的对象</span><br><span class="line">  + ServletContext对象是服务器启动的时候创建的，服务器关闭的时候销毁，这个servletContext对象只有一个。</span><br><span class="line">  + servletContext域太大</span><br><span class="line">  + request请求域，servletContext应用域，session会话域</span><br><span class="line">  + request&lt;session&lt;application</span><br><span class="line">  + session的意义是实现用户信息的独立</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"># 5.3 Session的应用和原理</span><br><span class="line"></span><br><span class="line">+ 思考一下session的实现原理？</span><br><span class="line"></span><br><span class="line">  + ```java</span><br><span class="line">    HttpSession session = requset.getSession(); </span><br><span class="line">    session.setAttribute();  //使用session绑定资源</span><br><span class="line">    session.getAttribute();//使用session获取资源</span><br><span class="line">    session.removeAttribute(); //使用session解绑资源</span><br></pre></td></tr></table></figure></code></pre></li><li><p>这行代码很神奇。张三访问的时候获取的session对象是张三的，李四获取的session是李四的</p></li><li><p>每个session会有一个记号 其实就是一个cookie</p></li></ul></li></ul><h3 id="5-3-1-session的实现"><a href="#5-3-1-session的实现" class="headerlink" title="5.3.1 session的实现"></a>5.3.1 session的实现</h3><ul><li>在web服务器中有一个session列表，类似于map集合，map集合中的key存储的的是session的is</li><li>这个map的value是一个session的对象</li><li>用户第一次发送请求的时候，服务器会创建一个session对象，并生成一个id，然后web服务器会将session的id发送给浏览器，浏览器将session的id保存在浏览器的缓存中。</li><li>用户发送第二次请求的时候会自动将浏览器中的sessionid发送给服务器，服务器会根据sessionid找到对应的session对象。</li><li>为什么关闭浏览器，会话结束？<ul><li>关闭浏览器之后，浏览器中的session消失，下次打开浏览器的时候浏览器的缓存中没有这个sessionid，自然就找不到对应的session对接。<ul><li>又有一个问题 此时的session在服务器中还存在吗？<ul><li>有可能session还存在</li><li>网银中的安全退出可以告知服务器会话结束，session将被服务器销毁。</li><li><img src="https://s1.328888.xyz/2022/05/10/HiZ3Q.png" alt="HiZ3Q.png"></li></ul></li></ul></li><li>如果cookie禁用了会发生什么呢？<ul><li>cookie禁用是服务器继续给浏览器发送Sessionid但是浏览器不会收取该sessionid</li><li>会导致每一次request都是产生新的session</li><li>在url后面加上一个;JSESSIONID&#x3D;sessionid 依然可以拿到session对象 但是url重写会提高开发的成本</li></ul></li></ul></li></ul><h3 id="5-3-2-session的销毁"><a href="#5-3-2-session的销毁" class="headerlink" title="5.3.2 session的销毁"></a>5.3.2 session的销毁</h3><ul><li>session什么时候销毁？<ul><li>一种销毁是超时销毁</li><li>一种销毁是手动销毁 session.invalid();</li></ul></li></ul><p><img src="https://s1.328888.xyz/2022/05/10/HiBzM.png" alt="HiBzM.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span> 可以涉资session的时效</span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sea;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/emp/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplateForm</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        ---------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession(); <span class="comment">//只有第一次有效</span></span><br><span class="line">        <span class="keyword">if</span>(session != <span class="literal">null</span> &amp;&amp; session.getAttribute(<span class="string">&quot;userinfo&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">        --------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;/emp/List&quot;</span>.equals(req.getServletPath())) &#123;</span><br><span class="line">                doList(req, resp);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;/emp/Add&quot;</span>.equals(req.getServletPath())) &#123;</span><br><span class="line">                doAdd(req, resp);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;/emp/Remove&quot;</span>.equals(req.getServletPath())) &#123;</span><br><span class="line">                doRemove(req, resp);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;/emp/Update&quot;</span>.equals(req.getServletPath())) &#123;</span><br><span class="line">                doUpdate(req, resp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            resp.sendRedirect(req.getContextPath());<span class="comment">//访问根目录即可 自动回到登录界面</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doUpdate</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doRemove</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doAdd</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doList</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="6-Cookie原理和应用"><a href="#6-Cookie原理和应用" class="headerlink" title="6 Cookie原理和应用"></a>6 Cookie原理和应用</h1><ul><li>session的实现原理中，每一个session对象都是关联了一个sessionid 例如：<ul><li>JSESSION&#x3D;41hdiuqahwdooaidjiowjiopdjqwoj08</li><li>以上的是一个键值对应对数据其实就是cookie对象</li><li>对于session关联的cookie来说，这个cookie是被保存在浏览器的运行内存中的。</li><li>只要浏览器不关闭，用户再次请求的时候，全自动将内存中的cookie发送给服务器</li><li>服务器就是根据这个值来找到对应的session对象的</li></ul></li><li>cookie是怎么生成的？</li><li>cookie有什么用呢？<ul><li>cookie和session都是为了保存会话的状态。<ul><li>cookie是为了将状态信息存在浏览器客服端上。(cookie数据存在浏览器客服端上)</li><li>session是为了将状态信息存在服务器上。</li></ul></li></ul></li><li>保存在什么地方？<ul><li>可以保存在内存中 也可以存在外存中</li></ul></li><li>怎么保存的？</li><li>为什么要session和cookie呢？<ul><li>因为http是一个无状态的协议</li></ul></li><li>setMaxAge() 设置有效时间<ul><li>没有设置有效时间默认保存在运行内存中 关闭浏览器，cookie就会消失 只要设置了有效时间&gt;0 cookie一定会存在外存中</li><li>并且失效了会中内存中被清除</li></ul></li><li>setPath() </li><li>cookie()  构造方法</li><li>在java的servlet中，对cookie提供了哪些支持呢？<ul><li>提供了一个cookie类来专门表示cookie数据，jakarta.servlet.http.cookie<ul><li>浏览器会自动发送cookie</li></ul></li><li>java程序怎么发送cookie给程序呢？</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CookieTest</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//创建cookie对象</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;production&quot;</span>,<span class="string">&quot;123456879&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置cookie在一小时以后关闭 &gt;0 会保存到外存对应的时间 =0 会删除同名cookie &lt;0表示该cookie不会被存储(硬盘文件中) 还会在运行内存中和不调用Maxage是相同的效果</span></span><br><span class="line">        cookie.setMaxAge(<span class="number">3600</span>);</span><br><span class="line">        </span><br><span class="line">        cookie.setPath(<span class="string">&quot;/session&quot;</span>);<span class="comment">//表示提交cookie的最上乘目录</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将cookie回复到浏览器中</span></span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取cookie</span></span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="keyword">if</span>(cookies != <span class="literal">null</span> )&#123;</span><br><span class="line">            <span class="comment">//获取cookie里面的key和value</span></span><br><span class="line">            <span class="keyword">for</span>(Cookie i:cookies)&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> i.getName();</span><br><span class="line">                <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> i.getValue();</span><br><span class="line">                System.out.println(name + <span class="string">&quot;=&quot;</span> + value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>cookie中的path，cookie关联的路径<ul><li>默认是请求路径上一级的所有子路径，cookie都会被发送到服务器</li></ul></li></ul><h1 id="7-过滤器的使用和及其实现原理："><a href="#7-过滤器的使用和及其实现原理：" class="headerlink" title="7 过滤器的使用和及其实现原理："></a>7 过滤器的使用和及其实现原理：</h1><h2 id="7-1-过滤器的实现"><a href="#7-1-过滤器的实现" class="headerlink" title="7.1 过滤器的实现"></a>7.1 过滤器的实现</h2><ul><li><p>代码重复问题如何解决？</p><ul><li>可以使用servlet规范中提供的filter<ul><li>有什么用？执行原理是什么？</li><li>一般是在过滤器中编写公共代码</li></ul></li></ul></li><li><p>过滤器怎么写？</p><ul><li><h3 id="编写一个java类实现一个接口-jakarta-servlet-filter实现接口当中的所有方法-实现filter接口"><a href="#编写一个java类实现一个接口-jakarta-servlet-filter实现接口当中的所有方法-实现filter接口" class="headerlink" title="编写一个java类实现一个接口 jakarta.servlet.filter实现接口当中的所有方法  实现filter接口"></a>编写一个java类实现一个接口 jakarta.servlet.filter实现接口当中的所有方法  实现filter接口</h3></li></ul></li><li><p>filter的配置方法(xml中)</p><ul><li><p>十分类似servletde配置方法</p></li><li><pre><code class="html">    &lt;filter&gt;        &lt;filter-name&gt;filter&lt;/filter-name&gt;        &lt;filter-class&gt;com.sea.FilterTest&lt;/filter-class&gt;    &lt;/filter&gt;    &lt;filter-mapping&gt;        &lt;filter-name&gt;filter&lt;/filter-name&gt;        &lt;url-pattern&gt;/hello&lt;/url-pattern&gt;    &lt;/filter-mapping&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```java</span><br><span class="line">@WebFilter(&quot;/test&quot;) //这样也可以配置filter 可以过滤到/test之后的文件</span><br><span class="line">@WebFilter(&quot;/*&quot;)   // 过滤整个webapp的所有servlet</span><br><span class="line">@WebFilter(&quot;*.html&quot;) //过滤所有html结尾的路径 叫做前缀匹配</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>一些特性：</p><ul><li>servlet在服务器启动时不会创建servlet实例</li><li>但是filter在服务器启动的情况下就会创建一个实例</li><li>另外servlet是单例的，并且filter也是单例的。</li></ul></li><li><p>目标servlet是否执行，却决于两个条件</p><ul><li>第一：过滤器中是否编写了：Chain.doFilter(request,respond);如果没有下一个过滤器了 执行最终的下一个servlet<ul><li>注意：filter的优先级要不servlet更高的</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">//只用用户请求一次，就执行一次。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">        <span class="comment">//执行下一个过滤器，如果没有下一个过滤器则执行目标servlet</span></span><br><span class="line">        <span class="comment">//向下走 没有他不行</span></span><br><span class="line">        <span class="comment">//重要的一句话</span></span><br><span class="line">        <span class="comment">/*---------------------------------------------------*/</span></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse); <span class="comment">//会有一种类似于陷入的过程</span></span><br><span class="line">        <span class="comment">/*-------------------------------------------------*/</span></span><br><span class="line">        System.out.println(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>嵌套filter也是可以的。 类似于栈的结构 后进先出</p><ul><li><p>同级谁先谁后与什么有关呢？优先级问题？</p><ul><li>filter-mapping在xml中在上就会先执行上面的filter</li></ul></li><li><p>使用注解形式。配置filter的时候同级执行顺序是怎样的呢？</p><ul><li>先后顺序取决于类名的比较结果</li><li>比如：<ul><li>filter1.java和filter2.java 先执行filter1.javad</li><li>filterA.java和filterB.java 先执行filterA.java</li></ul></li><li>filter的生命周期<ul><li>出了实例化时间不同之外，都是一致的</li></ul></li></ul></li></ul></li></ul><p><img src="https://s1.328888.xyz/2022/05/11/HTld7.png" alt="HTld7.png"></p><ul><li>使用了filter之后：<ul><li><p>在编译过程阶段已经完成了调用关联</p></li><li><p>如果你希望改变调用的顺序，必须修改一下代码</p></li><li><p>java代码修改，需要重新编译，项目要重新发布，这是一个繁琐的过程</p></li><li><p>显然，这种设计违背了；OCP(open close principle) 即开闭原则</p></li><li><p>OCP：对拓展开放对修改关闭</p><ul><li><p>对项目扩展是没有问题的，但是最耗不要修改原有的代码。</p></li><li><p>过滤器就有这样的能力</p></li><li><p>过滤器最大的优点：</p><ul><li>在程序编译阶段不会确定调用顺序，因为filter的调用顺序是配置到web.xml文件中的，只要修改xml文件中的filter-mapping顺序，</li></ul></li><li><p>责任链最大的特点是可以在程序运行中实现动态的组合程序的调用顺序</p></li><li><pre><code class="java">package com.sea;import jakarta.servlet.*;import jakarta.servlet.annotation.WebFilter;import java.io.IOException;@WebFilter(&quot;/test&quot;)public class FilterTest implements Filter &#123;    public FilterTest() &#123;        System.out.println(&quot;no param constructor&quot;);    &#125;    @Override    public void init(FilterConfig filterConfig) throws ServletException &#123;        //init方法在filter第一次创建时调用 并且只使用一次    &#125;    @Override    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;        //只用用户请求一次，就执行一次。        System.out.println(&quot;start&quot;);        //执行下一个过滤器，如果没有下一个过滤器则执行目标servlet        //向下走 没有他不行        //重要的一句话        /*---------------------------------------------------*/        filterChain.doFilter(servletRequest,servletResponse); //会有一种类似于陷入的过程        /*-------------------------------------------------*/        System.out.println(&quot;end&quot;);    &#125;    @Override    public void destroy() &#123;        //在被销毁之前调用，并且只执行一次    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 7.2  责任链设计模式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line"># 8 Listener 监听器</span><br><span class="line"></span><br><span class="line">+ 什么是监听器？</span><br><span class="line"></span><br><span class="line">  + 监听器是servlet规范中的一员，就像Filter也是servlet中的一员</span><br><span class="line">  + 在servlet中，所有的监听器的接口都是listener结尾</span><br><span class="line"></span><br><span class="line">+ 监听器有什么作用？</span><br><span class="line"></span><br><span class="line">  + 监听器实际上是servlet规范留给我们java程序员的特殊时机。</span><br><span class="line">  + 特殊的时刻需要执行这段代码，你需要想到使用监听器。</span><br><span class="line"></span><br><span class="line">+ servlet中提供哪些监听器呢？</span><br><span class="line"></span><br><span class="line">+ jakarta包下的：</span><br><span class="line"></span><br><span class="line">  + servletContextLiStener</span><br><span class="line">  + servletContextAttributeListener</span><br><span class="line">  + servletRequestListener</span><br><span class="line">  + servletRequestAttributeListener</span><br><span class="line"></span><br><span class="line">+ http包下的：</span><br><span class="line"></span><br><span class="line">  + HttpSessionListener</span><br><span class="line">  + HttpSessionAttributeListener</span><br><span class="line">  + HttpSessionBindingListener</span><br><span class="line">  + HttpSessionActivationListener</span><br><span class="line"></span><br><span class="line">+ 实现一个监听器</span><br><span class="line"></span><br><span class="line">  + 第一步 编写一个类实现servletContextListener接口，并且实现方法</span><br><span class="line"></span><br><span class="line">  + ```java</span><br><span class="line">    </span><br><span class="line">    public class myListener implements ServletContextListener &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void contextInitialized(ServletContextEvent sce) &#123;</span><br><span class="line">    </span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        @Override</span><br><span class="line">        public void contextDestroyed(ServletContextEvent sce) &#123;</span><br><span class="line">    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>第二步 在xml文件中配置信息</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.sea.myListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletContextListener;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span> <span class="comment">//注释形式的配置listener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">myListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line"><span class="comment">//写一些你想在特殊时刻想要执行的代码即可</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意：所有监听器中的方法都是不需要javaweb程序员调用的，都是由服务器来负责调用的。</li><li>当某个特殊的时间发生后，web服务器会自动调用</li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JAVAWEB&quot;&gt;&lt;a href=&quot;#JAVAWEB&quot; class=&quot;headerlink&quot; title=&quot;JAVAWEB&quot;&gt;&lt;/a&gt;JAVAWEB&lt;/h1&gt;&lt;h1 id=&quot;1-servlet：&quot;&gt;&lt;a href=&quot;#1-servlet：&quot; class=&quot;head</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>javalearn</title>
    <link href="http://example.com/2024/05/22/javalearn/"/>
    <id>http://example.com/2024/05/22/javalearn/</id>
    <published>2024-05-22T08:33:06.000Z</published>
    <updated>2024-05-22T08:33:06.794Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="面向对象部分"><a href="#面向对象部分" class="headerlink" title="面向对象部分"></a>面向对象部分</h1></blockquote><ul><li><h2 id="向上造型：父类引用指向子类对象，父类可以调用子类重写的方法，但是-不能调用子类特有的方法；"><a href="#向上造型：父类引用指向子类对象，父类可以调用子类重写的方法，但是-不能调用子类特有的方法；" class="headerlink" title="向上造型：父类引用指向子类对象，父类可以调用子类重写的方法，但是&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;不能调用子类特有的方法；"></a>向上造型：父类引用指向子类对象，父类可以调用子类重写的方法，但是&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;不能调用子类特有的方法；</h2></li><li><h2 id="向下造型：此操作有classcasteException异常的风险；"><a href="#向下造型：此操作有classcasteException异常的风险；" class="headerlink" title="向下造型：此操作有classcasteException异常的风险；"></a>向下造型：此操作有classcasteException异常的风险；</h2></li><li><h2 id="继承：子类可以从父类那里继承父类的方法以及父类的成员变量，子类可以覆写（-override）父类的方法"><a href="#继承：子类可以从父类那里继承父类的方法以及父类的成员变量，子类可以覆写（-override）父类的方法" class="headerlink" title="继承：子类可以从父类那里继承父类的方法以及父类的成员变量，子类可以覆写（@override）父类的方法"></a>继承：子类可以从父类那里继承父类的方法以及父类的成员变量，子类可以覆写（@override）父类的方法</h2></li><li><h2 id="构造器的特殊性：子类的构造器会-自动的调用-父类的构造器；"><a href="#构造器的特殊性：子类的构造器会-自动的调用-父类的构造器；" class="headerlink" title="构造器的特殊性：子类的构造器会&#x3D;&#x3D;自动的调用&#x3D;&#x3D; 父类的构造器；"></a>构造器的特殊性：子类的构造器会&#x3D;&#x3D;自动的调用&#x3D;&#x3D; 父类的构造器；</h2></li><li><h2 id="super-super-method-—-可以条用父类的方法；super-—-调用构造器；super-int-a-—-调用具有形参的构造器；"><a href="#super-super-method-—-可以条用父类的方法；super-—-调用构造器；super-int-a-—-调用具有形参的构造器；" class="headerlink" title="super:super.method()—&gt;可以条用父类的方法；super();—-&gt;调用构造器；super(int a)—-&gt;调用具有形参的构造器；"></a>super:super.method()—&gt;可以条用父类的方法；super();—-&gt;调用构造器；super(int a)—-&gt;调用具有形参的构造器；</h2></li><li><h2 id="抽象类abstractcalss：抽象类可以有自己的函数，自己的成员变量，以及自己的成员方法，但是不能创建抽象类的对象；super-xxx—-引用父类的成员。"><a href="#抽象类abstractcalss：抽象类可以有自己的函数，自己的成员变量，以及自己的成员方法，但是不能创建抽象类的对象；super-xxx—-引用父类的成员。" class="headerlink" title="抽象类abstractcalss：抽象类可以有自己的函数，自己的成员变量，以及自己的成员方法，但是不能创建抽象类的对象；super.xxx—&gt;引用父类的成员。"></a>抽象类abstractcalss：抽象类可以有自己的函数，自己的成员变量，以及自己的成员方法，但是不能创建抽象类的对象；super.xxx—&gt;引用父类的成员。</h2></li><li><h2 id="抽象类的实现：虽然抽象类不能创建自己的对象，但是它可以用别的类将其实现。-抽象类的方法方法可以继承"><a href="#抽象类的实现：虽然抽象类不能创建自己的对象，但是它可以用别的类将其实现。-抽象类的方法方法可以继承" class="headerlink" title="抽象类的实现：虽然抽象类不能创建自己的对象，但是它可以用别的类将其实现。(抽象类的方法方法可以继承)"></a>抽象类的实现：虽然抽象类不能创建自己的对象，但是它可以用别的类将其实现。(抽象类的方法方法可以继承)</h2></li><li><h2 id="接口-interface-：接口类似与抽象类-但是它通过（实现）implement才能发挥作用；它的方法不需要描述，接口必然是abstract所以声明接口的时候不需要写abstract关键字"><a href="#接口-interface-：接口类似与抽象类-但是它通过（实现）implement才能发挥作用；它的方法不需要描述，接口必然是abstract所以声明接口的时候不需要写abstract关键字" class="headerlink" title="接口(interface)：接口类似与抽象类 但是它通过（实现）implement才能发挥作用；它的方法不需要描述，接口必然是abstract所以声明接口的时候不需要写abstract关键字"></a>接口(interface)：接口类似与抽象类 但是它通过（实现）implement才能发挥作用；它的方法不需要描述，接口必然是abstract所以声明接口的时候不需要写abstract关键字</h2></li><li><h2 id="接口的特点：接口的所有方法都是抽象的，所有想要实现接口的类都要有接口里面的方法，才能被应用；接口的方法申明的时候同样不需要写abstract；"><a href="#接口的特点：接口的所有方法都是抽象的，所有想要实现接口的类都要有接口里面的方法，才能被应用；接口的方法申明的时候同样不需要写abstract；" class="headerlink" title="接口的特点：接口的所有方法都是抽象的，所有想要实现接口的类都要有接口里面的方法，才能被应用；接口的方法申明的时候同样不需要写abstract；"></a>接口的特点：接口的所有方法都是抽象的，所有想要实现接口的类都要有接口里面的方法，才能被应用；接口的方法申明的时候同样不需要写abstract；</h2><blockquote><h2 id="接口和抽象类"><a href="#接口和抽象类" class="headerlink" title="接口和抽象类"></a>接口和抽象类</h2><p>实现接口的时候应该注意 </p><ol><li>一个类只能实现多个接口</li><li>一个类只能继承一个类</li><li>一个接口能继承另一个接口；</li></ol></blockquote></li><li><h2 id="封装：将一些类内的变量用private修饰，如果需要访问可以创建一个赋取值的方法，用于对私有属性的访问。"><a href="#封装：将一些类内的变量用private修饰，如果需要访问可以创建一个赋取值的方法，用于对私有属性的访问。" class="headerlink" title="封装：将一些类内的变量用private修饰，如果需要访问可以创建一个赋取值的方法，用于对私有属性的访问。"></a>封装：将一些类内的变量用private修饰，如果需要访问可以创建一个赋取值的方法，用于对私有属性的访问。</h2></li></ul><blockquote><h1 id="java-AdvancedSection"><a href="#java-AdvancedSection" class="headerlink" title="java AdvancedSection"></a>java AdvancedSection</h1></blockquote><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;h1 id=&quot;面向对象部分&quot;&gt;&lt;a href=&quot;#面向对象部分&quot; class=&quot;headerlink&quot; title=&quot;面向对象部分&quot;&gt;&lt;/a&gt;面向对象部分&lt;/h1&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h2 id=&quot;向上造型：父类引用指向子类</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>springcloud</title>
    <link href="http://example.com/2024/05/22/springcloud/"/>
    <id>http://example.com/2024/05/22/springcloud/</id>
    <published>2024-05-22T08:33:06.000Z</published>
    <updated>2024-05-22T08:33:06.810Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h1><p>微服务框架的系统架构是一个分布式的系统，按照业务领域划分为独立的服务单元，有自动化运维，容错，快速演进的特点，特能够解决传统单体框架系统的痛点，同时又能满足越来越复杂的业务需求。</p><h2 id="1-1-单体架构的不足"><a href="#1-1-单体架构的不足" class="headerlink" title="1.1 单体架构的不足"></a>1.1 单体架构的不足</h2><ul><li>业务越来越复杂，单体应用代码越来越大，可读性和扩展性下降</li><li>随着用户越来越多，程序承受的并发越来越多，单体的承受能力有限</li><li>测试的难度比较大，单体应用的业务都在同一个程序中。</li></ul><h2 id="1-2-微服务是什么？"><a href="#1-2-微服务是什么？" class="headerlink" title="1.2 微服务是什么？"></a>1.2 微服务是什么？</h2><ul><li>就是大的应用拆分为多个模块，每个模块有自己的功能，每个模块之间可以相互交互，这就是微服务。</li><li>每个服务可以作为一个单独的进程来处理</li></ul><h3 id="1-2-1-总结出微服务的特点"><a href="#1-2-1-总结出微服务的特点" class="headerlink" title="1.2.1 总结出微服务的特点"></a>1.2.1 总结出微服务的特点</h3><ul><li>按业务划分为一个独立运行的程序，即服务单元</li><li>服务之间通过http 协议互相通信，http是一个万能的协议</li><li>自动化部署</li><li>可以用不同的编译语言</li><li>可以使用不同的存储技术</li><li>服务集中化管理</li><li>微服务是一个分布式系统</li></ul><h2 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h2><ul><li>单体项目的部署： 修改配置文件，打包，上传，运行</li><li>CI&#x2F;CD 持续集成 持续交付</li></ul><h3 id="微服务的不足"><a href="#微服务的不足" class="headerlink" title="微服务的不足"></a>微服务的不足</h3><ul><li>微服务的复杂度</li><li>分布式事务的问题</li><li>服务的划分</li><li>服务的部署</li></ul><p>总体上还是利大于弊的</p><h3 id="1-6-微服务的设计原则"><a href="#1-6-微服务的设计原则" class="headerlink" title="1.6 微服务的设计原则"></a>1.6 微服务的设计原则</h3><ul><li>开闭原则 单一原则</li></ul><h2 id="2-SpringCloud-简介"><a href="#2-SpringCloud-简介" class="headerlink" title="2 SpringCloud 简介"></a>2 SpringCloud 简介</h2><p>springcloud 作为java语言的微服务框架，依赖于springboot，具有快速开发，持续交付和容易部署等特点。首要目标就是通过提供一系列开发组件和框架，帮助开发迅速搭建一个分布式的微服务系统</p><ul><li>微服务的主要维护者：<ul><li>alibaba</li><li>netflix</li><li>springofficals</li></ul></li></ul><h3 id="2-1-springCloud常用组件表"><a href="#2-1-springCloud常用组件表" class="headerlink" title="2.1 springCloud常用组件表"></a>2.1 springCloud常用组件表</h3><ul><li>服务的注册和发现  eureka nacos consul</li><li>服务的负载平衡 ribbon dubbo</li><li>服务的相互调度 openFeign dubbo</li><li>服务的容错 hystrix sentinel</li><li>服务网关 geteway zuul</li><li>服务配置统一管理 config-server nacos apollo</li><li>服务消息总线 bus</li><li>服务安全组件 security Oauth2.0</li><li>服务监控 admin jvm</li><li>链路追踪 seleuth + zipkin</li></ul><h3 id="2-3-总结"><a href="#2-3-总结" class="headerlink" title="2.3 总结"></a>2.3 总结</h3><p>springcloud是微服务的具体的落地实现方案</p><ul><li>目前开发中的常用的落地实现有三种：<ul><li>dubbo + zookeeper 半自动的微服务实现框架</li><li>springcloud Netflix 一站式微服务框架</li><li>soringcloud alibaba 新的一站式微服务框架</li></ul></li></ul><h2 id="springcloud-Eureka"><a href="#springcloud-Eureka" class="headerlink" title="springcloud Eureka"></a>springcloud Eureka</h2><p><img src="https://s1.328888.xyz/2022/07/11/Ljvth.png" alt="Ljvth.png"></p><ul><li><p>springcloud Eureka 和 Zookeeper的区别</p><ul><li>为什么zookeeper不适合做注册中心<ul><li>cap原则又称cap定理，指的是在一个分布式系统中<ul><li>一致性 consistency</li><li>可用性 availability</li><li>分区容错性 partition tolerance (这个特征是不可避免的)</li><li>cap原则指的是这三个要素只能同时实现两点不可能三者兼顾。</li></ul></li><li>zk遵循 cp原则 eureka 注重ap高可用</li></ul></li></ul></li><li><p>快速入门</p><ul><li><p>搭建一个注册中心 并让他可以提供注册的服务</p><ul><li>eureka-server 注册服务 可以给别人注册，同时也可以自己注册自己</li><li>存储两个client</li></ul></li><li><p>搭建一个客服端</p></li><li><p>一些问题</p><ol><li><p>在注册中心里面需要一个服务列表保存应用的信息</p></li><li><p>应用下线了 或者挂了 服务管理列表需要整理</p></li><li><p>自动下线怎么处理</p></li><li><p>被动下线怎么处理</p><ol><li><p>应用和注册中心需要联系：需要心跳机制</p></li><li><p>每次心跳就是一次请求</p></li><li><p>应用之间如何交互？</p><ol><li>将服务列表缓冲到本地 不需要再由注册中心参与了</li></ol></li><li><p>缓存到本地列表出现了脏读了怎么办？</p></li><li><p>如果在一段时间内，大量的应用都不和注册中心联系了 怎么办？</p><p>eureka 不会踢出任何一个应用</p></li></ol></li></ol></li></ul></li><li><p>注册中心的集群</p><ul><li>集群的方案<ul><li>中心化集群</li><li>主从模式（redis）</li><li>去中心化模式 （更加高可用）：在去中心化中就没有主从的概念了 eureka会将网络扩散</li></ul></li></ul></li><li><p>只是彼此注册的话是没有实际意义的，只有实现类似于slaveof的功能才能实现集群</p><ul><li><p>如何实现信息的同步？</p><ul><li>相互注册可以实现信息的共享了</li></ul></li><li><p>最终方案</p><ul><li>将client注册到多个server中即可</li></ul></li></ul></li><li><p>集群的深入理解</p><ul><li>主从模式 主机的选择？</li><li>主从模式 数据如何同步？</li><li>哨兵模式 投票机制 一般是配置好的会被选出来</li></ul></li></ul><h2 id="ribbon的简介"><a href="#ribbon的简介" class="headerlink" title="ribbon的简介"></a>ribbon的简介</h2><ul><li><p>ribbon是一个基于http和tcp的负债均衡的工具，同样也是Netflix的一个软件</p></li><li><p>负载均衡 load balance（LB） http:&#x2F;&#x2F; lb:&#x2F;&#x2F; (负载均衡协议) 服务器的负载均衡nginx</p><ul><li>ribbon的使用架构<ul><li>帮我们发起一个远程调用</li><li>同时完成负载均衡的任务</li><li><img src="https://s1.328888.xyz/2022/07/18/NZO4y.png" alt="NZO4y.png"></li></ul></li></ul></li><li><p>ribbon快速入门</p><ul><li>最好还是先启动provider 然后开启 consumer</li><li>ribbon的核心是负债均衡算法 ： 轮询算法</li><li>一个线程安全的轮询算法需要加锁 效率低 CAS 自旋锁 没有线程的等待和唤醒的过程 <ul><li>优点 性能好 java层面无锁的状态 但是在jvm cmpxchg的层面是有锁的  compare and swap 比较并且交换</li><li>缺点 在短暂时间内cpu使用了飙升 还有ABA问题</li></ul></li></ul></li><li><p>可以修改ribbon的均衡算法  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#注意是在consumer里面的内容需要修改</span></span><br><span class="line"><span class="comment">#访问不同的服务可以使用不同的算法规则</span></span><br><span class="line"><span class="attr">provider:</span> <span class="comment">#先写服务提供者的名称</span></span><br><span class="line"> <span class="attr">ribbon:</span></span><br><span class="line">   <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span> <span class="comment">#几种算法的全路径名</span></span><br></pre></td></tr></table></figure></li><li><p>懒加载</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">eager-load:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="spring-cloud-OpenFeign"><a href="#spring-cloud-OpenFeign" class="headerlink" title="spring cloud OpenFeign"></a>spring cloud OpenFeign</h2><ul><li><p>openFeign的快速入门</p><ul><li>一个注册中心 一个处理者 一个请求者</li><li>总结 <ul><li>前端（browser）—-&gt; user -service (&#x2F;userDoOrder)———&gt;RPC—-&gt;order-service</li><li>超时问题？ 默认等待1s 超过1s就会报告超时 需要配置一个自定义的超时时间</li><li>feign只是封装了远程调用的功能 实际上使用的还是ribbon 所以我们需要修改的是ribbon的超时时间<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Ribbon:</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">3000</span> <span class="comment"># 给3s超时时间</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">3000</span> <span class="comment"># 连接服务的超时时间</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>服务雪崩</p><ul><li><p>起因：在一个分布式的服务中往往存在一个链式的调用，用户去请求A的服务，用户的每一个请求会分配一个线程为其服务，当前的服务不一定支持这个功能就会需要调用其他的服务，就会形成链式的调用，当链路中纯在一个服务宕机的时候，就会出现一个服务频繁的请求和等待，导上游线程忙等。</p></li><li><p>总结：服务雪崩的核心本质就是线程没有回收</p></li><li><p>解决方案：</p><ol><li>调整等待时间：这样可以缓解压力，但是很有局限性，不灵活。有的服务需要的时间原本就多。导致有些服务无法完成</li><li>在上游服务中直到下一个服务的状态如果是ok的，就正常访问。如果是宕机，就return，这样就可以缓解服务雪崩了。（同时最好设置好备选方案）</li></ol></li><li><p>一定要注意参数需要特定的注解哦</p><ul><li>@requestparam</li><li>@requestbody</li></ul></li></ul></li><li><p>springcloud Hystrix简介</p><ul><li>熔断器，也叫断路器（正常情况下是关闭的只有出现问题的时候才会被开启）用来保护微服务不雪崩的方法。思想基本同上</li></ul></li><li><p>Hystrix 快速入门</p><ul><li>通常适合open feign一起使用</li><li>什么是服务降级<ul><li>if-else if 假设对方服务不可用了 提供一个备选的方案 并且立刻返回一个友好的页面</li><li>那些情况下会出现服务降级？ 服务异常 超时 熔断促发降级 线程池爆满导致降级</li></ul></li><li>什么是服务熔断？<ul><li>当服务到达最大负载的时候 启动服务熔断</li><li>可以类比表现是 限制最大流量</li></ul></li><li>什么是服务限流<ul><li>秒杀高并发等操作，严禁一窝蜂的涌上来，大家排队，每秒n个</li></ul></li></ul></li></ul><h2 id="spring-cloud-gateway"><a href="#spring-cloud-gateway" class="headerlink" title="spring cloud gateway"></a>spring cloud gateway</h2><ul><li><p>网关的核心是一组过滤器 按照先后循序来执行操作 web三大组件 servlet listener filter</p></li><li><p>拦截器是属于springmvc的 主要是拦截进入controller的请求的</p></li><li><p>动态路由需要结合eureka注册中心 获取服务列表才能实现负载均衡</p></li><li><p>prediction 断言选项可以配置许多的信息已完成对路由的管理</p></li><li><p>ip拦截</p></li><li><p>黑名单和白名单（一般境况下都是使用黑名单） blake_list white_list</p></li><li><p>数据库通常是使用白名单的</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这些都是在GLobalFilter中实现的 并且需要实现Ordered 管理过滤器的优先级</span></span><br><span class="line"><span class="comment">//关键过程步骤</span></span><br><span class="line"><span class="comment">// 1. 拿到ip 2. 检验ip是否符合规范 3. 放行/拦截</span></span><br><span class="line"><span class="comment">//通过查询数据库 看这个ip是否存在于黑名单中 msql的数据库并发 只要是可以存储数据的地方都是数据库</span></span><br><span class="line"><span class="comment">//网关的并发比较高 不要再网关里面直接使用mysql的操作 后台程序可以查询数据库 用户量 并大量不大</span></span><br><span class="line"><span class="comment">//如果并发量发可以使用redis 或者在内存中写好</span></span><br><span class="line"><span class="comment">//java UUID可以实现生成一个uid</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringCloud&quot;&gt;&lt;a href=&quot;#SpringCloud&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud&quot;&gt;&lt;/a&gt;SpringCloud&lt;/h1&gt;&lt;p&gt;微服务框架的系统架构是一个分布式的系统，按照业务领域划分为独立的服务</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SpringMVCLearn</title>
    <link href="http://example.com/2024/05/22/SpringMVCLearn/"/>
    <id>http://example.com/2024/05/22/SpringMVCLearn/</id>
    <published>2024-05-22T08:33:06.000Z</published>
    <updated>2024-05-22T08:33:06.814Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><ul><li>纯注解式开发 </li><li>跳转方式有优化</li><li>日期处理时相对麻烦的</li><li>拦截器：更多的处理请求和响应的时机 感觉类似于监听器</li><li>SSM整合(Spring SpringMVC mybatis) 整合后台的功能</li></ul><h1 id="1-什么是SpringMVC"><a href="#1-什么是SpringMVC" class="headerlink" title="1. 什么是SpringMVC"></a>1. 什么是SpringMVC</h1><ul><li>它是用来mvc开发模式的框架用来优化控制器，他是spring家族的一员，他也具备AOP和IOC。</li><li>什么是MVC？<ul><li>他是一种开发模式</li><li>他是模型视图控制器的简称 (module view controller)</li><li>所有的web应用都是基于MVC开发模式的<ul><li>模型层：包含实体类，业务逻辑，数据访问</li><li>视图层：html，javascript，vue 都是视图层的 用来呈现数据的就是试图层</li><li>控制层：用来接收用户端的请求，并且返回响应到客服端的组件 servlet就是controller层</li></ul></li><li><img src="https://s1.328888.xyz/2022/05/25/lTnlB.png" alt="lTnlB.png"></li></ul></li></ul><h2 id="1-1-springMVC的优点"><a href="#1-1-springMVC的优点" class="headerlink" title="1.1 springMVC的优点"></a>1.1 springMVC的优点</h2><ol><li>轻量级，基于MVC框架</li><li>易于上手，容易理解，功能强大</li><li>它具备IOC和AOP</li><li>完全基于注解开发</li></ol><ul><li><img src="https://s1.328888.xyz/2022/05/25/lTZT7.png" alt="lTZT7.png"></li><li><img src="https://s1.328888.xyz/2022/05/25/lTNVg.png" alt="lTNVg.png"></li></ul><h2 id="1-2-基于注解的SpringMVC框架的开发步骤："><a href="#1-2-基于注解的SpringMVC框架的开发步骤：" class="headerlink" title="1.2  基于注解的SpringMVC框架的开发步骤："></a>1.2  基于注解的SpringMVC框架的开发步骤：</h2><ol><li>新建项目，选择webapp的模板</li><li>添加缺失的目录(test,java,resource) 并修改目录属性</li><li>修改pom文件，添加SpringMVC的依赖，添加servlet的依赖</li><li>添加springmvc.xml配置文件,指定包扫描，添加视图解析器</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--添加包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.sea.Controller&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--添加视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!----------------------------------------------容易出错的点------------------------------------------------&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置一个前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/admin/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> <span class="comment">&lt;!--前缀是要夹在//中间的--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!---------------------------------------------------------------------------------------------------------&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置一个后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>删除web.xml文件，新建web.xml文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册springmvc的框架--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            指定拦截什么样的请求</span></span><br><span class="line"><span class="comment">            http://localhost:8080/one</span></span><br><span class="line"><span class="comment">            http://localhost:8080/demo.action</span></span><br><span class="line"><span class="comment">            &lt;a href=&quot;$&#123;pageContext.request.ContextPath&#125;/demo.action&quot;&gt;访问服务器&lt;/a&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>在web.xml文件中注册springmvc框架（所有的web请求都是基于servlet的）</li><li>在webapp目录下新建admin目录，在admin目录下新建main.jsp页面，删除index.jsp页面,并新建，发送请求给服务器</li><li>开发控制器(servlet),他是一个普通的类。(普通的类要担当起servlet的功能)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sea.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Driver;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span> <span class="comment">//交给spring创建对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoAction</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * action中所有的功能实现都是由方法来实现的</span></span><br><span class="line"><span class="comment">    * action的方法是有规范的</span></span><br><span class="line"><span class="comment">    *   1.访问权限是public</span></span><br><span class="line"><span class="comment">    *   2.返回值时任意的</span></span><br><span class="line"><span class="comment">    *   3.方法的名称任意</span></span><br><span class="line"><span class="comment">    *   4.方法可以没有参数 如果有可以任意类型</span></span><br><span class="line"><span class="comment">    *   5.要使用@requestMapping的注解来声明一个访问的路径(名称)</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/demo1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">demo</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;服务器访问成功............&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;mainkklt&quot;</span>;  <span class="comment">//直接跳到/admin/main.jsp 这里是有一定的磨法的感觉的 </span></span><br><span class="line">        <span class="comment">//磨法已破解 &lt;property name=&quot;prefix&quot; value=&quot;/admin/&quot;&gt;&lt;/property&gt; &lt;!--前缀是要夹在//中间的--&gt;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="9"><li>添加tomcat进行测试功能</li></ol><ul><li><pre><code class="xml">&lt;build&gt;  &lt;resources&gt;    &lt;resource&gt;      &lt;directory&gt;/src/main/java&lt;/directory&gt;      &lt;includes&gt;        &lt;include&gt;**/*.xml&lt;/include&gt;        &lt;include&gt;**/*.properties&lt;/include&gt;      &lt;/includes&gt;    &lt;/resource&gt;    &lt;resource&gt;      &lt;directory&gt;/src/main/resources&lt;/directory&gt;      &lt;includes&gt;        &lt;include&gt;**/*.xml&lt;/include&gt;        &lt;include&gt;**/*.properties&lt;/include&gt;      &lt;/includes&gt;    &lt;/resource&gt;  &lt;/resources&gt;&lt;/build&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 1.3 分析web请求</span><br><span class="line"></span><br><span class="line">​    index.jsp &lt;-----------------------&gt;Dispatvhersrevlet&lt;--------------------------&gt; springMVC的处理器是一个普通的方法不再是一个servlet</span><br><span class="line">        核心处理器</span><br><span class="line"></span><br><span class="line">+ 因此我们需要在spring的配置文件中添加一个核心处理器的bean</span><br><span class="line"></span><br><span class="line">### 1.3.1 注解的解读</span><br><span class="line"></span><br><span class="line"> @RequestMapping可以加在类上 也可以加在方法上</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">@RequestMapping(&quot;/demo1&quot;)</span><br><span class="line">public String demo()&#123;</span><br><span class="line">    &#123;System.out.println(&quot;服务器访问成功............&quot;);</span><br><span class="line">    return &quot;mainkklt&quot;;  //直接跳到/admin/main.jsp 这里是有一定的磨法的感觉的 磨法已破解 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/demo.action&quot;</span>&gt;</span>访问服务器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></code></pre></li></ul><p>（1） 加在方法上，是为此方法注册一个可以访问的名称</p><p>（2） 此注解可以加在类上面，相当于是包名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sea.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Driver;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span> <span class="comment">//交给spring创建对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoAction</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * action中所有的功能实现都是由方法来实现的</span></span><br><span class="line"><span class="comment">    * action的方法是有规范的</span></span><br><span class="line"><span class="comment">    *   1.访问权限是public</span></span><br><span class="line"><span class="comment">    *   2.返回值时任意的</span></span><br><span class="line"><span class="comment">    *   3.方法的名称任意</span></span><br><span class="line"><span class="comment">    *   4.方法可以没有参数 如果有可以任意类型</span></span><br><span class="line"><span class="comment">    *   5.要使用@requestMapping的注解来声明一个访问的路径(名称)</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/demo1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">demo</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;服务器访问成功............&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;mainkklt&quot;</span>;  <span class="comment">//直接跳到/admin/main.jsp 这里是有一定的磨法的感觉的</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>提交数据到action</li><li>各种数据携带的返回值</li><li>页面跳转的四种跳转</li><li>携带数据跳转</li></ul><h3 id="1-3-2-五种数据提交方式数据的方式"><a href="#1-3-2-五种数据提交方式数据的方式" class="headerlink" title="1.3.2 五种数据提交方式数据的方式"></a>1.3.2 五种数据提交方式数据的方式</h3><ol><li><h2 id="单个数据提交"><a href="#单个数据提交" class="headerlink" title="单个数据提交"></a>单个数据提交</h2></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/one.action&quot;</span> &gt;</span></span><br><span class="line">    姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;myname&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;myage&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/req&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">Test1</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;this is PostRequest&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Unique&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><h2 id="对象封装提交"><a href="#对象封装提交" class="headerlink" title="对象封装提交"></a>对象封装提交</h2><p>再提交中使用参数的名称与实体类中的变量名一致，这可以自动提交数据，自动创建对象，自动类型转换，自动封装数据到对象中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/two.action&quot;</span>&gt;</span></span><br><span class="line">    姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;uage&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">package com.sea.Controller.paramterContain;</span><br><span class="line">public class Users &#123;</span><br><span class="line">    private String uname;</span><br><span class="line">    private int uage;</span><br><span class="line"></span><br><span class="line">    public String getUname() &#123;</span><br><span class="line">        return uname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUname(String uname) &#123;</span><br><span class="line">        this.uname = uname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getUage() &#123;</span><br><span class="line">        return uage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUage(int uage) &#123;</span><br><span class="line">        this.uage = uage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Users() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Users(String uname, int uage) &#123;</span><br><span class="line">        this.uname = uname;</span><br><span class="line">        this.uage = uage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Users&#123;&quot; +</span><br><span class="line">                &quot;uname=&#x27;&quot; + uname + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, uage=&quot; + uage +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    _________________________________________________________________________________________________________________________</span><br><span class="line">        @RequestMapping(&quot;/two&quot;)</span><br><span class="line">    public String jump2(Users users)&#123;</span><br><span class="line">        System.out.println(users);</span><br><span class="line">        return &quot;Unique&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><h2 id="动态占位符提交"><a href="#动态占位符提交" class="headerlink" title="动态占位符提交"></a>动态占位符提交</h2><p>仅限于超链接或者地址栏提交数据，他是一杠一值，一杠一大括号。</p></li></ol><h4 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/three/张三/22.action&quot;</span>&gt;</span>动态提交<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/three/&#123;uname&#125;/&#123;uage&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">jump3</span><span class="params">(<span class="meta">@PathVariable(&quot;uname&quot;)</span> String name,<span class="meta">@PathVariable(&quot;uage&quot;)</span> <span class="type">int</span> age)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;name:&quot;</span>+name+<span class="string">&quot;  age:&quot;</span>+age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Unique&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><h2 id="映射名称不一致"><a href="#映射名称不一致" class="headerlink" title="映射名称不一致"></a>映射名称不一致</h2></li></ol><h4 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h4><p>提交请求参数与action方法的形参的名称不一致，使用注解@RequestParam来解析</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>参数不一致的解决方案<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/four.action&quot;</span>&gt;</span></span><br><span class="line">    姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/four&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">jump4</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String uname,<span class="meta">@RequestParam(&quot;age&quot;)</span> <span class="type">int</span> uage)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;uname:&quot;</span>+uname+<span class="string">&quot;  uage:&quot;</span>+uage);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Unique&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>该注解专门用来结果名称不一致的问题</li></ul><ol start="5"><li><h2 id="手工提取数据"><a href="#手工提取数据" class="headerlink" title="手工提取数据"></a>手工提取数据</h2></li></ol><ul><li>自己手工提取数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/five&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">jump5</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">age</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;name:&quot;</span>+name+<span class="string">&quot;  age:&quot;</span>+Integer.parseInt(age));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Unique&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/five.action&quot;</span>&gt;</span></span><br><span class="line">    姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-3-中文乱码的解决方式"><a href="#1-3-3-中文乱码的解决方式" class="headerlink" title="1.3.3 中文乱码的解决方式"></a>1.3.3 中文乱码的解决方式</h3><p>配置过滤器.在web.xml中配置文件。 过滤器和监听器在web.xml文件中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encode<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            private String encoding;</span></span><br><span class="line"><span class="comment">            private boolean forceRequestEncoding;</span></span><br><span class="line"><span class="comment">            private boolean forceResponseEncoding;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encode<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-4-返回值的问题"><a href="#1-3-4-返回值的问题" class="headerlink" title="1.3.4 返回值的问题"></a>1.3.4 返回值的问题</h3><ul><li><p>我们的返回值是任意的，但是当前我们仅仅使用的是String 剩下的返回值是什么呢？如何使用呢？</p><ol><li><p>String：客户端资源的地址，自动拼接前缀后缀，还可以屏蔽自动拼接字符串，可以指定返回的路径</p></li><li><p>Object：返回json格式的对象，自动将对象或集合转换为json，使用的是jackson工具必须要添加依赖 </p><p>一般用于Ajax请求，如何加、jackson的依赖呢？</p></li><li><p>void：无返回值，一般用于ajax的请求</p></li><li><p>基本数据类型，用于ajax请求。</p></li><li><p>ModelAndView：返回数据和视图对象，现在已经很少使用了</p></li></ol></li><li><p>完成ajax请求访问服务器，返回学生集合。</p><ol><li>添加ajax的依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>在webapp的目录下新建js目录，添加jquery函数库</p></li><li><p>在index.jsp页面上导入函数库</p></li><li><p>在action上添加注解@ResponseBody，用来处理ajax的请求</p></li><li><p>在springmvc.xml文件中添加注解驱动<a href="mvc:annotationdriver/">mvc:annotationdriver/</a>，它用来解析@ReSponseBody注解</p></li></ol><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Administrator</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">5</span>/<span class="number">28</span></span><br><span class="line">  Time: <span class="number">8</span>:<span class="number">41</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;%--导入jquery函数库--%&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;js/jquery-3.1.1.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;javascript:showStu()&quot;</span>&gt;<span class="keyword">return</span> a set of students from the server port&lt;/a&gt;</span><br><span class="line">&lt;div&gt;waiting......&lt;/div&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    function <span class="title function_">showStu</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//使用jquery封装的ajax()方法发送请求</span></span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/list.action&quot;</span>,</span><br><span class="line">            type:<span class="string">&quot;get&quot;</span>,</span><br><span class="line">            dataType:<span class="string">&quot;json&quot;</span>,</span><br><span class="line">            success:function (stuList)&#123;</span><br><span class="line">                <span class="type">var</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                $.each(stuList,function (i,stu)&#123;</span><br><span class="line">                    s+=stu.name + <span class="string">&quot;----&quot;</span>+stu.age+<span class="string">&quot;&lt;br&gt;&quot;</span> <span class="comment">//stu.age和stu.name 会调用students的get方法</span></span><br><span class="line">                &#125;);</span><br><span class="line">                $(<span class="string">&quot;#mydiv&quot;</span>).html(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-3-5-四种跳转方式"><a href="#1-3-5-四种跳转方式" class="headerlink" title="1.3.5 四种跳转方式"></a>1.3.5 四种跳转方式</h3><ul><li>请求转发 </li><li>重定向</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sea.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JumpAction</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/one&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">jump1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is a page from jumped via relay&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;last&quot;</span>; <span class="comment">//默认使用视图解析器拼接前后缀进行页面跳转</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/two&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">jump2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is a action from jumped via relay&quot;</span>);</span><br><span class="line">        <span class="comment">//默认使用视图解析器拼接前后缀进行页面跳转 /admin/other.action.jsp是不可以的 所以我们使用了一个特殊的标记 forward 转发</span></span><br><span class="line">        <span class="comment">//forward:字符串可以屏蔽字符串的拼接</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/other.action&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/three&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">jump3</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is a page from jumped via redirect&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/admin/last.jsp&quot;</span>; <span class="comment">//direct：会屏蔽字符串的拼接 所以要写全部的在服务器中的路径</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/four&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">jump4</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is a action from jumped via redirect&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/other.action&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意地址栏的变化哦</li><li>forward和redirect都会屏蔽视图解析器的字符串拼接</li></ul><h4 id="springmvc默认参数"><a href="#springmvc默认参数" class="headerlink" title="springmvc默认参数"></a>springmvc默认参数</h4><ul><li>不需要创建直接使用就好</li></ul><ol><li>HttpServletServlet</li><li>HttpServletResponse</li><li>HttpSession</li><li>Model</li><li>Map</li><li>ModelMap</li></ol><p>注意：Map，ModelMap和request一样，都是用请求作用域进行数据的传递，使用服务器的跳转必须是请求转发的。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Administrator</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">5</span>/<span class="number">28</span></span><br><span class="line">  Time: <span class="number">10</span>:<span class="number">56</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;h1&gt;access success&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--        req.setAttribute(<span class="string">&quot;requestUser&quot;</span>,users);</span><br><span class="line">        session.setAttribute(<span class="string">&quot;session&quot;</span>,users);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;model&quot;</span>,users);</span><br><span class="line">        map.put(<span class="string">&quot;mapuser&quot;</span>,users);</span><br><span class="line">        mmp.addAttribute(<span class="string">&quot;ModelMap&quot;</span>,users);</span><br><span class="line">        --%&gt;</span><br><span class="line">RequestUser:$&#123;requestUser&#125;&lt;br&gt;</span><br><span class="line">session:$&#123;session&#125;&lt;br&gt;</span><br><span class="line">model:$&#123;model&#125;&lt;br&gt;</span><br><span class="line">map:$&#123;mapuser&#125;&lt;br&gt;</span><br><span class="line">mmp:$&#123;ModelMap&#125;&lt;br&gt; &lt;%!--EL表达式的使用 但是我没有学过呢--%&gt; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-3-6-日期的处理"><a href="#1-3-6-日期的处理" class="headerlink" title="1.3.6 日期的处理"></a>1.3.6 日期的处理</h3><h4 id="DateTimeFormat"><a href="#DateTimeFormat" class="headerlink" title="@DateTimeFormat"></a>@DateTimeFormat</h4><ul><li><p>日期的提交处理</p><ol><li><p>单个日期处理</p><p>要使用注解@DateTimeFormat，此注解必须搭配springmvc.xml文件中<a href="mvc:annotation-driven">mvc:annotation-driven</a> &gt; :yum:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>); <span class="comment">//别在腰上</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/mydate&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">mydate</span><span class="params">(<span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> Date mydate)</span>&#123; <span class="comment">//date 无法以参数的形式 传入服务端</span></span><br><span class="line">    System.out.println(mydate);</span><br><span class="line">    System.out.println(sf.format(mydate));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;show&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>类中全局日期处理</p><p>注解开发:注册一个注解，用来解析本类中的所有日期类型，自动转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line"><span class="meta">@InitBinder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initbind</span><span class="params">(WebDataBinder binder)</span>&#123;</span><br><span class="line">    binder.registerCustomEditor(Date.class,<span class="keyword">new</span> <span class="title class_">CustomDateEditor</span>(sf,<span class="literal">true</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>日期的显示处理</p><p>在页面上显示好看的日期，必须使用JSTL.</p><ol><li>添加依赖jstl</li><li>在页面上导入标签库</li><li>使用标签显示数据</li></ol><ul><li>如果是一个单个的日期对象，直接转为想要的格式进行显示，如果是list集合中的实体对象的成员变量是日期，则必须使用JSPL进行显示。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;%--导入jstl的核心标签库--%&gt;</span><br><span class="line">&lt;%@taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&gt;</span><br><span class="line">&lt;%--导入jstl格式化标签库--%&gt;</span><br><span class="line">&lt;%@taglib prefix=&quot;fmt&quot; uri=&quot;http://java.sun.com/jsp/jstl/fmt&quot; %&gt;</span><br></pre></td></tr></table></figure></li><li><p>资源放在WEB-INF的文件夹下 WEB-INF的资源对外不可直接访问 增强了webapp的安全性（只有使用请求转发才能进入到WEB-INF中访问资源）</p><ul><li>INF目录下的动态资源是无法直接访问的，（只有使用请求转发才能进入到WEB-INF中访问资源）</li><li>去掉后缀的action匹配</li></ul></li><li><p>拦截器实现权限的验证</p><ul><li>实现登录处理<ul><li>登录了可以跳转页面 否则跳回。</li></ul></li></ul></li></ul><h3 id="1-3-7-springmvc的拦截器"><a href="#1-3-7-springmvc的拦截器" class="headerlink" title="1.3.7 springmvc的拦截器"></a>1.3.7 springmvc的拦截器</h3><ul><li>针对请求和响应进行额外的处理，在请求和响应的过程中添加预处理，后处理和最终处理。</li><li>拦截器的执行时机<ol><li>prehandle()：请求被处理之前进行操作</li><li>posthandle()：在请求处理之后，但是结果还没有渲染前进行操作，可以改变相应的结果</li><li>afterhandle()：所有的请求响应结束后执行善后工作，清理对象，关闭之源</li></ol></li><li>拦截器实现的两种方式<ul><li>实现接口 HandleInterceptor接口</li><li>实现父类 HandleInterCeptorAdopter()父类</li><li>父类是单继承 接口是多实现</li></ul></li><li>拦截器的实现步骤<ol><li>改造登录的方法，在session中存储用户的信息，用于进行权限验证。</li><li>开发拦截器的功能，实现handleInterceptor接口，重写prehandle()方法。</li><li>在springmvc文件中注册拦截器</li></ol></li></ul><p>配置拦截器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mvc注解驱动 ajax相关的有些注释需要使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--映射要拦截的请求--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/showLogin&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/login&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.sea.interceptor.LoginInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sea.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jdk.nashorn.internal.ir.RuntimeNode;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//完成是否登陆过的判断</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="keyword">if</span>(session.getAttribute(<span class="string">&quot;UserInformation&quot;</span>) == <span class="literal">null</span> )&#123;</span><br><span class="line">            request.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;account or password is not correct&quot;</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;/WEB-INF/JSP/login.jsp&quot;</span>).forward(request,response); <span class="comment">//请求转发 前面的字符串写的是webapp中的路径</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HandlerInterceptor.<span class="built_in">super</span>.postHandle(request, response, handler, modelAndView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HandlerInterceptor.<span class="built_in">super</span>.afterCompletion(request, response, handler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-SSM整合"><a href="#2-SSM整合" class="headerlink" title="2. SSM整合"></a>2. SSM整合</h1><ol><li>建表</li><li>新建maven项目 选择webapp的模板 添加缺失的目录</li><li>在pom文件中加入依赖 (使用自己使用的) 不需要默写 看懂就行</li><li>添加jdbc.properties属性文件</li><li>添加sqlMapConfig.xml文件</li><li>添加applicationContext_mapper.xml文件 (数据访问层的核心配置文件)</li><li>添加applicationContext_service.xml文件（业务逻辑层的核心配置文件）</li><li>添加springmvc.xml文件</li><li>删除web.xml文件，新建，改名，设置中文编码，并注册springmvc框架</li><li>新建实体类 user</li><li>新建userMapper.java接口</li><li>新建usermapper.xml实现增删查的所有的内容</li><li>新建service接口和实现类</li><li>新建测试类，完成所有功能的测试</li><li>新建控制器，完成所有功能</li><li>浏览器设置功能</li></ol><p>lan’ji</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringMVC&quot;&gt;&lt;a href=&quot;#SpringMVC&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC&quot;&gt;&lt;/a&gt;SpringMVC&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;纯注解式开发 &lt;/li&gt;
&lt;li&gt;跳转方式有优化&lt;/li&gt;
&lt;li&gt;日期</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SpringLearn</title>
    <link href="http://example.com/2024/05/22/SpringLearn/"/>
    <id>http://example.com/2024/05/22/SpringLearn/</id>
    <published>2024-05-22T08:33:06.000Z</published>
    <updated>2024-05-22T08:33:06.813Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring简介"><a href="#Spring简介" class="headerlink" title="Spring简介"></a>Spring简介</h1><ul><li>Spring全家桶：spring，springmvc，spring boot，spring cloud</li><li>Spring：出现在2002左右，解决企业开发的难度。减轻对项目模块之间的管理类和类之间的关系，帮助开发人员创建对象，管理对象之间的关系。</li><li>Spring核心技术：IOC AOP。能实现模块之间，类之间的解耦合。</li><li>依赖：classA中使用classB的属性或者方法，叫做classA依赖classB</li><li>框架怎么学？<ul><li>知道框架可以做什么？mybatis——&gt;访问数据库，对表中的数据进行增删查改</li><li>框架的语法，框架要完成一个功能，需要一定的步骤支持。</li><li>框架内的实现原理。</li><li>通过学习实现一个框架</li><li>写框架，实现一个框架</li></ul></li></ul><h1 id="1-IOC-inverse-of-control"><a href="#1-IOC-inverse-of-control" class="headerlink" title="1 IOC(inverse of control)"></a>1 IOC(inverse of control)</h1><ul><li><p>把对象的创建，赋值，管理工作都交给代码外的容器实现的，也就是说对象的创建是由其他的外部资源来实现的。</p><ul><li><p>正转：有开发人员在代码中用new的方式创建对象</p></li><li><pre><code class="java">public static void main()&#123;    Students stu = new Students(); //在代码中创建对象    &#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  + 反转：把原来开发人员管理的创建的对象的权限转交给代码之外的容器实现，由容器替代发发人员管理对象，创建对象，给对象赋值等工作。</span><br><span class="line"></span><br><span class="line">+ 容器：是一个服务器软件，一个框架(Spring)</span><br><span class="line"></span><br><span class="line">+ 为什么要使用IOC呢？</span><br><span class="line"></span><br><span class="line">  + 能够减少对代码的改动，也能实现不同的功能。 实现解耦合。</span><br><span class="line"></span><br><span class="line">+ java中创建对象有哪些方式？</span><br><span class="line"></span><br><span class="line">  + 构造方法 new students</span><br><span class="line">  + 反射 class.forname</span><br><span class="line">  + 序列化</span><br><span class="line">  + 克隆</span><br><span class="line">  + IOC 容器创建对象</span><br><span class="line">  + 动态代理</span><br><span class="line"></span><br><span class="line">+ IOC的一个体现：</span><br><span class="line"></span><br><span class="line">  + servlet 创建一个类继承Httpservlet</span><br><span class="line"></span><br><span class="line">  + 在web.xml注册servlet.</span><br><span class="line"></span><br><span class="line">    + ```xml</span><br><span class="line">      &lt;servlet&gt;</span><br><span class="line">          &lt;servlet-name&gt;myservlet&lt;/servlet-name&gt;</span><br><span class="line">          &lt;servelt-class&gt;com.sea.Myservlet&lt;/servelt-class&gt;</span><br><span class="line">      &lt;/servlet&gt;</span><br><span class="line">      &lt;servlet-mapping&gt;</span><br><span class="line">          &lt;servlet-name&gt;myservlet&lt;/servlet-name&gt;</span><br><span class="line">          &lt;url-parttern&gt;/welcome&lt;/url-parttern&gt;</span><br><span class="line">      &lt;/servlet-mapping&gt;</span><br><span class="line">      </span><br></pre></td></tr></table></figure></code></pre></li><li><p>.我们没有创建过servlet对象 没有 Myservlet servlet&#x3D; new Myservlet();</p><ul><li>为什么没有创建servlet为什么还能使用呢？<ul><li>是tomcat服务器创建的 tomcat也称为容器 放的是servlet对象 当然还有其他的 Listener Filter</li></ul></li></ul></li></ul></li><li><p>IOC的技术实现</p><ul><li><p>主要是用到了DI(Dependency injection)，DI是IOC的技术实现</p></li><li><p>DI依赖注入</p></li><li><p>DI是指我们只需要在程序中提供要使用的对象的名称就可以了至于对象如何在容器中创建和赋值查找都有容器内部实现。</p></li></ul></li><li><p>Spring是使用的DI实现了IOC的功能，Spring底层创建对象使用的原理是反射机制。</p></li><li><p>实现步骤</p><ul><li>创建maven项目</li><li>加入maven依赖<ul><li>spring的依赖，版本5.2.5版本</li><li>junit依赖</li></ul></li></ul></li></ul><hr><ul><li>创建类(接口和她的实现类)<ul><li>和没有使用框架一样，就是普通的类</li></ul></li><li>创建spring需要使用的配置文件<ul><li>声明类的信息，这些类由spring创建和管理</li><li>通过spring的语法，完成属性的配置</li></ul></li></ul><hr><ul><li><p>测试spring是否创建了对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--告诉spring创建对象</span></span><br><span class="line"><span class="comment">    声明bean 就是告诉spring要创建某个类的对象</span></span><br><span class="line"><span class="comment">    id：对象的自定义名称，唯一值。spring通过这个名称找到对象</span></span><br><span class="line"><span class="comment">    class：类的全路径名(不能是接口，因为spring创建对象是反射机制创建对象)</span></span><br><span class="line"><span class="comment">    spring就完成了 Someservice someService = new SomeserviceImpl()；</span></span><br><span class="line"><span class="comment">    spring会把创建好的对象放入到map中，</span></span><br><span class="line"><span class="comment">    springMap.(id值,对象);</span></span><br><span class="line"><span class="comment">    springMap.(&quot;someservices&quot;,new SomeserviceImpl());</span></span><br><span class="line"><span class="comment">    一个bean标签生成一个对象</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;someServices&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.sea.impl.SomeServicesImpl&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">spring配置文件</span></span><br><span class="line"><span class="comment">    1.beans：是根目录，spring把java对象成为bean。</span></span><br><span class="line"><span class="comment">    2.spring-beans.xsd是约束文件 和mybatis指定 dtd是一样的</span></span><br><span class="line"><span class="comment">--&gt;</span>        </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//使用spring容器创建对象</span></span><br><span class="line">    <span class="comment">//指定spring配置文件的名称</span></span><br><span class="line">    String config=<span class="string">&quot;beans.xml&quot;</span>;</span><br><span class="line">    <span class="comment">//2 创建表示spring容器的对象 ApplicationContext</span></span><br><span class="line">    <span class="comment">//Application就是spring存放对象的容器，通过容器获取对象了 他是一个接口</span></span><br><span class="line">    <span class="comment">//ClassPathXmlApplicationContext：表示从类路径中加载spring的配置文件</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(config);</span><br><span class="line">    <span class="comment">//从容器中要获取对象，要调用对象的方法</span></span><br><span class="line">    <span class="comment">//getbean(&quot;bean id&quot;)</span></span><br><span class="line">    <span class="type">SomeServices</span> <span class="variable">someServices</span> <span class="operator">=</span> (SomeServicesImpl)context.getBean(<span class="string">&quot;someServices&quot;</span>);</span><br><span class="line">    <span class="comment">//使用spring创建好的对象执行方法</span></span><br><span class="line">    someServices.dosome();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>三部曲：</p><ul><li>1 创建容器</li><li>2 使用getbean()，获取对象</li><li>3 调用方法执行功能</li></ul></li><li><p>通过给对象添加无参构造方法 可知对象实例实在ClassPathXmlApplicationContext()时创建的；</p></li><li><p>ClassPathXmlApplicationContext()执行时 会将xml中配置的所有bean一并初始化</p></li></ul></li></ul><h2 id="1-1-如何给java对象赋值"><a href="#1-1-如何给java对象赋值" class="headerlink" title="1.1 如何给java对象赋值"></a>1.1 如何给java对象赋值</h2><ul><li>两种配置方式<ul><li>1 xml文件配置</li><li>2 基于注解配置</li></ul></li><li>di语法分类<ul><li>set注入：spring调用类的set方法，在set方法可以实现属性的赋值</li><li>构造注入：spring调用类的有参方法，创建对象，在构造方法中实现赋值</li></ul></li></ul><h3 id="1-1-1-set注入"><a href="#1-1-1-set注入" class="headerlink" title="1.1.1 set注入"></a>1.1.1 set注入</h3><ul><li><pre><code class="html">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;    &lt;bean id=&quot;myApp&quot; class=&quot;com.sea.App&quot;&gt;        &lt;property name=&quot;name&quot; value=&quot;wanghaiyang&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;age&quot; value=&quot;23&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;    &lt;!--需要特别注意的是当你的类中含有有参构造方法时 一定要写一个无参构造方法    set注入中 类中需要有set方法 不然是会报错的--&gt;    &lt;/beans&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ 非简单参数的注入</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line">    &lt;bean id=&quot;myApp&quot; class=&quot;com.sea.App&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;name&quot; value=&quot;wanghaiyang&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;age&quot; value=&quot;23&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;phone&quot; ref=&quot;phone&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;myDate&quot; class=&quot;java.util.Date&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;time&quot; value=&quot;123151564646&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;phone&quot; class=&quot;com.sea.Phone&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;name&quot; value=&quot;apple15&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;IP&quot; value=&quot;156:98:154:2&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></code></pre></li></ul><h3 id="1-1-2-构造注入"><a href="#1-1-2-构造注入" class="headerlink" title="1.1.2  构造注入"></a>1.1.2  构造注入</h3><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &lt;constructor-arg&gt;</span></span><br><span class="line"><span class="comment">      &lt;constructor-arg&gt;标签：一个&lt;constructor-arg&gt;标签表示一个构造方法的一个参数</span></span><br><span class="line"><span class="comment">      &lt;constructor-arg&gt;标签属性：</span></span><br><span class="line"><span class="comment">        name：表示构造方法的形参名</span></span><br><span class="line"><span class="comment">        index：表示构造方法的参数的位置(从左向右是0 1 2 3 ...)</span></span><br><span class="line"><span class="comment">        value：构造的形参类型是简单类型的可以使用</span></span><br><span class="line"><span class="comment">        ref：构造方法是一个引用类型的可以使用</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myApp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.sea.App&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lisi&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;phone&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;phone&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myDate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;time&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123151564646&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;phone&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.sea.Phone&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;IP&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123:123:123:5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Apple_Maxpro&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>注意：写一个Constructor-arg就会调用有对应参数数目的构造器 所有一定把构造器需要的参数写全 不然会报错</p></li><li><p>引用参数的自动注入 </p></li><li><p>byname()</p></li><li><pre><code class="xml">       &lt;bean id=&quot;app&quot; class=&quot;com.sea.App&quot; autowire=&quot;byName&quot;&gt;       &lt;property name=&quot;name&quot; value=&quot;lisi&quot;&gt;&lt;/property&gt;       &lt;property name=&quot;age&quot; value=&quot;23&quot;&gt;&lt;/property&gt;       &lt;!--&lt;property name=&quot;phone&quot; ref=&quot;phone&quot;&gt;&lt;/property&gt;--&gt;       &lt;!--引用类型的自动注入 只对引用类型有效--&gt;       &lt;!--使用的规则是byname，bytype--&gt;       &lt;!--byname：java类中引用类型的属性名和spring容器中（配置文件）&lt;bean&gt;的id名称一样，且数据类型是一致的，这样的容器中的bean，spring能够赋值给引用类型                   语法规则：&lt;bean&gt;标签里面加一个 autowire=&quot;byname&quot;--&gt;   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=&quot;phone&quot; class=&quot;com.sea.Phone&quot;&gt;</span><br><span class="line">    &lt;constructor-arg name=&quot;IP&quot; value=&quot;123:123:123:5&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class="line">    &lt;constructor-arg name=&quot;name&quot; value=&quot;Apple_Maxpro&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>+ bytype()+ ```html  &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;      &lt;bean id=&quot;app&quot; class=&quot;com.sea.App&quot; autowire=&quot;byType&quot;&gt;          &lt;property name=&quot;name&quot; value=&quot;lisi&quot;&gt;&lt;/property&gt;          &lt;property name=&quot;age&quot; value=&quot;23&quot;&gt;&lt;/property&gt;          &lt;!--2.bytype              java类中引用的数据类型和spring容器中bean的class属性是同源关系的，这样的bean能够赋值给引用关系(同类 父子 接口)                          语法规则：&lt;bean&gt;标签里面加一个 autowire=&quot;byType&quot;--&gt;          &lt;/bean&gt;        &lt;bean id=&quot;phone&quot; class=&quot;com.sea.Phone&quot;&gt;          &lt;constructor-arg name=&quot;IP&quot; value=&quot;123:123:123:5&quot;&gt;&lt;/constructor-arg&gt;          &lt;constructor-arg name=&quot;name&quot; value=&quot;Apple_Maxpro&quot;&gt;&lt;/constructor-arg&gt;      &lt;/bean&gt;    &lt;/beans&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    + 自动注入如果有两个符合标准的bean则会出现异常(byType)</span><br><span class="line"></span><br><span class="line">## 补充：</span><br><span class="line"></span><br><span class="line">+ Junit单元测试 一个工具类库，做测试方法使用的。</span><br><span class="line">  + 单元：指定的是方法，一个类中有很多方法，一个方法称为单元</span><br><span class="line">  + 当然也可以使用一个main方法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 2 配置文件</span><br><span class="line"></span><br><span class="line">+ 多配置文件优势</span><br><span class="line">  + 每一个文件比一个文件要小很多，效率高</span><br><span class="line">  + 避免多人带来的冲突</span><br><span class="line">+ 如果你的项目有多个模块(相关功能在一起) 一个模块配置一个文件。</span><br><span class="line">  + 学生考勤模块配置一个文件</span><br><span class="line">  + 学生成绩一个配置文件</span><br><span class="line">+ 多文件配置方式</span><br><span class="line">  + 按功能模块，一个模块一个配置文件</span><br><span class="line">  + 按照类的功能，数据库相关的配置一个配置文件，做事务的功能一个配置文件，做servlet功能的一个配置文件等</span><br><span class="line">+ 包含关系的配置文件</span><br><span class="line"></span><br><span class="line"># 3 注解</span><br><span class="line"></span><br><span class="line">+ 基于注解的DI:通过注解完成java对象的创建，属性赋值</span><br><span class="line">+ 注解的使用步骤</span><br><span class="line">  1. 使用注解必须使用spring-apo依赖</span><br><span class="line">  2. 在类中加入spring的注解(多个不同功能的注解)</span><br><span class="line">  3. 在spring的配置文件中，加入一个组件扫描标签，说明注解在你项目中的位置</span><br><span class="line">+ 学习的注解有以下这些</span><br><span class="line">  1. @component</span><br><span class="line">  2. @Respotory</span><br><span class="line">  3. @Service</span><br><span class="line">  4. @Controller</span><br><span class="line">  5. @value</span><br><span class="line">  6. @Autowired</span><br><span class="line">  7. @Resource</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">* @component:创建对象，等同于&lt;bean&gt;的功能</span><br><span class="line">*   属性：value 就是对象的名称 也就是等同于bean的id</span><br><span class="line">*   value的值是唯一的</span><br><span class="line">* 位置：在类上</span><br><span class="line">* @Component(value=”myStudent“)等同于</span><br><span class="line">* &lt;bean id=&quot;myStudent&quot; class=&quot;com.sea.student&quot;/&gt;</span><br><span class="line">*</span><br><span class="line">* Spring中还有这样几个注释</span><br><span class="line">*   创建对象的注解</span><br><span class="line">*   1.@Repository（使用在持久层类的上面的）：放在dao的实现类上面，表示创建dao对象，dao对象是可以访问数据库的。</span><br><span class="line">*   2.@Service（放在业务层上面的）：放在service的实现类上面的，创建service对象，service对象是做业务处理，可以有事务处理等功能</span><br><span class="line">*   3.@Controller：放在控制器对象上面的，创建控制器对象的，能够提交用户的参数，显示请求的处理结果</span><br><span class="line">*   以上三个注解的使用和@component一样，都能创建对象，但是这三个注释还有额外的功能。</span><br><span class="line">* */</span><br><span class="line">//@Component(value = &quot;myStudent&quot;)</span><br><span class="line">@Component(value = &quot;myStudent&quot;)</span><br><span class="line">public class Student &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;&quot; +</span><br><span class="line">                &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, age=&quot; + age +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span>                                                  <span class="attr">名称</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context  命名空间https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span>                                                   url</span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.ocean&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>注解的注入</p></li><li><p>简单类型的注解注入</p></li><li><pre><code class="java">package com.sea;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Component;/** @value:简单类型的属性赋值*   属性：value是string 类型的，表示简单类型的属性值*   位置：1 在属性定义的上面，无需set方法。推荐使用。*        2 在set方法的上面* */@Component(&quot;myStudent&quot;)public class Student &#123;    @Value(&quot;seaOcean&quot;) //赋值    private String name;    @Value(&quot;23&quot;)//赋值    private int age;    @Override    public String toString() &#123;        return &quot;Student&#123;&quot; +                &quot;name=&#39;&quot; + name + &#39;\&#39;&#39; +                &quot;, age=&quot; + age +                &#39;&#125;&#39;;    &#125;    @Value(&quot;seaOcean&quot;) //也可以    public void setName(String name) &#123;        this.name = name;    &#125;    @Value(&quot;23&quot;)//也可以    public void setAge(int age) &#123;        this.age = age;    &#125;    &#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ 引用类型的注解赋值</span><br><span class="line">+ bytype</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">package com.sea;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component(&quot;mySchool&quot;)</span><br><span class="line">public class School &#123;</span><br><span class="line">    @Value(&quot;北京大学&quot;)</span><br><span class="line">    private String name;</span><br><span class="line">    @Value(&quot;北京&quot;)</span><br><span class="line">    private String address;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;School&#123;&quot; +</span><br><span class="line">                &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, address=&#x27;&quot; + address + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------------------------------------------------------------------</span><br><span class="line">package com.sea;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">* @value:简单类型的属性赋值</span><br><span class="line">*   属性：value是string 类型的，表示简单类型的属性值</span><br><span class="line">*   位置：1 在属性定义的上面，无需set方法。推荐使用。</span><br><span class="line">*        2 在set方法的上面</span><br><span class="line">* */</span><br><span class="line"></span><br><span class="line">@Component(&quot;myStudent&quot;)</span><br><span class="line">public class Student &#123;</span><br><span class="line">    //@Value(&quot;seaOcean&quot;)</span><br><span class="line">    private String name;</span><br><span class="line">  //  @Value(&quot;23&quot;)</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    * 引用类型的赋值</span><br><span class="line">    * @Autowired：spring框架提供的注解，实现引用类的赋值</span><br><span class="line">    * spring中通过注解给引用类型赋值，使用的是自动注入原理</span><br><span class="line">    *</span><br><span class="line">    * 位置：</span><br><span class="line">    *     1 属性定义的上面，无需set方法</span><br><span class="line">    *     2 在set方法的上面</span><br><span class="line">    * */</span><br><span class="line">    @Autowired</span><br><span class="line">    private School school;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;&quot; +</span><br><span class="line">                &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, age=&quot; + age +</span><br><span class="line">                &quot;, school=&quot; + school +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;seaOcean&quot;)</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    @Value(&quot;23&quot;)</span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>+ byname<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">  <span class="meta">@Qualifier(&quot;mySchool&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> School school;</span><br></pre></td></tr></table></figure>+ @resource：byname<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Resource(name = &quot;mySchool&quot;)</span><br><span class="line">private School school;</span><br></pre></td></tr></table></figure>+ @resource：bytype<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Resource</span><br><span class="line">  private School school;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>注意：需要修改的可以使用配置文件</p></li><li><p>不经常修改的可以不用配置文件 使用注解的方式</p></li><li><p>${} </p><ul><li><p>需要在resource目录下创建一个properties文件  </p><ul><li><pre><code>myname=lisimyage=23<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ 在xml文件中配置properties文件</span><br><span class="line"></span><br><span class="line">  ```html</span><br><span class="line">  &lt;context:property-placeholder location=&quot;classpath:/Learn/test.properties&quot;/&gt;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>在java文件的类中@Value注解中 如此使用@value(“${ myname}”) ;</p><ul><li><pre><code class="java">    @Value(&quot;$&#123;myname&#125;&quot;)    public void setName(String name) &#123;        this.name = name;    &#125;    //@Value(&quot;23&quot;)    @Value(&quot;$&#123;myage&#125;&quot;)    public void setAge(int age) &#123;        this.age = age;    &#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 4 AOP</span><br><span class="line"></span><br><span class="line">## 4.1 AOP和动态代理</span><br><span class="line"></span><br><span class="line">+ AOP(Aspect Orient Programming)面向切口编程,基于动态代理的技术，可以使jdk，cglib两种方式。</span><br><span class="line">+ AOP是动态代理的规范化，把动态代理的实现步骤，方式定义好了，让开发人员使用统一的方式，使用动态代理</span><br><span class="line">+ AOP(Aspect Orient Programming) </span><br><span class="line">+ 切面：给你的目标类增加的功能，就是切面，向上面用的日志，事务都是切面。</span><br><span class="line">  + 切面的特点：一般是非业务方法，独立使用的。</span><br><span class="line">+ 怎么理解面向切面编程？</span><br><span class="line">  + 需要在分析项目功能时，找出切面</span><br><span class="line">  + 合理的安排切面的执行（与目标方法的相对位置）</span><br><span class="line">  + 合理安排切面的执行位置，在哪个类，哪个方向增加功能</span><br><span class="line">+ 术语</span><br><span class="line">  + Aspect切面：表示增强的功能 通常是非业务功能：事务，日志，统计信息，参数检查，权限验证</span><br><span class="line">  + JoinPoint:连接点，链接业务方法和切面的位置，就某类中的业务方法</span><br><span class="line">  + pointcut：切入点，指多个连接方点的方法的集合，多个方法</span><br><span class="line">  + 目标对象：给哪个类的方法增强功能，这个类就是目标对象</span><br><span class="line">  + Advice：通知，通知表示切面功能执行的时间</span><br><span class="line">+ 一个切面的三个关键要素</span><br><span class="line">  + 切面的功能代码，切面干什么</span><br><span class="line">  + 切面的执行位置，使用Pointcut表示切面执行的位置</span><br><span class="line">  + 切面的执行时间，使用advice表示时间，在目标方法前还是目标方法后</span><br><span class="line"></span><br><span class="line">## 4.2  AOP的实现</span><br><span class="line"></span><br><span class="line">+ AOP是一个规范，是一个规范化的，标准的动态代理</span><br><span class="line"></span><br><span class="line">+ AOP的技术实现框架</span><br><span class="line"></span><br><span class="line">  1. spring：spring在内部实现了AOP的规范，能做AOP的工作。</span><br><span class="line"></span><br><span class="line">     1. spring主要在事务处理中使用了AOP</span><br><span class="line">     2. 在项目开发中很少使用spring的AOP实现，因为spring的AOP比较笨重。</span><br><span class="line"></span><br><span class="line">  2. aspectJ：一个开源的专门做AOP的框架。 spring框架中已经集成了aspectJ框架，通过spring就能使用aspectJ的功能</span><br><span class="line"></span><br><span class="line">     1. 来自于eclipse基金会支持成立的</span><br><span class="line">     2. 实现AOP有两种方法</span><br><span class="line">        1. 一种是xml配置文件的方式 ：配置全局事务 （事务）</span><br><span class="line">        2. 一种是使用注解的方式</span><br><span class="line">           1. 一般都是使用注解的</span><br><span class="line">              1. 一共有五个注解这五个表示界面的切入时间</span><br><span class="line"></span><br><span class="line">  3. 学习aspectJ的相关语法</span><br><span class="line"></span><br><span class="line">     1. 切面的执行时间，这个执行时间在规范中叫做advice(通知，增强)</span><br><span class="line"></span><br><span class="line">        在aspectJ中是使用注解来表示的.也可以在xml配置文件中使用标签</span><br><span class="line"></span><br><span class="line">        (1) @Before</span><br><span class="line"></span><br><span class="line">        (2) @afterReturning</span><br><span class="line"></span><br><span class="line">        (3) @Around</span><br><span class="line"></span><br><span class="line">        (4) @AfterThrowing</span><br><span class="line"></span><br><span class="line">        (5) @After</span><br><span class="line"></span><br><span class="line">## 4.3 切入点表达式</span><br><span class="line"></span><br><span class="line">1. 表示切面执行的位置，使用的是接入点表达式。</span><br><span class="line"></span><br><span class="line">   execution(modifies-pattern? ret-type-pattern</span><br><span class="line"></span><br><span class="line">   declaring-type-pattern?name-pattern(param-pattern)</span><br><span class="line"></span><br><span class="line">   throws-pattern?)</span><br><span class="line"></span><br><span class="line">   + 类型 返回 路径 方法&amp;参数 异常 </span><br><span class="line">     +  </span><br><span class="line"></span><br><span class="line">   + 下面是最重要的两个</span><br><span class="line"></span><br><span class="line">   -------------------------------------</span><br><span class="line"></span><br><span class="line">   ret-type-pattern</span><br><span class="line"></span><br><span class="line">   name-pattern(param-pattern)</span><br><span class="line"></span><br><span class="line">   ----------------------------------------------</span><br><span class="line"></span><br><span class="line">   + /* 表示 0到多个任意字符</span><br><span class="line">   + .. 用在包名中表示当前包及其子类 用在方法参数中，表示任意多个参数</span><br><span class="line"></span><br><span class="line">------------------------------</span><br><span class="line"></span><br><span class="line">## 4.4 IDEA中是使用AOP</span><br><span class="line"></span><br><span class="line">1. 新建maven项目</span><br><span class="line"></span><br><span class="line">2. 加入依赖</span><br><span class="line"></span><br><span class="line">   1. spring依赖</span><br><span class="line">   2. junit依赖</span><br><span class="line">   3. sapectJ依赖</span><br><span class="line"></span><br><span class="line">3. 创建目标类：接口和他的实现类。</span><br><span class="line"></span><br><span class="line">   要做的是给类中的方法添加功能</span><br><span class="line"></span><br><span class="line">4. 创建切面类：普通类</span><br><span class="line"></span><br><span class="line">   1. 在类的定义方法，方法就是切面的功能代码</span><br><span class="line"></span><br><span class="line">      在方法的上面加入aspectJ中的通知注解，例如@Before</span><br><span class="line">      有需要指定的切入点表达式execution()</span><br><span class="line"></span><br><span class="line">5. 创建spring的配置文件：声明对象，把对象交给容器统一管理</span><br><span class="line"></span><br><span class="line">   声明对象你可以使用注解或者xml文件&lt;bean&gt;</span><br><span class="line"></span><br><span class="line">   1. 声明目标类</span><br><span class="line"></span><br><span class="line">   2. 沈明切面类对象</span><br><span class="line"></span><br><span class="line">   3. 声明aspectj框架中的自动代理生成器标签。</span><br><span class="line"></span><br><span class="line">      自动代理的生成器：用来完成代理对象的自动创建功能的</span><br><span class="line"></span><br><span class="line">6. 创建测试类，冲spring容器中获取目标对象(实际就是代理的对象)</span><br><span class="line"></span><br><span class="line">   通过代理的执行方法，实现aop的功能增强</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">@Test</span><br><span class="line">    public void test()&#123;</span><br><span class="line">        ApplicationContext context = new ClassPathXmlApplicationContext(&quot;ApplicationContextProxy.xml&quot;);</span><br><span class="line">        //冲容器中获取目标对象</span><br><span class="line">        myService service =(myService) context.getBean(&quot;service&quot;); //两个全部写接口 都是接口的实现 tnnd 找了半天</span><br><span class="line">        //通过代理对象执行方法，实现目标方法执行时，增强的功能。</span><br><span class="line">        service.dosomething(23,&quot;hello&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li><li><p>总结：</p><ul><li><p>加依赖</p></li><li><p>目标类和接口</p></li><li><p>切面类</p></li><li><pre><code class="java">package com.annot_6;import org.aspectj.lang.annotation.After;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Before;import org.aspectj.lang.annotation.Pointcut;/** @Aspect是框架中的注解*   作用:表示当前类是切面类*   切面类：是用来给业务方法添加功能的类*   位置：在类的上面* */@Aspectpublic class myAspect &#123;    @After(value=&quot;mypt()&quot;)    public void myFinallyNotice()&#123;        System.out.println(&quot;==========Delete Resource============&quot;);    &#125;    @Before(value=&quot;mypt()&quot;)    public void myAfter()&#123;        System.out.println(&quot;==========Service Start============&quot;);    &#125;    @Pointcut(value = &quot;execution(* *..*Impl.doThird(..))&quot;)    private void mypt()&#123;    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ 配置目标类和切面类</span><br><span class="line"></span><br><span class="line">+ ```xml</span><br><span class="line">  &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">  &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">         http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">         http://www.springframework.org/schema/aop</span><br><span class="line">         https://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;</span><br><span class="line">  </span><br><span class="line">      &lt;!--把对象交给spring容器--&gt;</span><br><span class="line">      &lt;!--申明目标对象--&gt;</span><br><span class="line">      &lt;bean id=&quot;service&quot; class=&quot;com.annot_1.myServiceImpl&quot; /&gt;</span><br><span class="line">      &lt;!--申明切面类对象--&gt;</span><br><span class="line">      &lt;bean id=&quot;myAspect&quot; class=&quot;com.annot_1.myAspect&quot; /&gt;</span><br><span class="line">  </span><br><span class="line">      &lt;!--申明自动代理生成器 使用aspectJ框架的内部功能，创建目标对象的代理对象</span><br><span class="line">      创建代理对象是内存中实现的，修改目标对象的内存中的结构。创建为代理对象</span><br><span class="line">      所以目标对象就是被修改后的代理对象</span><br><span class="line">      aspectj-autoproxy：会把spring容器中所有的目标对象，一次性全部生产代理对象。</span><br><span class="line">      --&gt;</span><br><span class="line">      &lt;aop:aspectj-autoproxy /&gt;</span><br><span class="line">      &lt;!--spring会自动当我们添加环境 就在第4行 和7 8行--&gt;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  &lt;/beans&gt;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>AOP的实现框架</p><ul><li>spring实现了AOP使用的是接口</li><li>aspectJ框架使用注解和配置文件都可以实现AOP功能</li></ul></li></ul><h2 id="4-5-前置通知"><a href="#4-5-前置通知" class="headerlink" title="4.5 前置通知"></a>4.5 前置通知</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 定义方法的要求</span></span><br><span class="line"><span class="comment">    * public 公共方法</span></span><br><span class="line"><span class="comment">    * 方法没有返回值</span></span><br><span class="line"><span class="comment">    * 方法的名称自定义</span></span><br><span class="line"><span class="comment">    * 方法可以有参数，可以没有参数</span></span><br><span class="line"><span class="comment">    *   如果有参数 这个参数不是自定义的 有几个参数类型可以使用</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * @Before:前置通知</span></span><br><span class="line"><span class="comment">    *   属性value，是切面表达式，表示切面的功能执行位置。</span></span><br><span class="line"><span class="comment">    *   位置：方法上方</span></span><br><span class="line"><span class="comment">    * 特点：</span></span><br><span class="line"><span class="comment">    *   在目标方法之前执行的</span></span><br><span class="line"><span class="comment">    *   不会改变执行结果</span></span><br><span class="line"><span class="comment">    *   不会影响方法执行</span></span><br><span class="line"><span class="comment">    * */</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(value = &quot;execution(void *..dosomething(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myBefore</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;current_time:&quot;</span>+<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-6-后置通知"><a href="#4-6-后置通知" class="headerlink" title="4.6 后置通知"></a>4.6 后置通知</h2><ul><li><p>@AfterRetueing(value&#x3D;”execution(* * <em>..</em>(..))”  returning&#x3D;”ret”)</p></li><li><p>Joinpoint如何使用</p><ul><li><p>说明使用的语法</p><ul><li><p>注意一定要将接入点对象放在第一位</p></li><li><pre><code class="java">* @AfterReturning：后置通知* 属性一：value 切入点表达式*    二：returning自定义的变量，表示目标方法的返回值的。        自定义的变量名必须和通知方法的形参名一样*  位置：在方法上定义*  特点* 1.在目标方法之后执行的* 2.能够获取到目标方法的返回值，可以根据这个返回值做不同的处理功能* 3.可以修改这个返回值** 后置通知的执行顺序*   Object res = doOther();*   myAfterReturing(res);*   System.out.println(&quot;res=&quot;+res)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ ```java</span><br><span class="line">  @AfterReturning(value=&quot;execution(* *..doOther(..))&quot;,</span><br><span class="line">      returning = &quot;res&quot;)</span><br><span class="line">      public void myAfterReturning(JoinPoint jp,Object res)&#123;</span><br><span class="line">          System.out.println(&quot;后置通知：方法的定义&quot;+jp.getSignature());</span><br><span class="line">          String res1 = (String) res;</span><br><span class="line">          String s = res1.toLowerCase();</span><br><span class="line">          System.out.println(s);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li></ul><h2 id="4-7-环绕通知"><a href="#4-7-环绕通知" class="headerlink" title="4.7 环绕通知"></a>4.7 环绕通知</h2><ul><li><pre><code class="java">package com.annot_3;import org.aspectj.lang.ProceedingJoinPoint;import org.aspectj.lang.annotation.Around;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Before;import java.util.Date;/** @Aspect是框架中的注解*   作用:表示当前类是切面类*   切面类：是用来给业务方法添加功能的类*   位置：在类的上面* */@Aspectpublic class myAspect &#123; /* * 环绕通知方法的定义格式 *  1.public *  2.必须有一个返回值 *  3.方法名称自定义 *  4.方法有参数，固定的参数 * */    /*    * @Around:环绕通知    *   属性：value 切入点表达式    *   位置：在方法的定义上面    * 特点：    *   1.他是最强力的通知    *   2.在我们的目标方法的前和后都能增强功能    *   3.能控制目标方法是否被调用执行    *   4.修改原来的目标方法的执行结果，影响最后的结果    *    * 环绕通知等同于jdk动态代理的，Invocationhandler接口    *    * 参数：proceedingJointPoint等同于 Method    * 作用：执行目标方法的    * 返回值：就是目标方法的执行结果，可以修改。    *    * */    @Around(value = &quot;execution(* *..myServiceImpl.doFirst(String,Integer))&quot;)    public Object myAround(ProceedingJoinPoint pjp) throws Throwable &#123;        //1实现环绕通知        System.out.println(&quot;ahead&quot;);        Object proceed = null;        proceed = pjp.proceed()+&quot; hello!&quot;;        //2在目标方法前或在目标方法后加入功能        System.out.println(&quot;rear&quot;);        return proceed;    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 4.8 异常通知</span><br><span class="line"></span><br><span class="line">+ 异常通知方法的定义格式</span><br><span class="line">  + public</span><br><span class="line">  + 没有返回值</span><br><span class="line">  + 方法名称自定义</span><br><span class="line">  + 方法有一个异常，如果还有就是JoinPoint</span><br><span class="line">+ @AfterThrowing：异常通知</span><br><span class="line">  + 属性</span><br><span class="line">    + value 切入点表达式</span><br><span class="line">    + throwing 自定义变量，表示目标方法抛出的异常对象</span><br><span class="line">      + 变量名必须和参数名一样</span><br><span class="line">  + 特点</span><br><span class="line">    + 在目标方法抛出异常是执行</span><br><span class="line">    + 可以做异常的监控目标方法执行时是不是有异常</span><br><span class="line">    + 如果有异常，可以发送邮件，短信进行通知</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">@Aspect</span><br><span class="line">public class myAspect &#123;</span><br><span class="line"></span><br><span class="line">@AfterThrowing(value = &quot;execution(public void com.annot_4.myServiceImpl.doSecond(..))&quot;,throwing = &quot;ex&quot;)</span><br><span class="line"> public void myAfterThrowing(Exception ex)&#123;</span><br><span class="line">    System.out.println(&quot;===========Discover Exception==============&quot;);</span><br><span class="line">    System.out.println(ex.getStackTrace());</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><h2 id="4-9-最终通知"><a href="#4-9-最终通知" class="headerlink" title="4.9 最终通知"></a>4.9 最终通知</h2><ul><li>最终通知方法的定义格式<ul><li>public</li><li>没有返回值</li><li>方法名称自定义</li><li>没有参数，如果有就是JoinPoint</li></ul></li><li>@After：最终通知<ul><li>属性<ul><li>value 切入点表达式</li></ul></li><li>特点<ul><li>总是会执行</li><li>在目标方法之后执行</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">myAspect</span> &#123;</span><br><span class="line"><span class="meta">@After(value=&quot;execution(* *..*Impl.doThird(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myFinallyNotice</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;==========Delete Resource============&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        目标方法</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    myFinallyNotice()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>以这种意思在里面 所以一般用于关闭资源</li></ul><h2 id="4-10-Pointcut"><a href="#4-10-Pointcut" class="headerlink" title="4.10 @Pointcut"></a>4.10 @Pointcut</h2><ul><li>这个注解是用于定义和管理切入点的，如果你的项目中有多个切入点表达式是重复的，可以复用的，可以使用pointcut</li><li>属性<ul><li>value 切入点表达式</li><li>加在方法上方</li></ul></li><li>特点<ul><li>当使用@Pointcut定义在一个方法的上面，此时这个方法的名称就是切入点表达式的别名。其他的通知中，value属性就可以使用这个方法的名称来代替切入点表达式了</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">myAspect</span> &#123;</span><br><span class="line">    <span class="meta">@After(value=&quot;mypt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myFinallyNotice</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==========Delete Resource============&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Before(value=&quot;mypt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myAfter</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==========Service Start============&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Pointcut(value = &quot;execution(* *..*Impl.doThird(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mypt</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>不同形式下的不同代理</p><ul><li>目标类实现接口的时候使用的是jdk的动态代理</li><li>目标类没有实现了接口使用的是CGLIB动态代理</li></ul></li><li><p>如何在有接口的情况下还是用CGLIB代理？</p><ul><li><p>需要修改配置文件</p></li><li><pre><code class="html">&lt;!--如果你希望目标类有接口使用CGLIB代理的话--&gt;&lt;!--proxy-target-class=&quot;true&quot; 告诉框架cglib代理--&gt;&lt;aop:aspectj-autoproxy proxy-target-class=&quot;true&quot;/&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"># 5 关于spring和mybatis的使用</span><br><span class="line"></span><br><span class="line">+ 把spring和mybatis集成到一起，像一个框架一样使用。</span><br><span class="line"></span><br><span class="line">  + 使用的技术是IOC</span><br><span class="line"></span><br><span class="line">+ 为什么IOC可以将mybatis和spring整合起来呢？</span><br><span class="line"></span><br><span class="line">  + 以为IOC能够创建对象，可以将mybatis框架中的对象交给spring统一创建，开发人员从spring中获取对象。</span><br><span class="line">  + 开发人员就不需要同时面对两个框架了，就面对一个spring就行了</span><br><span class="line"></span><br><span class="line">+ mybatis使用步骤，对象</span><br><span class="line"></span><br><span class="line">  + 定义接口，studentsDAO</span><br><span class="line">  + 定义mapper文件，studentsDAO.xml</span><br><span class="line">  + 创建DAO的代理对象 StudentsDAO dao = sqlsession.getMapper(StudentsDAO.class);</span><br><span class="line">  + List&lt;students&gt; list = dao.selectStudents();</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">+ 要使用DAO对象，需要使用getmapper()方法：</span><br><span class="line"></span><br><span class="line">  + 怎么获取getmapper()方法</span><br><span class="line">    + 获取SqlSession对象，需要使用sqlsessionfactory的对象openSession()方法</span><br><span class="line">    + 创建sqlsessionfactory对象。通过读取mybatis的主配置文件，能够创建sqlsessionfactory对象</span><br><span class="line">  + 需要使用sqlsessionfactory对象，使用factory能获取sqlsession</span><br><span class="line">  + factory的创建需要读取主配置文件</span><br><span class="line"></span><br><span class="line">+ 主配置文件</span><br><span class="line"></span><br><span class="line">  + 环境信息 不再使用原先的连接池 使用更高级的连接池 这个连接池交给spring来创建</span><br><span class="line">  + mapper位置</span><br><span class="line">  + 日志设置</span><br><span class="line"></span><br><span class="line">  ===============</span><br><span class="line"></span><br><span class="line">+ 通过以上的说明 spring需要创建以上的对象</span><br><span class="line"></span><br><span class="line">  1. 独立的连接池的对象，使用阿里巴巴的德鲁伊连接池</span><br><span class="line">  2. sqlsessionfactory对象</span><br><span class="line">  3. 创建DAO对象</span><br><span class="line"></span><br><span class="line">+ 创建出spring需要对象就可以使用spring和mybatis整合起来使用</span><br><span class="line"></span><br><span class="line">+ 步骤：</span><br><span class="line"></span><br><span class="line">  1. 新建maven项目</span><br><span class="line">  2. 加入maven的依赖</span><br><span class="line">     1. spring的依赖</span><br><span class="line">     2. mybatis的依赖</span><br><span class="line">     3. mysql的驱动</span><br><span class="line">     4. spring的事务管理的依赖</span><br><span class="line">     5. mybatis和spring集成的依赖：mybatis官方提供的，用来在spring项目中创建mybatis中的sqlsessionfactroy，DAO对象</span><br><span class="line">  3. 创建实体类</span><br><span class="line">  4. 创建接口和mapper文件</span><br><span class="line">  5. 创建主配置文件</span><br><span class="line">  6. 创建service接口和实现类，属性是dao</span><br><span class="line">  7. 创建spring的配置文件：声明mybatis的对象交给spring创建</span><br><span class="line">     1. 数据源</span><br><span class="line">     2. sqlsessionfactory</span><br><span class="line">     3. DAO对象</span><br><span class="line">     4. 声明自定义的servce</span><br><span class="line"></span><br><span class="line">  ```xml</span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.11&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">      </span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.5.9&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">      </span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;8.0.28&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">      </span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;5.2.5.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">      </span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;5.2.5.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">      </span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;5.2.5.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">      </span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.1.12&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.3.1&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">util:properties</span> <span class="attr">location</span>=<span class="string">&quot;baseinf.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc_url&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc_user&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc_password&#125;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;filters&quot;</span> <span class="attr">value</span>=<span class="string">&quot;stat&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxWait&quot;</span> <span class="attr">value</span>=<span class="string">&quot;6000&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;timeBetweenEvictionRunsMillis&quot;</span> <span class="attr">value</span>=<span class="string">&quot;60000&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minEvictableIdleTimeMillis&quot;</span> <span class="attr">value</span>=<span class="string">&quot;300000&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;testWhileIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;testOnBorrow&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;testOnReturn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;poolPreparedStatements&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxOpenPreparedStatements&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;asyncInit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>由于我们不再使用POOLED所以我们使用配置bean的方式使用德鲁伊(druid)连接池</p></li><li><p>mybatis的配置文件</p></li><li><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configuration        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt;    &lt;settings&gt;        &lt;!--设置，ybatis输出日志--&gt;        &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot;/&gt;    &lt;/settings&gt;    &lt;!--&lt;typeAliases&gt;        &lt;package name=&quot;com.sea&quot;/&gt;    &lt;/typeAliases&gt;--&gt;    &lt;mappers&gt;        &lt;mapper resource=&quot;com/sea/DAO/studentsDAO.xml&quot;/&gt;        &lt;!--&lt;package name=&quot;com.sea.DAO&quot;/&gt;--&gt;    &lt;/mappers&gt;&lt;/configuration&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ applicationcontext 里面包含  数据源、factory和DAO</span><br><span class="line"></span><br><span class="line">+ ```xml</span><br><span class="line">  &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">  &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xmlns:util=&quot;http://www.springframework.org/schema/util&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">         http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd&quot;&gt;</span><br><span class="line">  </span><br><span class="line">      &lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot; init-method=&quot;init&quot; destroy-method=&quot;close&quot;&gt;</span><br><span class="line">          &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybase?serverTimezone=GMT&quot;/&gt;</span><br><span class="line">          &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">          &lt;property name=&quot;password&quot; value=&quot;why123456&quot;/&gt;</span><br><span class="line">          &lt;property name=&quot;maxActive&quot; value=&quot;20&quot;/&gt;</span><br><span class="line">      &lt;/bean&gt;</span><br><span class="line">      &lt;bean id=&quot;SqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">          &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-main.xml&quot;/&gt;</span><br><span class="line">          &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class="line">      &lt;/bean&gt;</span><br><span class="line">       &lt;!--创建DAO对象，使用Sqlsession的getMapper(Students.class)--&gt;</span><br><span class="line">      &lt;!--来自于官方提供的 住主要作用是在内部调用getMapper()生成每个DAO接口的代理对象--&gt;</span><br><span class="line">      &lt;!--dao对象的默认名称是接口名首字母小写--&gt;</span><br><span class="line">      &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">          &lt;!--指明sqlSessionFactoryBeanName--&gt;</span><br><span class="line">          &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;SqlSessionFactory&quot;/&gt;</span><br><span class="line">          &lt;!--指定一个包名，包名是DAO接口所在的包名,会扫描所有的接口 把每个接口都执行一次 getmapper()方法 得到每个接口的DAO对象 创建好的DAO对象会放的spring的容器中--&gt;</span><br><span class="line">          &lt;property name=&quot;basePackage&quot; value=&quot;com.sea.DAO&quot;/&gt;</span><br><span class="line">      &lt;/bean&gt;</span><br><span class="line">  &lt;/beans&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>jdbc.properties</p></li><li><pre><code class="properties">jdbc.url=jdbc:mysql://localhost:3306/mybase?serverTimezone=GMTjdbc.username=rootjdbc.password=why123456jdbc.maxActive=20                         //前面不加jbdc的话 username会和windows系统变量发生冲突<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 6 事务</span><br><span class="line"></span><br><span class="line">+ 使用事务的情况</span><br><span class="line"></span><br><span class="line">  + 当我的操作涉及到多个表或者是多个sql语句的delect update insert 我们需要保证这些语句全部成功才能完成</span><br><span class="line">  + 或者全部失败才能保证操作是真确的</span><br><span class="line">    + 例如：从A账户向B账户中汇款 A的减和B的加要同时成立</span><br><span class="line"></span><br><span class="line">+ 在java的代码中应该如何使用事务呢？</span><br><span class="line"></span><br><span class="line">  + DAO是sql语句的java代表 其中的函数是是sql语句的换回结果 DAO.xml文件记录了sql语句</span><br><span class="line">  + 放在了service的业务方法中 因为service中会有多个DAO方法，执行多个sql语句</span><br><span class="line"></span><br><span class="line">+ 不同方式的事务操作</span><br><span class="line"></span><br><span class="line">  + JBDC代码中处理事务需要使用Connection需要提交事务需要conn.commit 回滚事务需要conn.rollback</span><br><span class="line">  + mybatis访问数据库，处理事务sqlsession.commit 和 sqlsession.rollback()</span><br><span class="line"></span><br><span class="line">+ spring提供了一种处理事务处理的同i模型，能够使用统一的步骤，方式完成多种不同数据库访问技术的事务处理。</span><br><span class="line"></span><br><span class="line">  + 使用spring的事务处理机制，可以完成mybatis和hibernate的数据库事务处理</span><br><span class="line"></span><br><span class="line">+ 申明式事务：</span><br><span class="line"></span><br><span class="line">  1. 事务内部提交，回滚事务，使用事务管理器的对象，代替完成commit rollback</span><br><span class="line"></span><br><span class="line">     事务管理器时一个接口和一套(很多)实现类组成了事务管理器</span><br><span class="line"></span><br><span class="line">     + 接口：platformTransactionManger，定义了事务的重要方法commit rollback</span><br><span class="line"></span><br><span class="line">     + 实现类：spring把每种数据库访问技术的事务处理类创建好了</span><br><span class="line"></span><br><span class="line">     如何使用：需要告知spring你要是用的是那种访问技术</span><br><span class="line"></span><br><span class="line">     需要声明数据库技术对于事务管理器的实现类，在spring的配置文件中使用&lt;bean&gt;声明</span><br><span class="line"></span><br><span class="line">     ```xml</span><br><span class="line">     &lt;bean id=&quot;xxx&quot; class=&quot;*..DataSourceTransactionManager&quot;/&gt;</span><br></pre></td></tr></table></figure>2. 你的业务需要什么样的事务呢？   说明方法需要的事务    1. 事务的隔离级别       DEFAULT       READ_UNCOMMITTED       REPEATABLE_READ       SERICALABLE       2. 事务的超时时间：表示一个方法最长的执行时间，如果方法执行超过了时间，事务就会回滚。       单位是秒，整数值，默认是-1       3. 事务的传播行为        传播行为是用来控制你的方法是不是有事务，是什么样的事务       事务在方法之间是如何使用的 就是事务行为       全波行为有7种       + 最重要的是1               1.  PROPAGETION_REQUIRE                    最常见的事务传播行为 也是默认的传播方式 一定会在事务中执行 如果已有就用 没有就自己创建               2. PROPAGETION_REQUIRE_NEW                   总是信件事务，若当前存在事务，就挂起事务，知道新事务执行完成。               3. PROPAGETION_SUPPORTS                   查询操作 有无事务均可       4. 提交事务的时机          1. 当你的事务方法，执行成功，没有异常抛出，当方法执行完毕，spring在方法执行后提交事务。事务管理器commit          2. 当你的业务方法抛出异常或者error时，spring执行回滚，调用事务管理器的rollback          3. 当你的业务方法抛出非运行时异常，主要是受到查异常时，提交事务             受查异常：在你写代码中，必须进行异常的捕捉       总结spring的事务：            1. 管理事务的时事务管理和它的实现类               2. spring的事务是一个统一的模型                 1. 指定使用的事务管理器实现类，使用&lt;bean&gt;                 2. 指定那些类，哪些方法需要加入事务的功能                 3. 指定方法需要事务需要的隔离级别，转播行为，超时</code></pre></li></ul><h1 id="6-程序举例环境搭建"><a href="#6-程序举例环境搭建" class="headerlink" title="6. 程序举例环境搭建"></a>6. 程序举例环境搭建</h1><h2 id="6-1-基本处理方式"><a href="#6-1-基本处理方式" class="headerlink" title="6.1 基本处理方式"></a>6.1 基本处理方式</h2><p>举例：购买商品trans_sale项目<br>本例要实现购买商品，模拟用户下单，向订单表添加销售记录，从商品表减少库存。</p><p>实现步骤：</p><p>创建两个数据库表 sale,goods<br>sale 销售表<br>goods 商品表</p><ul><li><p>如何给我们已经写好的函数添加事务呢？(有两种方案)</p><ul><li><p>注解方案 spring框架自己用AOP实现给业务方法增加事务功能的，使用@Transactional注解增加事务</p><ul><li>这个书解是spring提供的放在public方法的上面，表示当前方法的具有事务</li><li>可以给注解的属性赋值，表示具体的隔离级别，传播行为，异常信息等</li><li>propagation：用于设置事务的传播属性</li><li>isolate：用于设置事务的隔离级别</li><li>readonly：用于设置对数据的操作是不是只读的</li><li>timeout：用于设置操作与数据库连接的超时限制</li><li>rollbackFor：指定需要回滚的异常类</li><li>rollbackForClassName：指定需要回滚的异常类的类名</li><li>noRollbackFor：不需要回滚的异常类</li><li>noRollbackForClassName：指定不需要回滚的异常类的类名</li></ul></li><li><p>不管是那种事务一定需要事务管理器</p><ul><li><p>需要声明事务管理器对象</p><ol><li><bean id="xx" class="datasourceTransactionManager"></li><li><p>开启事务注解驱动，告诉spring框架，要使用注解的方式管理事务。</p><p>spring使用AOP机制，创建@Transactional所在的类的代理对象，给方法加入事务的功能。</p><p>spring给业务方法加入事务：</p><p>​在你的业务方法执行之前先开启事务，在业务方法之后提交或回滚事务，使用AOP的环绕通知</p><p>Around环绕通知自己不用写了，spring内部已经实现了</p><p>@Around(“你需要添加事务功能的业务方法的切入点表达式”)</p><p>Object myAround(){</p><p>​try{</p><p>​buy(1001,10);</p><p>​spring的事务管理.commit();</p><p>​}catch(Exception e){</p><p>​spring的事务管理.rollback</p><p>​}</p><p>}</p></li></ol></li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sea.Service.Impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sea.Contain.Goods;</span><br><span class="line"><span class="keyword">import</span> com.sea.Contain.Sale;</span><br><span class="line"><span class="keyword">import</span> com.sea.DAO.GoodsDAO;</span><br><span class="line"><span class="keyword">import</span> com.sea.DAO.SaleDAO;</span><br><span class="line"><span class="keyword">import</span> com.sea.Exception.NotEnoughtExcep;</span><br><span class="line"><span class="keyword">import</span> com.sea.Service.ByGoodService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByGoodServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ByGoodService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> SaleDAO saledao;</span><br><span class="line">    <span class="keyword">private</span> GoodsDAO goodsdao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSaledao</span><span class="params">(SaleDAO saledao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.saledao = saledao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGoodsdao</span><span class="params">(GoodsDAO goodsdao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.goodsdao = goodsdao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buy</span><span class="params">(Integer goodsid, Integer nums)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=============start============&quot;</span>);</span><br><span class="line">        <span class="type">Sale</span> <span class="variable">sale</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sale</span>();</span><br><span class="line">        sale.setGoodsid(goodsid);</span><br><span class="line">        sale.setNums(nums);</span><br><span class="line">        saledao.insertSaleRecord(sale);</span><br><span class="line">        <span class="comment">//更新库存</span></span><br><span class="line">        <span class="type">Goods</span> <span class="variable">goods</span> <span class="operator">=</span> goodsdao.selectGoodsById(goodsid);</span><br><span class="line">        <span class="keyword">if</span>(goods == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//没有</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NotEnoughtExcep</span>(<span class="string">&quot;编号是为&quot;</span>+goodsid+<span class="string">&quot;的商品已售空！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(goods.getAmount() &lt; nums)&#123;</span><br><span class="line">            <span class="comment">//商品不足够</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NotEnoughtExcep</span>(<span class="string">&quot;商品不足！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//修改库存了</span></span><br><span class="line">        <span class="type">Goods</span> <span class="variable">buygoods</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Goods</span>();</span><br><span class="line">        buygoods.setId(goodsid);</span><br><span class="line">        buygoods.setAmount(nums);</span><br><span class="line">        goodsdao.updateGoods(buygoods);</span><br><span class="line">        System.out.println(<span class="string">&quot;============end=============&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>在你的方法上面加上@Transactional的注解</li></ol><ul><li>先在applicationcontext中配置我们需要使用到的一些bean  TransactionManager（事务管理） 和 annotation-driver （注解驱动） 在tx里面</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc_url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc_username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc_password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc_maxActive&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;SqlsessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:Mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用MapperScanner创建接口代理类，service使用注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.sea.DAO&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SqlsessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;service&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.sea.Service.Impl.ByGoodServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;goodsdao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;goodsDAO&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;saledao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;saleDAO&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-----------------------------------------重要 关键点-------------------------------------------------------&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用spring的事务处理--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--声明事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;TransactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--连接的数据库，指定数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启事务注解驱动，告诉spring使用注解管理事务的代理对象</span></span><br><span class="line"><span class="comment">        transaction-manager:事务管理器对象的id</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;TransactionManager&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-----------------------------------------重要 关键点-------------------------------------------------------&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sea.Service.Impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sea.Contain.Goods;</span><br><span class="line"><span class="keyword">import</span> com.sea.Contain.Sale;</span><br><span class="line"><span class="keyword">import</span> com.sea.DAO.GoodsDAO;</span><br><span class="line"><span class="keyword">import</span> com.sea.DAO.SaleDAO;</span><br><span class="line"><span class="keyword">import</span> com.sea.Exception.NotEnoughtExcep;</span><br><span class="line"><span class="keyword">import</span> com.sea.Service.ByGoodService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Isolation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Propagation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByGoodServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ByGoodService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> SaleDAO saledao;</span><br><span class="line">    <span class="keyword">private</span> GoodsDAO goodsdao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSaledao</span><span class="params">(SaleDAO saledao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.saledao = saledao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGoodsdao</span><span class="params">(GoodsDAO goodsdao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.goodsdao = goodsdao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * rollbackFor:表示发生指定异常要回滚</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> goodsid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/*@Transactional(</span></span><br><span class="line"><span class="comment">            propagation = Propagation.REQUIRED,</span></span><br><span class="line"><span class="comment">            isolation = Isolation.DEFAULT,</span></span><br><span class="line"><span class="comment">            readOnly = false,</span></span><br><span class="line"><span class="comment">            rollbackFor = &#123;</span></span><br><span class="line"><span class="comment">                    NullPointerException.class,</span></span><br><span class="line"><span class="comment">                    NotEnoughtExcep.class</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">    )*/</span></span><br><span class="line">    <span class="comment">//默认抛出运行时异常回滚事务</span></span><br><span class="line">    <span class="meta">@Transactional</span> <span class="comment">//这里的一行和上面的一大块是等效的</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buy</span><span class="params">(Integer goodsid, Integer nums)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=============start============&quot;</span>);</span><br><span class="line">        <span class="type">Sale</span> <span class="variable">sale</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sale</span>();</span><br><span class="line">        sale.setGoodsid(goodsid);</span><br><span class="line">        sale.setNums(nums);</span><br><span class="line">        saledao.insertSaleRecord(sale);</span><br><span class="line">        <span class="comment">//更新库存</span></span><br><span class="line">        <span class="type">Goods</span> <span class="variable">goods</span> <span class="operator">=</span> goodsdao.selectGoodsById(goodsid);</span><br><span class="line">        <span class="keyword">if</span>(goods == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//没有</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;编号是为&quot;</span>+goodsid+<span class="string">&quot;商品不存在&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(goods.getAmount() &lt; nums)&#123;</span><br><span class="line">            <span class="comment">//商品不足够</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NotEnoughtExcep</span>(<span class="string">&quot;商品不足！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//修改库存了</span></span><br><span class="line">        <span class="type">Goods</span> <span class="variable">buygoods</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Goods</span>();</span><br><span class="line">        buygoods.setId(goodsid);</span><br><span class="line">        buygoods.setAmount(nums);</span><br><span class="line">        goodsdao.updateGoods(buygoods);</span><br><span class="line">        System.out.println(<span class="string">&quot;============end=============&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-2-在大型项目中如何处理事务"><a href="#6-2-在大型项目中如何处理事务" class="headerlink" title="6.2  在大型项目中如何处理事务"></a>6.2  在大型项目中如何处理事务</h2><ul><li><p>使用aspectJ的AOP配置管理事务（掌握）</p><ul><li>适合大型项目，有很多的方法和类需要大量的配置事务，需要使用aspectJ框架功能，在spring配置文件中申明类，方法需要的事务。这种方式业务方法和事务完全分离。</li></ul></li><li><p>实现步骤：</p><ul><li><p>都是在xml配置文件中实现的</p><ol><li><p>要使用的是aspectJ 故需要在maven中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>申明事务管理器的对象</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;TransactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--连接的数据库，指定数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>申明方法需要的事务类型(配置方法的事务属性（隔离级别，传播行为，超时）)</li><li>主配置文件的内容</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mydataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc_url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc_username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc_password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc_maxActive&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;SqlsessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;mydataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:Mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用MapperScanner创建接口代理类，service使用注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.sea.DAO&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SqlsessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;service&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.sea.Service.Impl.ByGoodServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;goodsdao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;goodsDAO&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;saledao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;saleDAO&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--申明式事务处理 和源代码是完全分离的--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--事务管理器对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;TransactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;mydataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--申明业务方法的事务属性--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--id:自定义名称 表示tx:advice 和 &lt;/tx:advice&gt;之间的配置内容的</span></span><br><span class="line"><span class="comment">        transaction-manager：事务管理器对象的id</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!---------------------------------------------关键点------------------------------------------------------&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;myAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;TransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--表示属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--给不同的方法配置事务属性</span></span><br><span class="line"><span class="comment">                name: 1. 方法的名称 1完整的方法名 不带有包和类</span></span><br><span class="line"><span class="comment">                      2.方法可以适合用通配符，*表示任意字符</span></span><br><span class="line"><span class="comment">                propagation：传播行为</span></span><br><span class="line"><span class="comment">                isolation：隔离级别</span></span><br><span class="line"><span class="comment">                rollback-for：指定异常需要回滚的类 需要全限定的类名</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;buy&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;DEFAULT&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.NullPointerException,com.sea.Exception.NotEnoughtExcep&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;add*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;DEFAULT&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;query*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;DEFAULT&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;remover*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;DEFAULT&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;SUPPORTS&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置AOP--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--id：配置切入点表达式的名称，唯一值</span></span><br><span class="line"><span class="comment">            express：切入点表达式，指定哪些类要使用事务，aspectJ会创建代理对象--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;servicePoint&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* *..Service..*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置增强器：关联advice和pointcut</span></span><br><span class="line"><span class="comment">            advice-ref:通知，上面tx:advice那里的配置</span></span><br><span class="line"><span class="comment">            pointcut-ref:切入点表达式的id</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;myAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;servicePoint&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-----------------------------------------------------关键点----------------------------------------------&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="7-在web项目中如何使用容器对象：监听器的使用"><a href="#7-在web项目中如何使用容器对象：监听器的使用" class="headerlink" title="7.在web项目中如何使用容器对象：监听器的使用"></a>7.在web项目中如何使用容器对象：监听器的使用</h1><ul><li><p>之前用的都是SE项目 在main方法中执行代码</p></li><li><p>Web不是怎么运行的，他是在Tomcat中运行的，项目一旦启动就会一直运行的。</p></li><li><p>需求：<br>web项目中的容器对象只需要创建一次，把容器的对象放到全局作用域servletContext中</p><p>如何实现？</p><ul><li>使用监听器 当全局作用域对象创建时 创建容器 放入servletContext中</li></ul></li><li><p>监听器作用：</p><ul><li>创建容器对象，执行ApplicationContext ctx &#x3D; new ClassPathXmlApplicationContext(“applicationContext.xml”)</li><li>把容器对象放入到servletContext，servletContecxt.setAttribute(key,ctx)</li></ul></li><li><p>监听器可以自定义 亦可以使用框架中以提供的contextLoaderListenner.</p></li><li><p>由于tomcat不同的servlet版本导致了冲突 使得有些内容是无法实现的</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>myservlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.sea.Contorller.RegistStudents<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>myservlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/reg<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册监听器ContextLoaderListener</span></span><br><span class="line"><span class="comment">    监听器被创建对象后，会读取/web-inf/applicationContext_1.xml</span></span><br><span class="line"><span class="comment">    为什么要读取文件：因为在监听器中要创建applicationContext对象，需要加载配置文件</span></span><br><span class="line"><span class="comment">    /web-INF/applicationContext.xml就是监听器默认读取的spring配置文件路径</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    可以修改默认的文件位置，使用context-param重新指定文件的位置</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!----------------------------------------------------------important-----------------------------------------------------&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext_1.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!----------------------------------------------------------important-----------------------------------------------------&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring简介&quot;&gt;&lt;a href=&quot;#Spring简介&quot; class=&quot;headerlink&quot; title=&quot;Spring简介&quot;&gt;&lt;/a&gt;Spring简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Spring全家桶：spring，springmvc，spring boot，s</summary>
      
    
    
    
    
  </entry>
  
</feed>
